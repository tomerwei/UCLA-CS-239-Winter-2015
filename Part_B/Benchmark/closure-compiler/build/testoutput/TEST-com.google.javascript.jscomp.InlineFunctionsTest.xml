<?xml version="1.0" encoding="UTF-8" ?>
<testsuite errors="54" failures="22" hostname="cs-210-206.cs.ucla.edu" name="com.google.javascript.jscomp.InlineFunctionsTest" skipped="0" tests="235" time="0.982" timestamp="2015-03-09T03:17:24">
  <properties>
    <property name="java.vendor" value="Oracle Corporation" />
    <property name="lib.dir" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/lib" />
    <property name="refasterjs-jarfile" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/build/refasterjs.jar" />
    <property name="sun.java.launcher" value="SUN_STANDARD" />
    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers" />
    <property name="os.name" value="Mac OS X" />
    <property name="sun.boot.class.path" value="/Library/Java/JavaVirtualMachines/jdk1.7.0_75.jdk/Contents/Home/jre/lib/resources.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_75.jdk/Contents/Home/jre/lib/rt.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_75.jdk/Contents/Home/jre/lib/sunrsasign.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_75.jdk/Contents/Home/jre/lib/jsse.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_75.jdk/Contents/Home/jre/lib/jce.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_75.jdk/Contents/Home/jre/lib/charsets.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_75.jdk/Contents/Home/jre/lib/jfr.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_75.jdk/Contents/Home/jre/classes" />
    <property name="maven-repository-id" value="sonatype-nexus-staging" />
    <property name="java.vm.specification.vendor" value="Oracle Corporation" />
    <property name="ant.home" value="//Users/linmanna/ant" />
    <property name="java.runtime.version" value="1.7.0_75-b13" />
    <property name="gen.dir" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/gen" />
    <property name="user.name" value="linmanna" />
    <property name="ant.file.compiler" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/build.xml" />
    <property name="build.dir" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/build" />
    <property name="ant.build.javac.target" value="1.7" />
    <property name="user.language" value="zh" />
    <property name="test.method" value="" />
    <property name="sun.boot.library.path" value="/Library/Java/JavaVirtualMachines/jdk1.7.0_75.jdk/Contents/Home/jre/lib" />
    <property name="ant.project.default-target" value="jar" />
    <property name="ant.project.name" value="compiler" />
    <property name="java.version" value="1.7.0_75" />
    <property name="user.timezone" value="" />
    <property name="sun.arch.data.model" value="64" />
    <property name="http.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16" />
    <property name="java.endorsed.dirs" value="/Library/Java/JavaVirtualMachines/jdk1.7.0_75.jdk/Contents/Home/jre/lib/endorsed" />
    <property name="sun.cpu.isalist" value="" />
    <property name="sun.jnu.encoding" value="UTF-8" />
    <property name="file.encoding.pkg" value="sun.io" />
    <property name="file.separator" value="/" />
    <property name="java.specification.name" value="Java Platform API Specification" />
    <property name="protoc.executable" value="protoc" />
    <property name="classes.dir" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/build/classes" />
    <property name="java.class.version" value="51.0" />
    <property name="testClasses.dir" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/build/test" />
    <property name="user.country" value="CN" />
    <property name="java.home" value="/Library/Java/JavaVirtualMachines/jdk1.7.0_75.jdk/Contents/Home/jre" />
    <property name="java.vm.info" value="mixed mode" />
    <property name="externs.dir" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/externs" />
    <property name="ant.file" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/build.xml" />
    <property name="os.version" value="10.9.5" />
    <property name="javac.debug" value="on" />
    <property name="path.separator" value=":" />
    <property name="java.vm.version" value="24.75-b04" />
    <property name="ant.library.dir" value="//Users/linmanna/ant/lib" />
    <property name="java.awt.printerjob" value="sun.lwawt.macosx.CPrinterJob" />
    <property name="webservice-jarfile" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/build/webservice.jar" />
    <property name="sun.io.unicode.encoding" value="UnicodeBig" />
    <property name="test.fork" value="true" />
    <property name="webservice.dir" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/src/com/google/javascript/jscomp/webservice" />
    <property name="awt.toolkit" value="sun.lwawt.macosx.LWCToolkit" />
    <property name="buildlib.dir" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/build/lib" />
    <property name="socksNonProxyHosts" value="local|*.local|169.254/16|*.169.254/16" />
    <property name="ftp.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16" />
    <property name="ant.build.javac.source" value="1.7" />
    <property name="refasterjs.dir" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/src/com/google/javascript/refactoring" />
    <property name="user.home" value="/Users/linmanna" />
    <property name="java.specification.vendor" value="Oracle Corporation" />
    <property name="test.dir" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/test" />
    <property name="java.library.path" value="/Users/linmanna/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:." />
    <property name="java.vendor.url" value="http://java.oracle.com/" />
    <property name="java.vm.vendor" value="Oracle Corporation" />
    <property name="gopherProxySet" value="false" />
    <property name="build.relVersion" value="00e3533" />
    <property name="java.runtime.name" value="Java(TM) SE Runtime Environment" />
    <property name="sun.java.command" value="org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner testsfile=/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/junittestcases4622356093930181862.properties skipNonTests=false filtertrace=true haltOnError=false haltOnFailure=false formatter=org.apache.tools.ant.taskdefs.optional.junit.SummaryJUnitResultFormatter showoutput=true outputtoformatters=true logfailedtests=true threadid=0 logtestlistenerevents=false formatter=org.apache.tools.ant.taskdefs.optional.junit.BriefJUnitResultFormatter formatter=org.apache.tools.ant.taskdefs.optional.junit.XMLJUnitResultFormatter,/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/build/testoutput/IGNORETHIS.xml crashfile=/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/junitvmwatcher882389895192408063.properties propsfile=/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/junit6374663990081372210.properties" />
    <property name="java.class.path" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/build/classes:/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/lib/ant-launcher.jar:/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/lib/ant.jar:/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/lib/args4j.jar:/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/lib/gson.jar:/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/lib/guava.jar:/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/lib/jsr305.jar:/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/lib/junit.jar:/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/lib/protobuf-java.jar:/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/lib/truth.jar:/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/build/test:/Users/linmanna/ant/lib/ant-launcher.jar:/Users/linmanna/ant/lib/ant.jar:/Users/linmanna/ant/lib/ant-junit.jar:/Users/linmanna/ant/lib/ant-junit4.jar" />
    <property name="ant.version" value="Apache Ant(TM) version 1.9.4 compiled on April 29 2014" />
    <property name="test.class" value="*Test" />
    <property name="java.vm.specification.name" value="Java Virtual Machine Specification" />
    <property name="ant.file.type" value="file" />
    <property name="java.vm.specification.version" value="1.7" />
    <property name="sun.cpu.endian" value="little" />
    <property name="sun.os.patch.level" value="unknown" />
    <property name="java.io.tmpdir" value="/var/folders/_p/3swdt4h96dn79vyt21dtny9h0000gn/T/" />
    <property name="java.vendor.url.bug" value="http://bugreport.sun.com/bugreport/" />
    <property name="java.awt.graphicsenv" value="sun.awt.CGraphicsEnvironment" />
    <property name="maven-repository-url" value="https://oss.sonatype.org/service/local/staging/deploy/maven2/" />
    <property name="os.arch" value="x86_64" />
    <property name="webservice-classes.dir" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/build/webservice-classes" />
    <property name="java.ext.dirs" value="/Users/linmanna/Library/Java/Extensions:/Library/Java/JavaVirtualMachines/jdk1.7.0_75.jdk/Contents/Home/jre/lib/ext:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java" />
    <property name="user.dir" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler" />
    <property name="ant.file.type.compiler" value="file" />
    <property name="line.separator" value="&#xa;" />
    <property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM" />
    <property name="refasterjs-classes.dir" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/build/refasterjs-classes" />
    <property name="basedir" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler" />
    <property name="ant.java.version" value="1.7" />
    <property name="ant.core.lib" value="/Users/linmanna/ant/lib/ant.jar" />
    <property name="file.encoding" value="UTF-8" />
    <property name="closure.build.dir" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/build" />
    <property name="compiler-jarfile" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/build/compiler.jar" />
    <property name="java.specification.version" value="1.7" />
    <property name="src.dir" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/src" />
    <property name="ant.project.invoked-targets" value="clean,compile,compile-tests,test" />
    <property name="javadoc.dir" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/build/javadoc" />
    <property name="tools.dir" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/tools" />
  </properties>
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testInlineFunctions1" time="0.003" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testInlineEmptyFunction1" time="0.003" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testInlineEmptyFunction2" time="0.003" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testInlineEmptyFunction3" time="0.003" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testInlineEmptyFunction4" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testInlineEmptyFunction5" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testInlineFunctions2" time="0.004" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testInlineFunctions3" time="0.004" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testInlineFunctions4" time="0.006" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testInlineFunctions5" time="0.004" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testInlineFunctions6" time="0.003" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testInlineFunctions7" time="0.003" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testInlineFunctions8" time="0.004" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testInlineFunctions9" time="0.002">
    <error message="INTERNAL COMPILER ERROR.&#xa;Please report this problem.&#xa;&#xa;The name x$$inline_1 is not consistently annotated as constant.&#xa;  Node(NAME x$$inline_1): testcode:1:23&#xa;function INC(x){return x++}var y=INC(i)&#xa;  Parent(INC): testcode:1:23&#xa;function INC(x){return x++}var y=INC(i)&#xa;" type="java.lang.RuntimeException">java.lang.RuntimeException: INTERNAL COMPILER ERROR.
Please report this problem.

The name x$$inline_1 is not consistently annotated as constant.
  Node(NAME x$$inline_1): testcode:1:23
function INC(x){return x++}var y=INC(i)
  Parent(INC): testcode:1:23
function INC(x){return x++}var y=INC(i)

	at com.google.common.base.Preconditions.checkState(Preconditions.java:197)
	at com.google.javascript.jscomp.Normalize$VerifyConstants.visit(Normalize.java:333)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:576)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseRoots(NodeTraversal.java:308)
	at com.google.javascript.jscomp.NodeTraversal.traverseRoots(NodeTraversal.java:538)
	at com.google.javascript.jscomp.Normalize$VerifyConstants.process(Normalize.java:284)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1063)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions9(InlineFunctionsTest.java:185)
Caused by: java.lang.IllegalStateException: The name x$$inline_1 is not consistently annotated as constant.
</error>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testInlineFunctions10" time="0.001">
    <error message="Unexpected." type="java.lang.IllegalStateException">java.lang.IllegalStateException: Unexpected.
	at com.google.javascript.jscomp.ExpressionDecomposer.extractConditional(ExpressionDecomposer.java:379)
	at com.google.javascript.jscomp.ExpressionDecomposer.exposeExpression(ExpressionDecomposer.java:236)
	at com.google.javascript.jscomp.ExpressionDecomposer.exposeExpression(ExpressionDecomposer.java:103)
	at com.google.javascript.jscomp.ExpressionDecomposer.maybeExposeExpression(ExpressionDecomposer.java:85)
	at com.google.javascript.jscomp.FunctionInjector$CallSiteType$6.prepare(FunctionInjector.java:389)
	at com.google.javascript.jscomp.FunctionInjector.maybePrepareCall(FunctionInjector.java:467)
	at com.google.javascript.jscomp.InlineFunctions.decomposeExpressions(InlineFunctions.java:825)
	at com.google.javascript.jscomp.InlineFunctions.process(InlineFunctions.java:142)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1044)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions10(InlineFunctionsTest.java:192)
</error>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testInlineFunctions11" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testInlineFunctions12" time="0.005" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testInlineFunctions13" time="0.001">
    <error message="INTERNAL COMPILER ERROR.&#xa;Please report this problem.&#xa;&#xa;The name x$$inline_1 is not consistently annotated as constant.&#xa;  Node(NAME x$$inline_1): testcode:1:21&#xa;function f(x){return x}var y=f(i++)&#xa;  Parent(ASSIGN): testcode:1:14&#xa;function f(x){return x}var y=f(i++)&#xa;" type="java.lang.RuntimeException">java.lang.RuntimeException: INTERNAL COMPILER ERROR.
Please report this problem.

The name x$$inline_1 is not consistently annotated as constant.
  Node(NAME x$$inline_1): testcode:1:21
function f(x){return x}var y=f(i++)
  Parent(ASSIGN): testcode:1:14
function f(x){return x}var y=f(i++)

	at com.google.common.base.Preconditions.checkState(Preconditions.java:197)
	at com.google.javascript.jscomp.Normalize$VerifyConstants.visit(Normalize.java:333)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:576)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseRoots(NodeTraversal.java:308)
	at com.google.javascript.jscomp.NodeTraversal.traverseRoots(NodeTraversal.java:538)
	at com.google.javascript.jscomp.Normalize$VerifyConstants.process(Normalize.java:284)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1063)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions13(InlineFunctionsTest.java:219)
Caused by: java.lang.IllegalStateException: The name x$$inline_1 is not consistently annotated as constant.
</error>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testInlineFunctions14" time="0.004" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testInlineFunctions15a" time="0.003" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testInlineFunctions15b" time="0.008">
    <error message="Unexpected." type="java.lang.IllegalStateException">java.lang.IllegalStateException: Unexpected.
	at com.google.javascript.jscomp.ExpressionDecomposer.extractConditional(ExpressionDecomposer.java:379)
	at com.google.javascript.jscomp.ExpressionDecomposer.exposeExpression(ExpressionDecomposer.java:236)
	at com.google.javascript.jscomp.ExpressionDecomposer.exposeExpression(ExpressionDecomposer.java:103)
	at com.google.javascript.jscomp.ExpressionDecomposer.maybeExposeExpression(ExpressionDecomposer.java:85)
	at com.google.javascript.jscomp.FunctionInjector$CallSiteType$6.prepare(FunctionInjector.java:389)
	at com.google.javascript.jscomp.FunctionInjector.maybePrepareCall(FunctionInjector.java:467)
	at com.google.javascript.jscomp.InlineFunctions.decomposeExpressions(InlineFunctions.java:825)
	at com.google.javascript.jscomp.InlineFunctions.process(InlineFunctions.java:142)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1044)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions15b(InlineFunctionsTest.java:255)
</error>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testInlineFunctions15c" time="0.01" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testInlineFunctions15d" time="0.006">
    <error message="Unexpected." type="java.lang.IllegalStateException">java.lang.IllegalStateException: Unexpected.
	at com.google.javascript.jscomp.ExpressionDecomposer.extractConditional(ExpressionDecomposer.java:379)
	at com.google.javascript.jscomp.ExpressionDecomposer.exposeExpression(ExpressionDecomposer.java:236)
	at com.google.javascript.jscomp.ExpressionDecomposer.exposeExpression(ExpressionDecomposer.java:103)
	at com.google.javascript.jscomp.ExpressionDecomposer.maybeExposeExpression(ExpressionDecomposer.java:85)
	at com.google.javascript.jscomp.FunctionInjector$CallSiteType$6.prepare(FunctionInjector.java:389)
	at com.google.javascript.jscomp.FunctionInjector.maybePrepareCall(FunctionInjector.java:467)
	at com.google.javascript.jscomp.InlineFunctions.decomposeExpressions(InlineFunctions.java:825)
	at com.google.javascript.jscomp.InlineFunctions.process(InlineFunctions.java:142)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1044)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions15d(InlineFunctionsTest.java:301)
</error>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testInlineFunctions16a" time="0.005">
    <error message="INTERNAL COMPILER ERROR.&#xa;Please report this problem.&#xa;&#xa;The name b$$inline_1 is not consistently annotated as constant.&#xa;  Node(NAME b$$inline_1): testcode:1:47&#xa;function foo(b){return window.bar(function(){c(b)})}var d=foo(e)&#xa;  Parent(CALL): testcode:1:45&#xa;function foo(b){return window.bar(function(){c(b)})}var d=foo(e)&#xa;" type="java.lang.RuntimeException">java.lang.RuntimeException: INTERNAL COMPILER ERROR.
Please report this problem.

The name b$$inline_1 is not consistently annotated as constant.
  Node(NAME b$$inline_1): testcode:1:47
function foo(b){return window.bar(function(){c(b)})}var d=foo(e)
  Parent(CALL): testcode:1:45
function foo(b){return window.bar(function(){c(b)})}var d=foo(e)

	at com.google.common.base.Preconditions.checkState(Preconditions.java:197)
	at com.google.javascript.jscomp.Normalize$VerifyConstants.visit(Normalize.java:333)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:576)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseFunction(NodeTraversal.java:610)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:562)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseRoots(NodeTraversal.java:308)
	at com.google.javascript.jscomp.NodeTraversal.traverseRoots(NodeTraversal.java:538)
	at com.google.javascript.jscomp.Normalize$VerifyConstants.process(Normalize.java:284)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1063)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions16a(InlineFunctionsTest.java:324)
Caused by: java.lang.IllegalStateException: The name b$$inline_1 is not consistently annotated as constant.
</error>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testInlineFunctions16b" time="0.003" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testInlineFunctions17" time="0.004" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testInlineFunctions18" time="0.003" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testInlineFunctions19" time="0.003" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testInlineFunctions20" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testInlineFunctions21" time="0.003" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testInlineFunctions22" time="0.006">
    <failure message="&#xa;Expected: var d;JSCompiler_inline_label_plex_1:{if(1+2){d=0;break JSCompiler_inline_label_plex_1}else{d=1;break JSCompiler_inline_label_plex_1}d=void 0}&#xa;Result:   var JSCompiler_inline_result$$0;JSCompiler_inline_label_plex_2:{if(1+2){JSCompiler_inline_result$$0=0;break JSCompiler_inline_label_plex_2}else{JSCompiler_inline_result$$0=1;break JSCompiler_inline_label_plex_2}JSCompiler_inline_result$$0=void 0}var d=JSCompiler_inline_result$$0&#xa;Node tree inequality:&#xa;Expected tree:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;        VAR 1 [source_file: expected0]&#xa;            NAME d 1 [is_constant_name: 1] [source_file: expected0]&#xa;        BLOCK 1 [source_file: expected0]&#xa;            LABEL 1 [source_file: expected0]&#xa;                LABEL_NAME JSCompiler_inline_label_plex_1 1 [source_file: expected0]&#xa;                BLOCK 1 [source_file: expected0]&#xa;                    IF 1 [source_file: expected0]&#xa;                        ADD 1 [source_file: expected0]&#xa;                            NUMBER 1.0 1 [source_file: expected0]&#xa;                            NUMBER 2.0 1 [source_file: expected0]&#xa;                        BLOCK 1 [source_file: expected0]&#xa;                            EXPR_RESULT 1 [source_file: expected0]&#xa;                                ASSIGN 1 [source_file: expected0]&#xa;                                    NAME d 1 [is_constant_name: 1] [source_file: expected0]&#xa;                                    NUMBER 0.0 1 [source_file: expected0]&#xa;                            BREAK 1 [source_file: expected0]&#xa;                                LABEL_NAME JSCompiler_inline_label_plex_1 1 [source_file: expected0]&#xa;                        BLOCK 1 [source_file: expected0]&#xa;                            EXPR_RESULT 1 [source_file: expected0]&#xa;                                ASSIGN 1 [source_file: expected0]&#xa;                                    NAME d 1 [is_constant_name: 1] [source_file: expected0]&#xa;                                    NUMBER 1.0 1 [source_file: expected0]&#xa;                            BREAK 1 [source_file: expected0]&#xa;                                LABEL_NAME JSCompiler_inline_label_plex_1 1 [source_file: expected0]&#xa;                    EXPR_RESULT 1 [source_file: expected0]&#xa;                        ASSIGN 1 [source_file: expected0]&#xa;                            NAME d 1 [is_constant_name: 1] [source_file: expected0]&#xa;                            VOID 1 [source_file: expected0]&#xa;                                NUMBER 0.0 1 [source_file: expected0]&#xa;&#xa;&#xa;Actual tree:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;        BLOCK 1 [source_file: testcode]&#xa;            LABEL 1 [source_file: testcode]&#xa;                LABEL_NAME JSCompiler_inline_label_plex_2 1 [source_file: testcode]&#xa;                BLOCK 1 [source_file: testcode]&#xa;                    IF 1 [source_file: testcode]&#xa;                        ADD 1 [source_file: testcode]&#xa;                            NUMBER 1.0 1 [source_file: testcode]&#xa;                            NUMBER 2.0 1 [source_file: testcode]&#xa;                        BLOCK 1 [added_block: 1] [source_file: testcode]&#xa;                            EXPR_RESULT 1 [source_file: testcode]&#xa;                                ASSIGN 1 [source_file: testcode]&#xa;                                    NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;                                    NUMBER 0.0 1 [source_file: testcode]&#xa;                            BREAK 1 [source_file: testcode]&#xa;                                LABEL_NAME JSCompiler_inline_label_plex_2 1 [source_file: testcode]&#xa;                        BLOCK 1 [added_block: 1] [source_file: testcode]&#xa;                            EXPR_RESULT 1 [source_file: testcode]&#xa;                                ASSIGN 1 [source_file: testcode]&#xa;                                    NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;                                    NUMBER 1.0 1 [source_file: testcode]&#xa;                            BREAK 1 [source_file: testcode]&#xa;                                LABEL_NAME JSCompiler_inline_label_plex_2 1 [source_file: testcode]&#xa;                    EXPR_RESULT 1 [source_file: testcode]&#xa;                        ASSIGN 1 [source_file: testcode]&#xa;                            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;                            VOID 1 [source_file: testcode]&#xa;                                NUMBER 0.0 1 [source_file: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME d 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]&#xa;                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;&#xa;&#xa;Expected subtree: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;    VAR 1 [source_file: expected0]&#xa;        NAME d 1 [is_constant_name: 1] [source_file: expected0]&#xa;    BLOCK 1 [source_file: expected0]&#xa;        LABEL 1 [source_file: expected0]&#xa;            LABEL_NAME JSCompiler_inline_label_plex_1 1 [source_file: expected0]&#xa;            BLOCK 1 [source_file: expected0]&#xa;                IF 1 [source_file: expected0]&#xa;                    ADD 1 [source_file: expected0]&#xa;                        NUMBER 1.0 1 [source_file: expected0]&#xa;                        NUMBER 2.0 1 [source_file: expected0]&#xa;                    BLOCK 1 [source_file: expected0]&#xa;                        EXPR_RESULT 1 [source_file: expected0]&#xa;                            ASSIGN 1 [source_file: expected0]&#xa;                                NAME d 1 [is_constant_name: 1] [source_file: expected0]&#xa;                                NUMBER 0.0 1 [source_file: expected0]&#xa;                        BREAK 1 [source_file: expected0]&#xa;                            LABEL_NAME JSCompiler_inline_label_plex_1 1 [source_file: expected0]&#xa;                    BLOCK 1 [source_file: expected0]&#xa;                        EXPR_RESULT 1 [source_file: expected0]&#xa;                            ASSIGN 1 [source_file: expected0]&#xa;                                NAME d 1 [is_constant_name: 1] [source_file: expected0]&#xa;                                NUMBER 1.0 1 [source_file: expected0]&#xa;                        BREAK 1 [source_file: expected0]&#xa;                            LABEL_NAME JSCompiler_inline_label_plex_1 1 [source_file: expected0]&#xa;                EXPR_RESULT 1 [source_file: expected0]&#xa;                    ASSIGN 1 [source_file: expected0]&#xa;                        NAME d 1 [is_constant_name: 1] [source_file: expected0]&#xa;                        VOID 1 [source_file: expected0]&#xa;                            NUMBER 0.0 1 [source_file: expected0]&#xa;&#xa;&#xa;Actual subtree: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;    BLOCK 1 [source_file: testcode]&#xa;        LABEL 1 [source_file: testcode]&#xa;            LABEL_NAME JSCompiler_inline_label_plex_2 1 [source_file: testcode]&#xa;            BLOCK 1 [source_file: testcode]&#xa;                IF 1 [source_file: testcode]&#xa;                    ADD 1 [source_file: testcode]&#xa;                        NUMBER 1.0 1 [source_file: testcode]&#xa;                        NUMBER 2.0 1 [source_file: testcode]&#xa;                    BLOCK 1 [added_block: 1] [source_file: testcode]&#xa;                        EXPR_RESULT 1 [source_file: testcode]&#xa;                            ASSIGN 1 [source_file: testcode]&#xa;                                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;                                NUMBER 0.0 1 [source_file: testcode]&#xa;                        BREAK 1 [source_file: testcode]&#xa;                            LABEL_NAME JSCompiler_inline_label_plex_2 1 [source_file: testcode]&#xa;                    BLOCK 1 [added_block: 1] [source_file: testcode]&#xa;                        EXPR_RESULT 1 [source_file: testcode]&#xa;                            ASSIGN 1 [source_file: testcode]&#xa;                                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;                                NUMBER 1.0 1 [source_file: testcode]&#xa;                        BREAK 1 [source_file: testcode]&#xa;                            LABEL_NAME JSCompiler_inline_label_plex_2 1 [source_file: testcode]&#xa;                EXPR_RESULT 1 [source_file: testcode]&#xa;                    ASSIGN 1 [source_file: testcode]&#xa;                        NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;                        VOID 1 [source_file: testcode]&#xa;                            NUMBER 0.0 1 [source_file: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME d 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]&#xa;            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: var d;JSCompiler_inline_label_plex_1:{if(1+2){d=0;break JSCompiler_inline_label_plex_1}else{d=1;break JSCompiler_inline_label_plex_1}d=void 0}
Result:   var JSCompiler_inline_result$$0;JSCompiler_inline_label_plex_2:{if(1+2){JSCompiler_inline_result$$0=0;break JSCompiler_inline_label_plex_2}else{JSCompiler_inline_result$$0=1;break JSCompiler_inline_label_plex_2}JSCompiler_inline_result$$0=void 0}var d=JSCompiler_inline_result$$0
Node tree inequality:
Expected tree:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        VAR 1 [source_file: expected0]
            NAME d 1 [is_constant_name: 1] [source_file: expected0]
        BLOCK 1 [source_file: expected0]
            LABEL 1 [source_file: expected0]
                LABEL_NAME JSCompiler_inline_label_plex_1 1 [source_file: expected0]
                BLOCK 1 [source_file: expected0]
                    IF 1 [source_file: expected0]
                        ADD 1 [source_file: expected0]
                            NUMBER 1.0 1 [source_file: expected0]
                            NUMBER 2.0 1 [source_file: expected0]
                        BLOCK 1 [source_file: expected0]
                            EXPR_RESULT 1 [source_file: expected0]
                                ASSIGN 1 [source_file: expected0]
                                    NAME d 1 [is_constant_name: 1] [source_file: expected0]
                                    NUMBER 0.0 1 [source_file: expected0]
                            BREAK 1 [source_file: expected0]
                                LABEL_NAME JSCompiler_inline_label_plex_1 1 [source_file: expected0]
                        BLOCK 1 [source_file: expected0]
                            EXPR_RESULT 1 [source_file: expected0]
                                ASSIGN 1 [source_file: expected0]
                                    NAME d 1 [is_constant_name: 1] [source_file: expected0]
                                    NUMBER 1.0 1 [source_file: expected0]
                            BREAK 1 [source_file: expected0]
                                LABEL_NAME JSCompiler_inline_label_plex_1 1 [source_file: expected0]
                    EXPR_RESULT 1 [source_file: expected0]
                        ASSIGN 1 [source_file: expected0]
                            NAME d 1 [is_constant_name: 1] [source_file: expected0]
                            VOID 1 [source_file: expected0]
                                NUMBER 0.0 1 [source_file: expected0]


Actual tree:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
        VAR 1 [source_file: testcode]
            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
        BLOCK 1 [source_file: testcode]
            LABEL 1 [source_file: testcode]
                LABEL_NAME JSCompiler_inline_label_plex_2 1 [source_file: testcode]
                BLOCK 1 [source_file: testcode]
                    IF 1 [source_file: testcode]
                        ADD 1 [source_file: testcode]
                            NUMBER 1.0 1 [source_file: testcode]
                            NUMBER 2.0 1 [source_file: testcode]
                        BLOCK 1 [added_block: 1] [source_file: testcode]
                            EXPR_RESULT 1 [source_file: testcode]
                                ASSIGN 1 [source_file: testcode]
                                    NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
                                    NUMBER 0.0 1 [source_file: testcode]
                            BREAK 1 [source_file: testcode]
                                LABEL_NAME JSCompiler_inline_label_plex_2 1 [source_file: testcode]
                        BLOCK 1 [added_block: 1] [source_file: testcode]
                            EXPR_RESULT 1 [source_file: testcode]
                                ASSIGN 1 [source_file: testcode]
                                    NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
                                    NUMBER 1.0 1 [source_file: testcode]
                            BREAK 1 [source_file: testcode]
                                LABEL_NAME JSCompiler_inline_label_plex_2 1 [source_file: testcode]
                    EXPR_RESULT 1 [source_file: testcode]
                        ASSIGN 1 [source_file: testcode]
                            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
                            VOID 1 [source_file: testcode]
                                NUMBER 0.0 1 [source_file: testcode]
        VAR 1 [source_file: testcode]
            NAME d 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]
                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]


Expected subtree: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
    VAR 1 [source_file: expected0]
        NAME d 1 [is_constant_name: 1] [source_file: expected0]
    BLOCK 1 [source_file: expected0]
        LABEL 1 [source_file: expected0]
            LABEL_NAME JSCompiler_inline_label_plex_1 1 [source_file: expected0]
            BLOCK 1 [source_file: expected0]
                IF 1 [source_file: expected0]
                    ADD 1 [source_file: expected0]
                        NUMBER 1.0 1 [source_file: expected0]
                        NUMBER 2.0 1 [source_file: expected0]
                    BLOCK 1 [source_file: expected0]
                        EXPR_RESULT 1 [source_file: expected0]
                            ASSIGN 1 [source_file: expected0]
                                NAME d 1 [is_constant_name: 1] [source_file: expected0]
                                NUMBER 0.0 1 [source_file: expected0]
                        BREAK 1 [source_file: expected0]
                            LABEL_NAME JSCompiler_inline_label_plex_1 1 [source_file: expected0]
                    BLOCK 1 [source_file: expected0]
                        EXPR_RESULT 1 [source_file: expected0]
                            ASSIGN 1 [source_file: expected0]
                                NAME d 1 [is_constant_name: 1] [source_file: expected0]
                                NUMBER 1.0 1 [source_file: expected0]
                        BREAK 1 [source_file: expected0]
                            LABEL_NAME JSCompiler_inline_label_plex_1 1 [source_file: expected0]
                EXPR_RESULT 1 [source_file: expected0]
                    ASSIGN 1 [source_file: expected0]
                        NAME d 1 [is_constant_name: 1] [source_file: expected0]
                        VOID 1 [source_file: expected0]
                            NUMBER 0.0 1 [source_file: expected0]


Actual subtree: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
    VAR 1 [source_file: testcode]
        NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
    BLOCK 1 [source_file: testcode]
        LABEL 1 [source_file: testcode]
            LABEL_NAME JSCompiler_inline_label_plex_2 1 [source_file: testcode]
            BLOCK 1 [source_file: testcode]
                IF 1 [source_file: testcode]
                    ADD 1 [source_file: testcode]
                        NUMBER 1.0 1 [source_file: testcode]
                        NUMBER 2.0 1 [source_file: testcode]
                    BLOCK 1 [added_block: 1] [source_file: testcode]
                        EXPR_RESULT 1 [source_file: testcode]
                            ASSIGN 1 [source_file: testcode]
                                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
                                NUMBER 0.0 1 [source_file: testcode]
                        BREAK 1 [source_file: testcode]
                            LABEL_NAME JSCompiler_inline_label_plex_2 1 [source_file: testcode]
                    BLOCK 1 [added_block: 1] [source_file: testcode]
                        EXPR_RESULT 1 [source_file: testcode]
                            ASSIGN 1 [source_file: testcode]
                                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
                                NUMBER 1.0 1 [source_file: testcode]
                        BREAK 1 [source_file: testcode]
                            LABEL_NAME JSCompiler_inline_label_plex_2 1 [source_file: testcode]
                EXPR_RESULT 1 [source_file: testcode]
                    ASSIGN 1 [source_file: testcode]
                        NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
                        VOID 1 [source_file: testcode]
                            NUMBER 0.0 1 [source_file: testcode]
    VAR 1 [source_file: testcode]
        NAME d 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]
            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions22(InlineFunctionsTest.java:379)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testInlineFunctions23" time="0.007">
    <failure message="&#xa;Expected: var d;JSCompiler_inline_label_complex_1:{if(1+2){d=0;break JSCompiler_inline_label_complex_1}else{d=1;break JSCompiler_inline_label_complex_1}d=void 0}&#xa;Result:   var JSCompiler_inline_result$$0;JSCompiler_inline_label_complex_2:{if(1+2){JSCompiler_inline_result$$0=0;break JSCompiler_inline_label_complex_2}else{JSCompiler_inline_result$$0=1;break JSCompiler_inline_label_complex_2}JSCompiler_inline_result$$0=void 0}var d=JSCompiler_inline_result$$0&#xa;Node tree inequality:&#xa;Expected tree:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;        VAR 1 [source_file: expected0]&#xa;            NAME d 1 [is_constant_name: 1] [source_file: expected0]&#xa;        BLOCK 1 [source_file: expected0]&#xa;            LABEL 1 [source_file: expected0]&#xa;                LABEL_NAME JSCompiler_inline_label_complex_1 1 [source_file: expected0]&#xa;                BLOCK 1 [source_file: expected0]&#xa;                    IF 1 [source_file: expected0]&#xa;                        ADD 1 [source_file: expected0]&#xa;                            NUMBER 1.0 1 [source_file: expected0]&#xa;                            NUMBER 2.0 1 [source_file: expected0]&#xa;                        BLOCK 1 [source_file: expected0]&#xa;                            EXPR_RESULT 1 [source_file: expected0]&#xa;                                ASSIGN 1 [source_file: expected0]&#xa;                                    NAME d 1 [is_constant_name: 1] [source_file: expected0]&#xa;                                    NUMBER 0.0 1 [source_file: expected0]&#xa;                            BREAK 1 [source_file: expected0]&#xa;                                LABEL_NAME JSCompiler_inline_label_complex_1 1 [source_file: expected0]&#xa;                        BLOCK 1 [source_file: expected0]&#xa;                            EXPR_RESULT 1 [source_file: expected0]&#xa;                                ASSIGN 1 [source_file: expected0]&#xa;                                    NAME d 1 [is_constant_name: 1] [source_file: expected0]&#xa;                                    NUMBER 1.0 1 [source_file: expected0]&#xa;                            BREAK 1 [source_file: expected0]&#xa;                                LABEL_NAME JSCompiler_inline_label_complex_1 1 [source_file: expected0]&#xa;                    EXPR_RESULT 1 [source_file: expected0]&#xa;                        ASSIGN 1 [source_file: expected0]&#xa;                            NAME d 1 [is_constant_name: 1] [source_file: expected0]&#xa;                            VOID 1 [source_file: expected0]&#xa;                                NUMBER 0.0 1 [source_file: expected0]&#xa;&#xa;&#xa;Actual tree:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;        BLOCK 1 [source_file: testcode]&#xa;            LABEL 1 [source_file: testcode]&#xa;                LABEL_NAME JSCompiler_inline_label_complex_2 1 [source_file: testcode]&#xa;                BLOCK 1 [source_file: testcode]&#xa;                    IF 1 [source_file: testcode]&#xa;                        ADD 1 [source_file: testcode]&#xa;                            NUMBER 1.0 1 [source_file: testcode]&#xa;                            NUMBER 2.0 1 [source_file: testcode]&#xa;                        BLOCK 1 [added_block: 1] [source_file: testcode]&#xa;                            EXPR_RESULT 1 [source_file: testcode]&#xa;                                ASSIGN 1 [source_file: testcode]&#xa;                                    NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;                                    NUMBER 0.0 1 [source_file: testcode]&#xa;                            BREAK 1 [source_file: testcode]&#xa;                                LABEL_NAME JSCompiler_inline_label_complex_2 1 [source_file: testcode]&#xa;                        BLOCK 1 [added_block: 1] [source_file: testcode]&#xa;                            EXPR_RESULT 1 [source_file: testcode]&#xa;                                ASSIGN 1 [source_file: testcode]&#xa;                                    NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;                                    NUMBER 1.0 1 [source_file: testcode]&#xa;                            BREAK 1 [source_file: testcode]&#xa;                                LABEL_NAME JSCompiler_inline_label_complex_2 1 [source_file: testcode]&#xa;                    EXPR_RESULT 1 [source_file: testcode]&#xa;                        ASSIGN 1 [source_file: testcode]&#xa;                            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;                            VOID 1 [source_file: testcode]&#xa;                                NUMBER 0.0 1 [source_file: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME d 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]&#xa;                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;&#xa;&#xa;Expected subtree: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;    VAR 1 [source_file: expected0]&#xa;        NAME d 1 [is_constant_name: 1] [source_file: expected0]&#xa;    BLOCK 1 [source_file: expected0]&#xa;        LABEL 1 [source_file: expected0]&#xa;            LABEL_NAME JSCompiler_inline_label_complex_1 1 [source_file: expected0]&#xa;            BLOCK 1 [source_file: expected0]&#xa;                IF 1 [source_file: expected0]&#xa;                    ADD 1 [source_file: expected0]&#xa;                        NUMBER 1.0 1 [source_file: expected0]&#xa;                        NUMBER 2.0 1 [source_file: expected0]&#xa;                    BLOCK 1 [source_file: expected0]&#xa;                        EXPR_RESULT 1 [source_file: expected0]&#xa;                            ASSIGN 1 [source_file: expected0]&#xa;                                NAME d 1 [is_constant_name: 1] [source_file: expected0]&#xa;                                NUMBER 0.0 1 [source_file: expected0]&#xa;                        BREAK 1 [source_file: expected0]&#xa;                            LABEL_NAME JSCompiler_inline_label_complex_1 1 [source_file: expected0]&#xa;                    BLOCK 1 [source_file: expected0]&#xa;                        EXPR_RESULT 1 [source_file: expected0]&#xa;                            ASSIGN 1 [source_file: expected0]&#xa;                                NAME d 1 [is_constant_name: 1] [source_file: expected0]&#xa;                                NUMBER 1.0 1 [source_file: expected0]&#xa;                        BREAK 1 [source_file: expected0]&#xa;                            LABEL_NAME JSCompiler_inline_label_complex_1 1 [source_file: expected0]&#xa;                EXPR_RESULT 1 [source_file: expected0]&#xa;                    ASSIGN 1 [source_file: expected0]&#xa;                        NAME d 1 [is_constant_name: 1] [source_file: expected0]&#xa;                        VOID 1 [source_file: expected0]&#xa;                            NUMBER 0.0 1 [source_file: expected0]&#xa;&#xa;&#xa;Actual subtree: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;    BLOCK 1 [source_file: testcode]&#xa;        LABEL 1 [source_file: testcode]&#xa;            LABEL_NAME JSCompiler_inline_label_complex_2 1 [source_file: testcode]&#xa;            BLOCK 1 [source_file: testcode]&#xa;                IF 1 [source_file: testcode]&#xa;                    ADD 1 [source_file: testcode]&#xa;                        NUMBER 1.0 1 [source_file: testcode]&#xa;                        NUMBER 2.0 1 [source_file: testcode]&#xa;                    BLOCK 1 [added_block: 1] [source_file: testcode]&#xa;                        EXPR_RESULT 1 [source_file: testcode]&#xa;                            ASSIGN 1 [source_file: testcode]&#xa;                                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;                                NUMBER 0.0 1 [source_file: testcode]&#xa;                        BREAK 1 [source_file: testcode]&#xa;                            LABEL_NAME JSCompiler_inline_label_complex_2 1 [source_file: testcode]&#xa;                    BLOCK 1 [added_block: 1] [source_file: testcode]&#xa;                        EXPR_RESULT 1 [source_file: testcode]&#xa;                            ASSIGN 1 [source_file: testcode]&#xa;                                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;                                NUMBER 1.0 1 [source_file: testcode]&#xa;                        BREAK 1 [source_file: testcode]&#xa;                            LABEL_NAME JSCompiler_inline_label_complex_2 1 [source_file: testcode]&#xa;                EXPR_RESULT 1 [source_file: testcode]&#xa;                    ASSIGN 1 [source_file: testcode]&#xa;                        NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;                        VOID 1 [source_file: testcode]&#xa;                            NUMBER 0.0 1 [source_file: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME d 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]&#xa;            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: var d;JSCompiler_inline_label_complex_1:{if(1+2){d=0;break JSCompiler_inline_label_complex_1}else{d=1;break JSCompiler_inline_label_complex_1}d=void 0}
Result:   var JSCompiler_inline_result$$0;JSCompiler_inline_label_complex_2:{if(1+2){JSCompiler_inline_result$$0=0;break JSCompiler_inline_label_complex_2}else{JSCompiler_inline_result$$0=1;break JSCompiler_inline_label_complex_2}JSCompiler_inline_result$$0=void 0}var d=JSCompiler_inline_result$$0
Node tree inequality:
Expected tree:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        VAR 1 [source_file: expected0]
            NAME d 1 [is_constant_name: 1] [source_file: expected0]
        BLOCK 1 [source_file: expected0]
            LABEL 1 [source_file: expected0]
                LABEL_NAME JSCompiler_inline_label_complex_1 1 [source_file: expected0]
                BLOCK 1 [source_file: expected0]
                    IF 1 [source_file: expected0]
                        ADD 1 [source_file: expected0]
                            NUMBER 1.0 1 [source_file: expected0]
                            NUMBER 2.0 1 [source_file: expected0]
                        BLOCK 1 [source_file: expected0]
                            EXPR_RESULT 1 [source_file: expected0]
                                ASSIGN 1 [source_file: expected0]
                                    NAME d 1 [is_constant_name: 1] [source_file: expected0]
                                    NUMBER 0.0 1 [source_file: expected0]
                            BREAK 1 [source_file: expected0]
                                LABEL_NAME JSCompiler_inline_label_complex_1 1 [source_file: expected0]
                        BLOCK 1 [source_file: expected0]
                            EXPR_RESULT 1 [source_file: expected0]
                                ASSIGN 1 [source_file: expected0]
                                    NAME d 1 [is_constant_name: 1] [source_file: expected0]
                                    NUMBER 1.0 1 [source_file: expected0]
                            BREAK 1 [source_file: expected0]
                                LABEL_NAME JSCompiler_inline_label_complex_1 1 [source_file: expected0]
                    EXPR_RESULT 1 [source_file: expected0]
                        ASSIGN 1 [source_file: expected0]
                            NAME d 1 [is_constant_name: 1] [source_file: expected0]
                            VOID 1 [source_file: expected0]
                                NUMBER 0.0 1 [source_file: expected0]


Actual tree:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
        VAR 1 [source_file: testcode]
            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
        BLOCK 1 [source_file: testcode]
            LABEL 1 [source_file: testcode]
                LABEL_NAME JSCompiler_inline_label_complex_2 1 [source_file: testcode]
                BLOCK 1 [source_file: testcode]
                    IF 1 [source_file: testcode]
                        ADD 1 [source_file: testcode]
                            NUMBER 1.0 1 [source_file: testcode]
                            NUMBER 2.0 1 [source_file: testcode]
                        BLOCK 1 [added_block: 1] [source_file: testcode]
                            EXPR_RESULT 1 [source_file: testcode]
                                ASSIGN 1 [source_file: testcode]
                                    NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
                                    NUMBER 0.0 1 [source_file: testcode]
                            BREAK 1 [source_file: testcode]
                                LABEL_NAME JSCompiler_inline_label_complex_2 1 [source_file: testcode]
                        BLOCK 1 [added_block: 1] [source_file: testcode]
                            EXPR_RESULT 1 [source_file: testcode]
                                ASSIGN 1 [source_file: testcode]
                                    NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
                                    NUMBER 1.0 1 [source_file: testcode]
                            BREAK 1 [source_file: testcode]
                                LABEL_NAME JSCompiler_inline_label_complex_2 1 [source_file: testcode]
                    EXPR_RESULT 1 [source_file: testcode]
                        ASSIGN 1 [source_file: testcode]
                            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
                            VOID 1 [source_file: testcode]
                                NUMBER 0.0 1 [source_file: testcode]
        VAR 1 [source_file: testcode]
            NAME d 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]
                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]


Expected subtree: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
    VAR 1 [source_file: expected0]
        NAME d 1 [is_constant_name: 1] [source_file: expected0]
    BLOCK 1 [source_file: expected0]
        LABEL 1 [source_file: expected0]
            LABEL_NAME JSCompiler_inline_label_complex_1 1 [source_file: expected0]
            BLOCK 1 [source_file: expected0]
                IF 1 [source_file: expected0]
                    ADD 1 [source_file: expected0]
                        NUMBER 1.0 1 [source_file: expected0]
                        NUMBER 2.0 1 [source_file: expected0]
                    BLOCK 1 [source_file: expected0]
                        EXPR_RESULT 1 [source_file: expected0]
                            ASSIGN 1 [source_file: expected0]
                                NAME d 1 [is_constant_name: 1] [source_file: expected0]
                                NUMBER 0.0 1 [source_file: expected0]
                        BREAK 1 [source_file: expected0]
                            LABEL_NAME JSCompiler_inline_label_complex_1 1 [source_file: expected0]
                    BLOCK 1 [source_file: expected0]
                        EXPR_RESULT 1 [source_file: expected0]
                            ASSIGN 1 [source_file: expected0]
                                NAME d 1 [is_constant_name: 1] [source_file: expected0]
                                NUMBER 1.0 1 [source_file: expected0]
                        BREAK 1 [source_file: expected0]
                            LABEL_NAME JSCompiler_inline_label_complex_1 1 [source_file: expected0]
                EXPR_RESULT 1 [source_file: expected0]
                    ASSIGN 1 [source_file: expected0]
                        NAME d 1 [is_constant_name: 1] [source_file: expected0]
                        VOID 1 [source_file: expected0]
                            NUMBER 0.0 1 [source_file: expected0]


Actual subtree: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
    VAR 1 [source_file: testcode]
        NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
    BLOCK 1 [source_file: testcode]
        LABEL 1 [source_file: testcode]
            LABEL_NAME JSCompiler_inline_label_complex_2 1 [source_file: testcode]
            BLOCK 1 [source_file: testcode]
                IF 1 [source_file: testcode]
                    ADD 1 [source_file: testcode]
                        NUMBER 1.0 1 [source_file: testcode]
                        NUMBER 2.0 1 [source_file: testcode]
                    BLOCK 1 [added_block: 1] [source_file: testcode]
                        EXPR_RESULT 1 [source_file: testcode]
                            ASSIGN 1 [source_file: testcode]
                                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
                                NUMBER 0.0 1 [source_file: testcode]
                        BREAK 1 [source_file: testcode]
                            LABEL_NAME JSCompiler_inline_label_complex_2 1 [source_file: testcode]
                    BLOCK 1 [added_block: 1] [source_file: testcode]
                        EXPR_RESULT 1 [source_file: testcode]
                            ASSIGN 1 [source_file: testcode]
                                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
                                NUMBER 1.0 1 [source_file: testcode]
                        BREAK 1 [source_file: testcode]
                            LABEL_NAME JSCompiler_inline_label_complex_2 1 [source_file: testcode]
                EXPR_RESULT 1 [source_file: testcode]
                    ASSIGN 1 [source_file: testcode]
                        NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
                        VOID 1 [source_file: testcode]
                            NUMBER 0.0 1 [source_file: testcode]
    VAR 1 [source_file: testcode]
        NAME d 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]
            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions23(InlineFunctionsTest.java:393)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testInlineFunctions24" time="0.003" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testInlineFunctions25" time="0.004" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testInlineFunctions26" time="0.004" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testInlineFunctions27" time="0.002">
    <error message="Unexpected." type="java.lang.IllegalStateException">java.lang.IllegalStateException: Unexpected.
	at com.google.javascript.jscomp.ExpressionDecomposer.extractConditional(ExpressionDecomposer.java:379)
	at com.google.javascript.jscomp.ExpressionDecomposer.exposeExpression(ExpressionDecomposer.java:236)
	at com.google.javascript.jscomp.ExpressionDecomposer.exposeExpression(ExpressionDecomposer.java:103)
	at com.google.javascript.jscomp.ExpressionDecomposer.maybeExposeExpression(ExpressionDecomposer.java:85)
	at com.google.javascript.jscomp.FunctionInjector$CallSiteType$6.prepare(FunctionInjector.java:389)
	at com.google.javascript.jscomp.FunctionInjector.maybePrepareCall(FunctionInjector.java:467)
	at com.google.javascript.jscomp.InlineFunctions.decomposeExpressions(InlineFunctions.java:825)
	at com.google.javascript.jscomp.InlineFunctions.process(InlineFunctions.java:142)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1044)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions27(InlineFunctionsTest.java:421)
</error>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testInlineFunctions28" time="0.002">
    <error message="Unexpected." type="java.lang.IllegalStateException">java.lang.IllegalStateException: Unexpected.
	at com.google.javascript.jscomp.ExpressionDecomposer.extractConditional(ExpressionDecomposer.java:379)
	at com.google.javascript.jscomp.ExpressionDecomposer.exposeExpression(ExpressionDecomposer.java:236)
	at com.google.javascript.jscomp.ExpressionDecomposer.exposeExpression(ExpressionDecomposer.java:103)
	at com.google.javascript.jscomp.ExpressionDecomposer.maybeExposeExpression(ExpressionDecomposer.java:85)
	at com.google.javascript.jscomp.FunctionInjector$CallSiteType$6.prepare(FunctionInjector.java:389)
	at com.google.javascript.jscomp.FunctionInjector.maybePrepareCall(FunctionInjector.java:467)
	at com.google.javascript.jscomp.InlineFunctions.decomposeExpressions(InlineFunctions.java:825)
	at com.google.javascript.jscomp.InlineFunctions.process(InlineFunctions.java:142)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1044)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions28(InlineFunctionsTest.java:433)
</error>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testInlineFunctions29" time="0.003">
    <error message="Unexpected." type="java.lang.IllegalStateException">java.lang.IllegalStateException: Unexpected.
	at com.google.javascript.jscomp.ExpressionDecomposer.extractConditional(ExpressionDecomposer.java:379)
	at com.google.javascript.jscomp.ExpressionDecomposer.exposeExpression(ExpressionDecomposer.java:236)
	at com.google.javascript.jscomp.ExpressionDecomposer.exposeExpression(ExpressionDecomposer.java:103)
	at com.google.javascript.jscomp.ExpressionDecomposer.maybeExposeExpression(ExpressionDecomposer.java:85)
	at com.google.javascript.jscomp.FunctionInjector$CallSiteType$6.prepare(FunctionInjector.java:389)
	at com.google.javascript.jscomp.FunctionInjector.maybePrepareCall(FunctionInjector.java:467)
	at com.google.javascript.jscomp.InlineFunctions.decomposeExpressions(InlineFunctions.java:825)
	at com.google.javascript.jscomp.InlineFunctions.process(InlineFunctions.java:142)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1044)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions29(InlineFunctionsTest.java:448)
</error>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testInlineFunctions30" time="0.005" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testInlineFunctions31" time="0.005" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testMixedModeInlining1" time="0.003" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testMixedModeInlining2" time="0.004" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testMixedModeInlining3" time="0.005" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testMixedModeInlining4" time="0.005" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testMixedModeInliningCosting1" time="0.006" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testMixedModeInliningCosting2" time="0.006" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testMixedModeInliningCosting3" time="0.005" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testMixedModeInliningCosting4" time="0.007" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testNoInlineIfParametersModified1" time="0.002">
    <error message="INTERNAL COMPILER ERROR.&#xa;Please report this problem.&#xa;&#xa;The name x$$inline_0 is not consistently annotated as constant.&#xa;  Node(NAME x$$inline_0): testcode:1:21&#xa;function f(x){return x=1}f(undefined)&#xa;  Parent(ASSIGN): testcode:1:21&#xa;function f(x){return x=1}f(undefined)&#xa;" type="java.lang.RuntimeException">java.lang.RuntimeException: INTERNAL COMPILER ERROR.
Please report this problem.

The name x$$inline_0 is not consistently annotated as constant.
  Node(NAME x$$inline_0): testcode:1:21
function f(x){return x=1}f(undefined)
  Parent(ASSIGN): testcode:1:21
function f(x){return x=1}f(undefined)

	at com.google.common.base.Preconditions.checkState(Preconditions.java:197)
	at com.google.javascript.jscomp.Normalize$VerifyConstants.visit(Normalize.java:333)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:576)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseRoots(NodeTraversal.java:308)
	at com.google.javascript.jscomp.NodeTraversal.traverseRoots(NodeTraversal.java:538)
	at com.google.javascript.jscomp.Normalize$VerifyConstants.process(Normalize.java:284)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1063)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineFunctionsTest.testNoInlineIfParametersModified1(InlineFunctionsTest.java:553)
Caused by: java.lang.IllegalStateException: The name x$$inline_0 is not consistently annotated as constant.
</error>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testNoInlineIfParametersModified2" time="0.003">
    <error message="INTERNAL COMPILER ERROR.&#xa;Please report this problem.&#xa;&#xa;The name x$$inline_0 is not consistently annotated as constant.&#xa;  Node(NAME x$$inline_0): testcode:1:22&#xa;function f(x){return (x)=1;}f(2)&#xa;  Parent(ASSIGN): testcode:1:21&#xa;function f(x){return (x)=1;}f(2)&#xa;" type="java.lang.RuntimeException">java.lang.RuntimeException: INTERNAL COMPILER ERROR.
Please report this problem.

The name x$$inline_0 is not consistently annotated as constant.
  Node(NAME x$$inline_0): testcode:1:22
function f(x){return (x)=1;}f(2)
  Parent(ASSIGN): testcode:1:21
function f(x){return (x)=1;}f(2)

	at com.google.common.base.Preconditions.checkState(Preconditions.java:197)
	at com.google.javascript.jscomp.Normalize$VerifyConstants.visit(Normalize.java:333)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:576)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseRoots(NodeTraversal.java:308)
	at com.google.javascript.jscomp.NodeTraversal.traverseRoots(NodeTraversal.java:538)
	at com.google.javascript.jscomp.Normalize$VerifyConstants.process(Normalize.java:284)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1063)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineFunctionsTest.testNoInlineIfParametersModified2(InlineFunctionsTest.java:559)
Caused by: java.lang.IllegalStateException: The name x$$inline_0 is not consistently annotated as constant.
</error>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testNoInlineIfParametersModified3" time="0.001">
    <error message="INTERNAL COMPILER ERROR.&#xa;Please report this problem.&#xa;&#xa;The name x$$inline_0 is not consistently annotated as constant.&#xa;  Node(NAME x$$inline_0): testcode:1:21&#xa;function f(x){return x*=2}f(2)&#xa;  Parent(ASSIGN_MUL): testcode:1:21&#xa;function f(x){return x*=2}f(2)&#xa;" type="java.lang.RuntimeException">java.lang.RuntimeException: INTERNAL COMPILER ERROR.
Please report this problem.

The name x$$inline_0 is not consistently annotated as constant.
  Node(NAME x$$inline_0): testcode:1:21
function f(x){return x*=2}f(2)
  Parent(ASSIGN_MUL): testcode:1:21
function f(x){return x*=2}f(2)

	at com.google.common.base.Preconditions.checkState(Preconditions.java:197)
	at com.google.javascript.jscomp.Normalize$VerifyConstants.visit(Normalize.java:333)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:576)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseRoots(NodeTraversal.java:308)
	at com.google.javascript.jscomp.NodeTraversal.traverseRoots(NodeTraversal.java:538)
	at com.google.javascript.jscomp.Normalize$VerifyConstants.process(Normalize.java:284)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1063)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineFunctionsTest.testNoInlineIfParametersModified3(InlineFunctionsTest.java:566)
Caused by: java.lang.IllegalStateException: The name x$$inline_0 is not consistently annotated as constant.
</error>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testNoInlineIfParametersModified4" time="0.001">
    <error message="INTERNAL COMPILER ERROR.&#xa;Please report this problem.&#xa;&#xa;The name x$$inline_0 is not consistently annotated as constant.&#xa;  Node(NAME x$$inline_0): testcode:1:21&#xa;function f(x){return x?(x=2):0}f(2)&#xa;  Parent(HOOK): testcode:1:21&#xa;function f(x){return x?(x=2):0}f(2)&#xa;" type="java.lang.RuntimeException">java.lang.RuntimeException: INTERNAL COMPILER ERROR.
Please report this problem.

The name x$$inline_0 is not consistently annotated as constant.
  Node(NAME x$$inline_0): testcode:1:21
function f(x){return x?(x=2):0}f(2)
  Parent(HOOK): testcode:1:21
function f(x){return x?(x=2):0}f(2)

	at com.google.common.base.Preconditions.checkState(Preconditions.java:197)
	at com.google.javascript.jscomp.Normalize$VerifyConstants.visit(Normalize.java:333)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:576)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseRoots(NodeTraversal.java:308)
	at com.google.javascript.jscomp.NodeTraversal.traverseRoots(NodeTraversal.java:538)
	at com.google.javascript.jscomp.Normalize$VerifyConstants.process(Normalize.java:284)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1063)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineFunctionsTest.testNoInlineIfParametersModified4(InlineFunctionsTest.java:573)
Caused by: java.lang.IllegalStateException: The name x$$inline_0 is not consistently annotated as constant.
</error>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testNoInlineIfParametersModified5" time="0.002">
    <error message="INTERNAL COMPILER ERROR.&#xa;Please report this problem.&#xa;&#xa;The name y$$inline_1 is not consistently annotated as constant.&#xa;  Node(NAME y$$inline_1): testcode:1:26&#xa;function f(x,y){return x?(y=2):0}f(2,undefined)&#xa;  Parent(ASSIGN): testcode:1:26&#xa;function f(x,y){return x?(y=2):0}f(2,undefined)&#xa;" type="java.lang.RuntimeException">java.lang.RuntimeException: INTERNAL COMPILER ERROR.
Please report this problem.

The name y$$inline_1 is not consistently annotated as constant.
  Node(NAME y$$inline_1): testcode:1:26
function f(x,y){return x?(y=2):0}f(2,undefined)
  Parent(ASSIGN): testcode:1:26
function f(x,y){return x?(y=2):0}f(2,undefined)

	at com.google.common.base.Preconditions.checkState(Preconditions.java:197)
	at com.google.javascript.jscomp.Normalize$VerifyConstants.visit(Normalize.java:333)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:576)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseRoots(NodeTraversal.java:308)
	at com.google.javascript.jscomp.NodeTraversal.traverseRoots(NodeTraversal.java:538)
	at com.google.javascript.jscomp.Normalize$VerifyConstants.process(Normalize.java:284)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1063)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineFunctionsTest.testNoInlineIfParametersModified5(InlineFunctionsTest.java:581)
Caused by: java.lang.IllegalStateException: The name y$$inline_1 is not consistently annotated as constant.
</error>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testNoInlineIfParametersModified6" time="0.002">
    <error message="INTERNAL COMPILER ERROR.&#xa;Please report this problem.&#xa;&#xa;The name y$$inline_1 is not consistently annotated as constant.&#xa;  Node(NAME y$$inline_1): testcode:1:26&#xa;function f(x,y){return x?(y=2):0}f(2)&#xa;  Parent(ASSIGN): testcode:1:26&#xa;function f(x,y){return x?(y=2):0}f(2)&#xa;" type="java.lang.RuntimeException">java.lang.RuntimeException: INTERNAL COMPILER ERROR.
Please report this problem.

The name y$$inline_1 is not consistently annotated as constant.
  Node(NAME y$$inline_1): testcode:1:26
function f(x,y){return x?(y=2):0}f(2)
  Parent(ASSIGN): testcode:1:26
function f(x,y){return x?(y=2):0}f(2)

	at com.google.common.base.Preconditions.checkState(Preconditions.java:197)
	at com.google.javascript.jscomp.Normalize$VerifyConstants.visit(Normalize.java:333)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:576)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseRoots(NodeTraversal.java:308)
	at com.google.javascript.jscomp.NodeTraversal.traverseRoots(NodeTraversal.java:538)
	at com.google.javascript.jscomp.Normalize$VerifyConstants.process(Normalize.java:284)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1063)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineFunctionsTest.testNoInlineIfParametersModified6(InlineFunctionsTest.java:587)
Caused by: java.lang.IllegalStateException: The name y$$inline_1 is not consistently annotated as constant.
</error>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testNoInlineIfParametersModified7" time="0.002">
    <error message="INTERNAL COMPILER ERROR.&#xa;Please report this problem.&#xa;&#xa;The name a$$inline_0 is not consistently annotated as constant.&#xa;  Node(NAME a$$inline_0): testcode:1:22&#xa;function f(a){return++a&lt;++a}f(1)&#xa;  Parent(INC): testcode:1:20&#xa;function f(a){return++a&lt;++a}f(1)&#xa;" type="java.lang.RuntimeException">java.lang.RuntimeException: INTERNAL COMPILER ERROR.
Please report this problem.

The name a$$inline_0 is not consistently annotated as constant.
  Node(NAME a$$inline_0): testcode:1:22
function f(a){return++a&lt;++a}f(1)
  Parent(INC): testcode:1:20
function f(a){return++a&lt;++a}f(1)

	at com.google.common.base.Preconditions.checkState(Preconditions.java:197)
	at com.google.javascript.jscomp.Normalize$VerifyConstants.visit(Normalize.java:333)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:576)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseRoots(NodeTraversal.java:308)
	at com.google.javascript.jscomp.NodeTraversal.traverseRoots(NodeTraversal.java:538)
	at com.google.javascript.jscomp.Normalize$VerifyConstants.process(Normalize.java:284)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1063)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineFunctionsTest.testNoInlineIfParametersModified7(InlineFunctionsTest.java:594)
Caused by: java.lang.IllegalStateException: The name a$$inline_0 is not consistently annotated as constant.
</error>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testInlineIfParametersModified8" time="0.003" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testInlineIfParametersModified9" time="0.004" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testInlineNeverPartialSubtitution1" time="0.003" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testInlineNeverPartialSubtitution2" time="0.003" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testInlineNeverMutateConstants" time="0.003">
    <error message="INTERNAL COMPILER ERROR.&#xa;Please report this problem.&#xa;&#xa;The name x$$inline_0 is not consistently annotated as constant.&#xa;  Node(NAME x$$inline_0): testcode:1:21&#xa;function f(x){return x=1}f(undefined)&#xa;  Parent(ASSIGN): testcode:1:21&#xa;function f(x){return x=1}f(undefined)&#xa;" type="java.lang.RuntimeException">java.lang.RuntimeException: INTERNAL COMPILER ERROR.
Please report this problem.

The name x$$inline_0 is not consistently annotated as constant.
  Node(NAME x$$inline_0): testcode:1:21
function f(x){return x=1}f(undefined)
  Parent(ASSIGN): testcode:1:21
function f(x){return x=1}f(undefined)

	at com.google.common.base.Preconditions.checkState(Preconditions.java:197)
	at com.google.javascript.jscomp.Normalize$VerifyConstants.visit(Normalize.java:333)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:576)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseRoots(NodeTraversal.java:308)
	at com.google.javascript.jscomp.NodeTraversal.traverseRoots(NodeTraversal.java:538)
	at com.google.javascript.jscomp.Normalize$VerifyConstants.process(Normalize.java:284)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1063)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineFunctionsTest.testInlineNeverMutateConstants(InlineFunctionsTest.java:621)
Caused by: java.lang.IllegalStateException: The name x$$inline_0 is not consistently annotated as constant.
</error>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testInlineNeverOverrideNewValues" time="0.002">
    <error message="INTERNAL COMPILER ERROR.&#xa;Please report this problem.&#xa;&#xa;The name a$$inline_0 is not consistently annotated as constant.&#xa;  Node(NAME a$$inline_0): testcode:1:22&#xa;function f(a){return++a&lt;++a}f(1)&#xa;  Parent(INC): testcode:1:20&#xa;function f(a){return++a&lt;++a}f(1)&#xa;" type="java.lang.RuntimeException">java.lang.RuntimeException: INTERNAL COMPILER ERROR.
Please report this problem.

The name a$$inline_0 is not consistently annotated as constant.
  Node(NAME a$$inline_0): testcode:1:22
function f(a){return++a&lt;++a}f(1)
  Parent(INC): testcode:1:20
function f(a){return++a&lt;++a}f(1)

	at com.google.common.base.Preconditions.checkState(Preconditions.java:197)
	at com.google.javascript.jscomp.Normalize$VerifyConstants.visit(Normalize.java:333)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:576)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseRoots(NodeTraversal.java:308)
	at com.google.javascript.jscomp.NodeTraversal.traverseRoots(NodeTraversal.java:538)
	at com.google.javascript.jscomp.Normalize$VerifyConstants.process(Normalize.java:284)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1063)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineFunctionsTest.testInlineNeverOverrideNewValues(InlineFunctionsTest.java:627)
Caused by: java.lang.IllegalStateException: The name a$$inline_0 is not consistently annotated as constant.
</error>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testInlineMutableArgsReferencedOnce" time="0.002">
    <error message="INTERNAL COMPILER ERROR.&#xa;Please report this problem.&#xa;&#xa;The name x$$inline_0 is not consistently annotated as constant.&#xa;  Node(NAME x$$inline_0): testcode:1:23&#xa;function foo(x){return x;}foo([])&#xa;  Parent(EXPR_RESULT): testcode:1:23&#xa;function foo(x){return x;}foo([])&#xa;" type="java.lang.RuntimeException">java.lang.RuntimeException: INTERNAL COMPILER ERROR.
Please report this problem.

The name x$$inline_0 is not consistently annotated as constant.
  Node(NAME x$$inline_0): testcode:1:23
function foo(x){return x;}foo([])
  Parent(EXPR_RESULT): testcode:1:23
function foo(x){return x;}foo([])

	at com.google.common.base.Preconditions.checkState(Preconditions.java:197)
	at com.google.javascript.jscomp.Normalize$VerifyConstants.visit(Normalize.java:333)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:576)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseRoots(NodeTraversal.java:308)
	at com.google.javascript.jscomp.NodeTraversal.traverseRoots(NodeTraversal.java:538)
	at com.google.javascript.jscomp.Normalize$VerifyConstants.process(Normalize.java:284)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1063)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineFunctionsTest.testInlineMutableArgsReferencedOnce(InlineFunctionsTest.java:633)
Caused by: java.lang.IllegalStateException: The name x$$inline_0 is not consistently annotated as constant.
</error>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testInlineMutableArgsReferencedOnce2" time="0.002">
    <error message="Unexpected." type="java.lang.IllegalStateException">java.lang.IllegalStateException: Unexpected.
	at com.google.javascript.jscomp.ExpressionDecomposer.extractConditional(ExpressionDecomposer.java:379)
	at com.google.javascript.jscomp.ExpressionDecomposer.exposeExpression(ExpressionDecomposer.java:236)
	at com.google.javascript.jscomp.ExpressionDecomposer.exposeExpression(ExpressionDecomposer.java:103)
	at com.google.javascript.jscomp.ExpressionDecomposer.maybeExposeExpression(ExpressionDecomposer.java:85)
	at com.google.javascript.jscomp.FunctionInjector$CallSiteType$6.prepare(FunctionInjector.java:389)
	at com.google.javascript.jscomp.FunctionInjector.maybePrepareCall(FunctionInjector.java:467)
	at com.google.javascript.jscomp.InlineFunctions.decomposeExpressions(InlineFunctions.java:825)
	at com.google.javascript.jscomp.InlineFunctions.process(InlineFunctions.java:142)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1044)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineFunctionsTest.testInlineMutableArgsReferencedOnce2(InlineFunctionsTest.java:643)
</error>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testInlineMutableArgsReferencedOnce3" time="0.003">
    <error message="INTERNAL COMPILER ERROR.&#xa;Please report this problem.&#xa;&#xa;The name a$$inline_0 is not consistently annotated as constant.&#xa;  Node(NAME a$$inline_0): testcode:3:6&#xa;    g(a);&#xa;  Parent(CALL): testcode:3:4&#xa;    g(a);&#xa;" type="java.lang.RuntimeException">java.lang.RuntimeException: INTERNAL COMPILER ERROR.
Please report this problem.

The name a$$inline_0 is not consistently annotated as constant.
  Node(NAME a$$inline_0): testcode:3:6
    g(a);
  Parent(CALL): testcode:3:4
    g(a);

	at com.google.common.base.Preconditions.checkState(Preconditions.java:197)
	at com.google.javascript.jscomp.Normalize$VerifyConstants.visit(Normalize.java:333)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:576)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseRoots(NodeTraversal.java:308)
	at com.google.javascript.jscomp.NodeTraversal.traverseRoots(NodeTraversal.java:538)
	at com.google.javascript.jscomp.Normalize$VerifyConstants.process(Normalize.java:284)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1063)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineFunctionsTest.testInlineMutableArgsReferencedOnce3(InlineFunctionsTest.java:656)
Caused by: java.lang.IllegalStateException: The name a$$inline_0 is not consistently annotated as constant.
</error>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testNoInlineMutableArgs1" time="0.004" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testNoInlineMutableArgs2" time="0.004" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testNoInlineMutableArgs3" time="0.003" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testNoInlineMutableArgs4" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testInlineBlockMutableArgs1" time="0.002">
    <error message="INTERNAL COMPILER ERROR.&#xa;Please report this problem.&#xa;&#xa;The name x$$inline_0 is not consistently annotated as constant.&#xa;  Node(NAME x$$inline_0): testcode:1:16&#xa;function foo(x){x+x}foo([])&#xa;  Parent(ADD): testcode:1:16&#xa;function foo(x){x+x}foo([])&#xa;" type="java.lang.RuntimeException">java.lang.RuntimeException: INTERNAL COMPILER ERROR.
Please report this problem.

The name x$$inline_0 is not consistently annotated as constant.
  Node(NAME x$$inline_0): testcode:1:16
function foo(x){x+x}foo([])
  Parent(ADD): testcode:1:16
function foo(x){x+x}foo([])

	at com.google.common.base.Preconditions.checkState(Preconditions.java:197)
	at com.google.javascript.jscomp.Normalize$VerifyConstants.visit(Normalize.java:333)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:576)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseRoots(NodeTraversal.java:308)
	at com.google.javascript.jscomp.NodeTraversal.traverseRoots(NodeTraversal.java:538)
	at com.google.javascript.jscomp.Normalize$VerifyConstants.process(Normalize.java:284)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1063)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineFunctionsTest.testInlineBlockMutableArgs1(InlineFunctionsTest.java:693)
Caused by: java.lang.IllegalStateException: The name x$$inline_0 is not consistently annotated as constant.
</error>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testInlineBlockMutableArgs2" time="0.002">
    <error message="INTERNAL COMPILER ERROR.&#xa;Please report this problem.&#xa;&#xa;The name x$$inline_0 is not consistently annotated as constant.&#xa;  Node(NAME x$$inline_0): testcode:1:16&#xa;function foo(x){x+x}foo(new Date)&#xa;  Parent(ADD): testcode:1:16&#xa;function foo(x){x+x}foo(new Date)&#xa;" type="java.lang.RuntimeException">java.lang.RuntimeException: INTERNAL COMPILER ERROR.
Please report this problem.

The name x$$inline_0 is not consistently annotated as constant.
  Node(NAME x$$inline_0): testcode:1:16
function foo(x){x+x}foo(new Date)
  Parent(ADD): testcode:1:16
function foo(x){x+x}foo(new Date)

	at com.google.common.base.Preconditions.checkState(Preconditions.java:197)
	at com.google.javascript.jscomp.Normalize$VerifyConstants.visit(Normalize.java:333)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:576)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseRoots(NodeTraversal.java:308)
	at com.google.javascript.jscomp.NodeTraversal.traverseRoots(NodeTraversal.java:538)
	at com.google.javascript.jscomp.Normalize$VerifyConstants.process(Normalize.java:284)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1063)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineFunctionsTest.testInlineBlockMutableArgs2(InlineFunctionsTest.java:699)
Caused by: java.lang.IllegalStateException: The name x$$inline_0 is not consistently annotated as constant.
</error>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testInlineBlockMutableArgs3" time="0.002">
    <error message="INTERNAL COMPILER ERROR.&#xa;Please report this problem.&#xa;&#xa;The name x$$inline_0 is not consistently annotated as constant.&#xa;  Node(NAME x$$inline_0): testcode:1:16&#xa;function foo(x){x+x}foo(true&amp;&amp;new Date)&#xa;  Parent(ADD): testcode:1:16&#xa;function foo(x){x+x}foo(true&amp;&amp;new Date)&#xa;" type="java.lang.RuntimeException">java.lang.RuntimeException: INTERNAL COMPILER ERROR.
Please report this problem.

The name x$$inline_0 is not consistently annotated as constant.
  Node(NAME x$$inline_0): testcode:1:16
function foo(x){x+x}foo(true&amp;&amp;new Date)
  Parent(ADD): testcode:1:16
function foo(x){x+x}foo(true&amp;&amp;new Date)

	at com.google.common.base.Preconditions.checkState(Preconditions.java:197)
	at com.google.javascript.jscomp.Normalize$VerifyConstants.visit(Normalize.java:333)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:576)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseRoots(NodeTraversal.java:308)
	at com.google.javascript.jscomp.NodeTraversal.traverseRoots(NodeTraversal.java:538)
	at com.google.javascript.jscomp.Normalize$VerifyConstants.process(Normalize.java:284)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1063)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineFunctionsTest.testInlineBlockMutableArgs3(InlineFunctionsTest.java:705)
Caused by: java.lang.IllegalStateException: The name x$$inline_0 is not consistently annotated as constant.
</error>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testInlineBlockMutableArgs4" time="0.002">
    <error message="INTERNAL COMPILER ERROR.&#xa;Please report this problem.&#xa;&#xa;The name x$$inline_0 is not consistently annotated as constant.&#xa;  Node(NAME x$$inline_0): testcode:1:16&#xa;function foo(x){x+x}foo({})&#xa;  Parent(ADD): testcode:1:16&#xa;function foo(x){x+x}foo({})&#xa;" type="java.lang.RuntimeException">java.lang.RuntimeException: INTERNAL COMPILER ERROR.
Please report this problem.

The name x$$inline_0 is not consistently annotated as constant.
  Node(NAME x$$inline_0): testcode:1:16
function foo(x){x+x}foo({})
  Parent(ADD): testcode:1:16
function foo(x){x+x}foo({})

	at com.google.common.base.Preconditions.checkState(Preconditions.java:197)
	at com.google.javascript.jscomp.Normalize$VerifyConstants.visit(Normalize.java:333)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:576)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseRoots(NodeTraversal.java:308)
	at com.google.javascript.jscomp.NodeTraversal.traverseRoots(NodeTraversal.java:538)
	at com.google.javascript.jscomp.Normalize$VerifyConstants.process(Normalize.java:284)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1063)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineFunctionsTest.testInlineBlockMutableArgs4(InlineFunctionsTest.java:711)
Caused by: java.lang.IllegalStateException: The name x$$inline_0 is not consistently annotated as constant.
</error>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testShadowVariables1" time="0.005" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testShadowVariables2" time="0.003" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testShadowVariables3" time="0.002">
    <error message="Unexpected." type="java.lang.IllegalStateException">java.lang.IllegalStateException: Unexpected.
	at com.google.javascript.jscomp.ExpressionDecomposer.extractConditional(ExpressionDecomposer.java:379)
	at com.google.javascript.jscomp.ExpressionDecomposer.exposeExpression(ExpressionDecomposer.java:236)
	at com.google.javascript.jscomp.ExpressionDecomposer.exposeExpression(ExpressionDecomposer.java:103)
	at com.google.javascript.jscomp.ExpressionDecomposer.maybeExposeExpression(ExpressionDecomposer.java:85)
	at com.google.javascript.jscomp.FunctionInjector$CallSiteType$6.prepare(FunctionInjector.java:389)
	at com.google.javascript.jscomp.FunctionInjector.maybePrepareCall(FunctionInjector.java:467)
	at com.google.javascript.jscomp.InlineFunctions.decomposeExpressions(InlineFunctions.java:825)
	at com.google.javascript.jscomp.InlineFunctions.process(InlineFunctions.java:142)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1044)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineFunctionsTest.testShadowVariables3(InlineFunctionsTest.java:746)
</error>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testShadowVariables4" time="0.003" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testShadowVariables5" time="0.005" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testShadowVariables6" time="0.003">
    <error message="Unexpected." type="java.lang.IllegalStateException">java.lang.IllegalStateException: Unexpected.
	at com.google.javascript.jscomp.ExpressionDecomposer.extractConditional(ExpressionDecomposer.java:379)
	at com.google.javascript.jscomp.ExpressionDecomposer.exposeExpression(ExpressionDecomposer.java:236)
	at com.google.javascript.jscomp.ExpressionDecomposer.exposeExpression(ExpressionDecomposer.java:103)
	at com.google.javascript.jscomp.ExpressionDecomposer.maybeExposeExpression(ExpressionDecomposer.java:85)
	at com.google.javascript.jscomp.FunctionInjector$CallSiteType$6.prepare(FunctionInjector.java:389)
	at com.google.javascript.jscomp.FunctionInjector.maybePrepareCall(FunctionInjector.java:467)
	at com.google.javascript.jscomp.InlineFunctions.decomposeExpressions(InlineFunctions.java:825)
	at com.google.javascript.jscomp.InlineFunctions.process(InlineFunctions.java:142)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1044)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineFunctionsTest.testShadowVariables6(InlineFunctionsTest.java:777)
</error>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testShadowVariables7" time="0.007" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testShadowVariables8" time="0.003" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testShadowVariables9" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testShadowVariables10" time="0.003" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testShadowVariables11" time="0.005" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testShadowVariables12" time="0.005" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testShadowVariables13" time="0.004" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testShadowVariables14" time="0.006" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testShadowVariables15" time="0.005" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testShadowVariables16" time="0.008" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testShadowVariables17" time="0.004" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testShadowVariables18" time="0.004">
    <failure message="&#xa;Expected: var a=0;function _goo(){var a$$2=2;var x;var a$$inline_0=3;x=a+a}&#xa;Result:   var a=0;function _goo(){var a$$2=2;var JSCompiler_inline_result$$0;var a$$inline_1=3;JSCompiler_inline_result$$0=a+a;var x=JSCompiler_inline_result$$0}&#xa;Node tree inequality:&#xa;Expected tree:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;        VAR 1 [source_file: expected0]&#xa;            NAME a 1 [is_constant_name: 1] [source_file: expected0]&#xa;                NUMBER 0.0 1 [source_file: expected0]&#xa;        FUNCTION _goo 1 [source_file: expected0]&#xa;            NAME _goo 1 [source_file: expected0]&#xa;            PARAM_LIST 1 [source_file: expected0]&#xa;            BLOCK 1 [source_file: expected0]&#xa;                VAR 1 [source_file: expected0]&#xa;                    NAME a$$2 1 [source_file: expected0]&#xa;                        NUMBER 2.0 1 [source_file: expected0]&#xa;                VAR 1 [source_file: expected0]&#xa;                    NAME x 1 [is_constant_name: 1] [source_file: expected0]&#xa;                BLOCK 1 [source_file: expected0]&#xa;                    VAR 1 [source_file: expected0]&#xa;                        NAME a$$inline_0 1 [source_file: expected0]&#xa;                            NUMBER 3.0 1 [source_file: expected0]&#xa;                    EXPR_RESULT 1 [source_file: expected0]&#xa;                        ASSIGN 1 [source_file: expected0]&#xa;                            NAME x 1 [is_constant_name: 1] [source_file: expected0]&#xa;                            ADD 1 [source_file: expected0]&#xa;                                NAME a 1 [is_constant_name: 1] [source_file: expected0]&#xa;                                NAME a 1 [is_constant_name: 1] [source_file: expected0]&#xa;&#xa;&#xa;Actual tree:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME a 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]&#xa;                NUMBER 0.0 1 [source_file: testcode]&#xa;        FUNCTION _goo 1 [source_file: testcode]&#xa;            NAME _goo 1 [source_file: testcode] [is_constant_var: 1]&#xa;            PARAM_LIST 1 [source_file: testcode]&#xa;            BLOCK 1 [source_file: testcode]&#xa;                VAR 1 [source_file: testcode]&#xa;                    NAME a$$2 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]&#xa;                        NUMBER 2.0 1 [source_file: testcode]&#xa;                VAR 1 [source_file: testcode]&#xa;                    NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;                BLOCK 1 [source_file: testcode]&#xa;                    VAR 1 [source_file: testcode]&#xa;                        NAME a$$inline_1 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]&#xa;                            NUMBER 3.0 1 [source_file: testcode]&#xa;                    EXPR_RESULT 1 [source_file: testcode]&#xa;                        ASSIGN 1 [source_file: testcode]&#xa;                            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;                            ADD 1 [source_file: testcode]&#xa;                                NAME a 1 [is_constant_name: 1] [source_file: testcode]&#xa;                                NAME a 1 [is_constant_name: 1] [source_file: testcode]&#xa;                VAR 1 [source_file: testcode]&#xa;                    NAME x 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]&#xa;                        NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;&#xa;&#xa;Expected subtree: BLOCK 1 [source_file: expected0]&#xa;    VAR 1 [source_file: expected0]&#xa;        NAME a$$2 1 [source_file: expected0]&#xa;            NUMBER 2.0 1 [source_file: expected0]&#xa;    VAR 1 [source_file: expected0]&#xa;        NAME x 1 [is_constant_name: 1] [source_file: expected0]&#xa;    BLOCK 1 [source_file: expected0]&#xa;        VAR 1 [source_file: expected0]&#xa;            NAME a$$inline_0 1 [source_file: expected0]&#xa;                NUMBER 3.0 1 [source_file: expected0]&#xa;        EXPR_RESULT 1 [source_file: expected0]&#xa;            ASSIGN 1 [source_file: expected0]&#xa;                NAME x 1 [is_constant_name: 1] [source_file: expected0]&#xa;                ADD 1 [source_file: expected0]&#xa;                    NAME a 1 [is_constant_name: 1] [source_file: expected0]&#xa;                    NAME a 1 [is_constant_name: 1] [source_file: expected0]&#xa;&#xa;&#xa;Actual subtree: BLOCK 1 [source_file: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME a$$2 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]&#xa;            NUMBER 2.0 1 [source_file: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;    BLOCK 1 [source_file: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME a$$inline_1 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]&#xa;                NUMBER 3.0 1 [source_file: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            ASSIGN 1 [source_file: testcode]&#xa;                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;                ADD 1 [source_file: testcode]&#xa;                    NAME a 1 [is_constant_name: 1] [source_file: testcode]&#xa;                    NAME a 1 [is_constant_name: 1] [source_file: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME x 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]&#xa;            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: var a=0;function _goo(){var a$$2=2;var x;var a$$inline_0=3;x=a+a}
Result:   var a=0;function _goo(){var a$$2=2;var JSCompiler_inline_result$$0;var a$$inline_1=3;JSCompiler_inline_result$$0=a+a;var x=JSCompiler_inline_result$$0}
Node tree inequality:
Expected tree:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        VAR 1 [source_file: expected0]
            NAME a 1 [is_constant_name: 1] [source_file: expected0]
                NUMBER 0.0 1 [source_file: expected0]
        FUNCTION _goo 1 [source_file: expected0]
            NAME _goo 1 [source_file: expected0]
            PARAM_LIST 1 [source_file: expected0]
            BLOCK 1 [source_file: expected0]
                VAR 1 [source_file: expected0]
                    NAME a$$2 1 [source_file: expected0]
                        NUMBER 2.0 1 [source_file: expected0]
                VAR 1 [source_file: expected0]
                    NAME x 1 [is_constant_name: 1] [source_file: expected0]
                BLOCK 1 [source_file: expected0]
                    VAR 1 [source_file: expected0]
                        NAME a$$inline_0 1 [source_file: expected0]
                            NUMBER 3.0 1 [source_file: expected0]
                    EXPR_RESULT 1 [source_file: expected0]
                        ASSIGN 1 [source_file: expected0]
                            NAME x 1 [is_constant_name: 1] [source_file: expected0]
                            ADD 1 [source_file: expected0]
                                NAME a 1 [is_constant_name: 1] [source_file: expected0]
                                NAME a 1 [is_constant_name: 1] [source_file: expected0]


Actual tree:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
        VAR 1 [source_file: testcode]
            NAME a 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]
                NUMBER 0.0 1 [source_file: testcode]
        FUNCTION _goo 1 [source_file: testcode]
            NAME _goo 1 [source_file: testcode] [is_constant_var: 1]
            PARAM_LIST 1 [source_file: testcode]
            BLOCK 1 [source_file: testcode]
                VAR 1 [source_file: testcode]
                    NAME a$$2 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]
                        NUMBER 2.0 1 [source_file: testcode]
                VAR 1 [source_file: testcode]
                    NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
                BLOCK 1 [source_file: testcode]
                    VAR 1 [source_file: testcode]
                        NAME a$$inline_1 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]
                            NUMBER 3.0 1 [source_file: testcode]
                    EXPR_RESULT 1 [source_file: testcode]
                        ASSIGN 1 [source_file: testcode]
                            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
                            ADD 1 [source_file: testcode]
                                NAME a 1 [is_constant_name: 1] [source_file: testcode]
                                NAME a 1 [is_constant_name: 1] [source_file: testcode]
                VAR 1 [source_file: testcode]
                    NAME x 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]
                        NAME JSCompiler_inline_result$$0 1 [source_file: testcode]


Expected subtree: BLOCK 1 [source_file: expected0]
    VAR 1 [source_file: expected0]
        NAME a$$2 1 [source_file: expected0]
            NUMBER 2.0 1 [source_file: expected0]
    VAR 1 [source_file: expected0]
        NAME x 1 [is_constant_name: 1] [source_file: expected0]
    BLOCK 1 [source_file: expected0]
        VAR 1 [source_file: expected0]
            NAME a$$inline_0 1 [source_file: expected0]
                NUMBER 3.0 1 [source_file: expected0]
        EXPR_RESULT 1 [source_file: expected0]
            ASSIGN 1 [source_file: expected0]
                NAME x 1 [is_constant_name: 1] [source_file: expected0]
                ADD 1 [source_file: expected0]
                    NAME a 1 [is_constant_name: 1] [source_file: expected0]
                    NAME a 1 [is_constant_name: 1] [source_file: expected0]


Actual subtree: BLOCK 1 [source_file: testcode]
    VAR 1 [source_file: testcode]
        NAME a$$2 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]
            NUMBER 2.0 1 [source_file: testcode]
    VAR 1 [source_file: testcode]
        NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
    BLOCK 1 [source_file: testcode]
        VAR 1 [source_file: testcode]
            NAME a$$inline_1 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]
                NUMBER 3.0 1 [source_file: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            ASSIGN 1 [source_file: testcode]
                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
                ADD 1 [source_file: testcode]
                    NAME a 1 [is_constant_name: 1] [source_file: testcode]
                    NAME a 1 [is_constant_name: 1] [source_file: testcode]
    VAR 1 [source_file: testcode]
        NAME x 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]
            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineFunctionsTest.testShadowVariables18(InlineFunctionsTest.java:914)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testCostBasedInlining1" time="0.003" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testCostBasedInlining2" time="0.003" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testCostBasedInlining3" time="0.004" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testCostBasedInlining4" time="0.006" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testCostBasedInlining5" time="0.003" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testCostBasedInlining6" time="0.006" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testCostBasedInlining7" time="0.011" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testCostBasedInlining8" time="0.006" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testCostBasedInlining9" time="0.003">
    <error message="INTERNAL COMPILER ERROR.&#xa;Please report this problem.&#xa;&#xa;The name a$$inline_1 is not consistently annotated as constant.&#xa;  Node(NAME a$$inline_1): testcode:1:29&#xa;function f(a){return chg() + a + a;}var a = f(f(1));&#xa;  Parent(ADD): testcode:1:21&#xa;function f(a){return chg() + a + a;}var a = f(f(1));&#xa;" type="java.lang.RuntimeException">java.lang.RuntimeException: INTERNAL COMPILER ERROR.
Please report this problem.

The name a$$inline_1 is not consistently annotated as constant.
  Node(NAME a$$inline_1): testcode:1:29
function f(a){return chg() + a + a;}var a = f(f(1));
  Parent(ADD): testcode:1:21
function f(a){return chg() + a + a;}var a = f(f(1));

	at com.google.common.base.Preconditions.checkState(Preconditions.java:197)
	at com.google.javascript.jscomp.Normalize$VerifyConstants.visit(Normalize.java:333)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:576)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseRoots(NodeTraversal.java:308)
	at com.google.javascript.jscomp.NodeTraversal.traverseRoots(NodeTraversal.java:538)
	at com.google.javascript.jscomp.Normalize$VerifyConstants.process(Normalize.java:284)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1063)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineFunctionsTest.testCostBasedInlining9(InlineFunctionsTest.java:1017)
Caused by: java.lang.IllegalStateException: The name a$$inline_1 is not consistently annotated as constant.
</error>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testCostBasedInlining10" time="0.004" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testCostBasedInlining11" time="0.003">
    <error message="INTERNAL COMPILER ERROR.&#xa;Please report this problem.&#xa;&#xa;The name a$$inline_1 is not consistently annotated as constant.&#xa;  Node(NAME a$$inline_1): testcode:1:29&#xa;function f(a){return chg() + a + a;}var a = f(f(1))&#xa;  Parent(ADD): testcode:1:21&#xa;function f(a){return chg() + a + a;}var a = f(f(1))&#xa;" type="java.lang.RuntimeException">java.lang.RuntimeException: INTERNAL COMPILER ERROR.
Please report this problem.

The name a$$inline_1 is not consistently annotated as constant.
  Node(NAME a$$inline_1): testcode:1:29
function f(a){return chg() + a + a;}var a = f(f(1))
  Parent(ADD): testcode:1:21
function f(a){return chg() + a + a;}var a = f(f(1))

	at com.google.common.base.Preconditions.checkState(Preconditions.java:197)
	at com.google.javascript.jscomp.Normalize$VerifyConstants.visit(Normalize.java:333)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:576)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseRoots(NodeTraversal.java:308)
	at com.google.javascript.jscomp.NodeTraversal.traverseRoots(NodeTraversal.java:538)
	at com.google.javascript.jscomp.Normalize$VerifyConstants.process(Normalize.java:284)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1063)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineFunctionsTest.testCostBasedInlining11(InlineFunctionsTest.java:1034)
Caused by: java.lang.IllegalStateException: The name a$$inline_1 is not consistently annotated as constant.
</error>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testCostBasedInlining12" time="0.004" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testCostBasedInliningComplex1" time="0.004" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testCostBasedInliningComplex2" time="0.003" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testCostBasedInliningComplex3" time="0.005" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testCostBasedInliningComplex4" time="0.004" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testCostBasedInliningComplex5" time="0.005" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testCostBasedInliningComplex6" time="0.008" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testCostBasedInliningComplex7" time="0.007" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testCostBasedInliningComplex8" time="0.004" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testCostBasedInliningComplex9" time="0.005" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testDoubleInlining1" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testDoubleInlining2" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testNoInlineOfNonGlobalFunction1" time="0.003" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testNoInlineOfNonGlobalFunction2" time="0.004" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testNoInlineOfNonGlobalFunction3" time="0.004" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testNoInlineOfNonGlobalFunction4" time="0.003" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testNoInlineMaskedFunction" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testNoInlineNonFunction" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testInlineCall" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testInlineFunctionWithArgsMismatch1" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testInlineFunctionWithArgsMismatch2" time="0.004" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testInlineFunctionWithArgsMismatch3" time="0.003" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testInlineFunctionWithArgsMismatch4" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testArgumentsWithSideEffectsNeverInlined1" time="0.003" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testArgumentsWithSideEffectsNeverInlined2" time="0.006" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testOneSideEffectCallDoesNotRuinOthers" time="0.004" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testComplexInlineNoResultNoParamCall1" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testComplexInlineNoResultNoParamCall2" time="0.003" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testComplexInlineNoResultNoParamCall3" time="0.003" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testComplexInlineNoResultWithParamCall1" time="0.003" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testComplexInlineNoResultWithParamCall2" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testComplexInlineNoResultWithParamCall3" time="0.003" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testComplexInline1" time="0.001">
    <error message="Unexpected." type="java.lang.IllegalStateException">java.lang.IllegalStateException: Unexpected.
	at com.google.javascript.jscomp.ExpressionDecomposer.extractConditional(ExpressionDecomposer.java:379)
	at com.google.javascript.jscomp.ExpressionDecomposer.exposeExpression(ExpressionDecomposer.java:236)
	at com.google.javascript.jscomp.ExpressionDecomposer.exposeExpression(ExpressionDecomposer.java:103)
	at com.google.javascript.jscomp.ExpressionDecomposer.maybeExposeExpression(ExpressionDecomposer.java:85)
	at com.google.javascript.jscomp.FunctionInjector$CallSiteType$6.prepare(FunctionInjector.java:389)
	at com.google.javascript.jscomp.FunctionInjector.maybePrepareCall(FunctionInjector.java:467)
	at com.google.javascript.jscomp.InlineFunctions.decomposeExpressions(InlineFunctions.java:825)
	at com.google.javascript.jscomp.InlineFunctions.process(InlineFunctions.java:142)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1044)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineFunctionsTest.testComplexInline1(InlineFunctionsTest.java:1271)
</error>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testComplexInline2" time="0.002">
    <error message="Unexpected." type="java.lang.IllegalStateException">java.lang.IllegalStateException: Unexpected.
	at com.google.javascript.jscomp.ExpressionDecomposer.extractConditional(ExpressionDecomposer.java:379)
	at com.google.javascript.jscomp.ExpressionDecomposer.exposeExpression(ExpressionDecomposer.java:236)
	at com.google.javascript.jscomp.ExpressionDecomposer.exposeExpression(ExpressionDecomposer.java:103)
	at com.google.javascript.jscomp.ExpressionDecomposer.maybeExposeExpression(ExpressionDecomposer.java:85)
	at com.google.javascript.jscomp.FunctionInjector$CallSiteType$6.prepare(FunctionInjector.java:389)
	at com.google.javascript.jscomp.FunctionInjector.maybePrepareCall(FunctionInjector.java:467)
	at com.google.javascript.jscomp.InlineFunctions.decomposeExpressions(InlineFunctions.java:825)
	at com.google.javascript.jscomp.InlineFunctions.process(InlineFunctions.java:142)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1044)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineFunctionsTest.testComplexInline2(InlineFunctionsTest.java:1278)
</error>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testComplexInline3" time="0.001">
    <error message="Unexpected." type="java.lang.IllegalStateException">java.lang.IllegalStateException: Unexpected.
	at com.google.javascript.jscomp.ExpressionDecomposer.extractConditional(ExpressionDecomposer.java:379)
	at com.google.javascript.jscomp.ExpressionDecomposer.exposeExpression(ExpressionDecomposer.java:236)
	at com.google.javascript.jscomp.ExpressionDecomposer.exposeExpression(ExpressionDecomposer.java:103)
	at com.google.javascript.jscomp.ExpressionDecomposer.maybeExposeExpression(ExpressionDecomposer.java:85)
	at com.google.javascript.jscomp.FunctionInjector$CallSiteType$6.prepare(FunctionInjector.java:389)
	at com.google.javascript.jscomp.FunctionInjector.maybePrepareCall(FunctionInjector.java:467)
	at com.google.javascript.jscomp.InlineFunctions.decomposeExpressions(InlineFunctions.java:825)
	at com.google.javascript.jscomp.InlineFunctions.process(InlineFunctions.java:142)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1044)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineFunctionsTest.testComplexInline3(InlineFunctionsTest.java:1285)
</error>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testComplexInline4" time="0.001">
    <error message="Unexpected." type="java.lang.IllegalStateException">java.lang.IllegalStateException: Unexpected.
	at com.google.javascript.jscomp.ExpressionDecomposer.extractConditional(ExpressionDecomposer.java:379)
	at com.google.javascript.jscomp.ExpressionDecomposer.exposeExpression(ExpressionDecomposer.java:236)
	at com.google.javascript.jscomp.ExpressionDecomposer.exposeExpression(ExpressionDecomposer.java:103)
	at com.google.javascript.jscomp.ExpressionDecomposer.maybeExposeExpression(ExpressionDecomposer.java:85)
	at com.google.javascript.jscomp.FunctionInjector$CallSiteType$6.prepare(FunctionInjector.java:389)
	at com.google.javascript.jscomp.FunctionInjector.maybePrepareCall(FunctionInjector.java:467)
	at com.google.javascript.jscomp.InlineFunctions.decomposeExpressions(InlineFunctions.java:825)
	at com.google.javascript.jscomp.InlineFunctions.process(InlineFunctions.java:142)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1044)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineFunctionsTest.testComplexInline4(InlineFunctionsTest.java:1292)
</error>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testComplexInline5" time="0.002">
    <error message="Unexpected." type="java.lang.IllegalStateException">java.lang.IllegalStateException: Unexpected.
	at com.google.javascript.jscomp.ExpressionDecomposer.extractConditional(ExpressionDecomposer.java:379)
	at com.google.javascript.jscomp.ExpressionDecomposer.exposeExpression(ExpressionDecomposer.java:236)
	at com.google.javascript.jscomp.ExpressionDecomposer.exposeExpression(ExpressionDecomposer.java:103)
	at com.google.javascript.jscomp.ExpressionDecomposer.maybeExposeExpression(ExpressionDecomposer.java:85)
	at com.google.javascript.jscomp.FunctionInjector$CallSiteType$6.prepare(FunctionInjector.java:389)
	at com.google.javascript.jscomp.FunctionInjector.maybePrepareCall(FunctionInjector.java:467)
	at com.google.javascript.jscomp.InlineFunctions.decomposeExpressions(InlineFunctions.java:825)
	at com.google.javascript.jscomp.InlineFunctions.process(InlineFunctions.java:142)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1044)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineFunctionsTest.testComplexInline5(InlineFunctionsTest.java:1297)
</error>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testComplexInline6" time="0.002">
    <error message="Unexpected." type="java.lang.IllegalStateException">java.lang.IllegalStateException: Unexpected.
	at com.google.javascript.jscomp.ExpressionDecomposer.extractConditional(ExpressionDecomposer.java:379)
	at com.google.javascript.jscomp.ExpressionDecomposer.exposeExpression(ExpressionDecomposer.java:236)
	at com.google.javascript.jscomp.ExpressionDecomposer.exposeExpression(ExpressionDecomposer.java:103)
	at com.google.javascript.jscomp.ExpressionDecomposer.maybeExposeExpression(ExpressionDecomposer.java:85)
	at com.google.javascript.jscomp.FunctionInjector$CallSiteType$6.prepare(FunctionInjector.java:389)
	at com.google.javascript.jscomp.FunctionInjector.maybePrepareCall(FunctionInjector.java:467)
	at com.google.javascript.jscomp.InlineFunctions.decomposeExpressions(InlineFunctions.java:825)
	at com.google.javascript.jscomp.InlineFunctions.process(InlineFunctions.java:142)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1044)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineFunctionsTest.testComplexInline6(InlineFunctionsTest.java:1302)
</error>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testComplexInline7" time="0.001">
    <error message="Unexpected." type="java.lang.IllegalStateException">java.lang.IllegalStateException: Unexpected.
	at com.google.javascript.jscomp.ExpressionDecomposer.extractConditional(ExpressionDecomposer.java:379)
	at com.google.javascript.jscomp.ExpressionDecomposer.exposeExpression(ExpressionDecomposer.java:236)
	at com.google.javascript.jscomp.ExpressionDecomposer.exposeExpression(ExpressionDecomposer.java:103)
	at com.google.javascript.jscomp.ExpressionDecomposer.maybeExposeExpression(ExpressionDecomposer.java:85)
	at com.google.javascript.jscomp.FunctionInjector$CallSiteType$6.prepare(FunctionInjector.java:389)
	at com.google.javascript.jscomp.FunctionInjector.maybePrepareCall(FunctionInjector.java:467)
	at com.google.javascript.jscomp.InlineFunctions.decomposeExpressions(InlineFunctions.java:825)
	at com.google.javascript.jscomp.InlineFunctions.process(InlineFunctions.java:142)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1044)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineFunctionsTest.testComplexInline7(InlineFunctionsTest.java:1307)
</error>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testComplexInline8" time="0.002">
    <failure message="&#xa;Expected: var z;a(1);z=void 0&#xa;Result:   var JSCompiler_inline_result$$0;a(1);JSCompiler_inline_result$$0=void 0;var z=JSCompiler_inline_result$$0&#xa;Node tree inequality:&#xa;Expected tree:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;        VAR 1 [source_file: expected0]&#xa;            NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;        BLOCK 1 [source_file: expected0]&#xa;            EXPR_RESULT 1 [source_file: expected0]&#xa;                CALL 1 [free_call: 1] [source_file: expected0]&#xa;                    NAME a 1 [is_constant_name: 1] [source_file: expected0]&#xa;                    NUMBER 1.0 1 [source_file: expected0]&#xa;            EXPR_RESULT 1 [source_file: expected0]&#xa;                ASSIGN 1 [source_file: expected0]&#xa;                    NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;                    VOID 1 [source_file: expected0]&#xa;                        NUMBER 0.0 1 [source_file: expected0]&#xa;&#xa;&#xa;Actual tree:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;        BLOCK 1 [source_file: testcode]&#xa;            EXPR_RESULT 1 [source_file: testcode]&#xa;                CALL 1 [free_call: 1] [source_file: testcode]&#xa;                    NAME a 1 [is_constant_name: 1] [source_file: testcode]&#xa;                    NUMBER 1.0 1 [source_file: testcode]&#xa;            EXPR_RESULT 1 [source_file: testcode]&#xa;                ASSIGN 1 [source_file: testcode]&#xa;                    NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;                    VOID 1 [source_file: testcode]&#xa;                        NUMBER 0.0 1 [source_file: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME z 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]&#xa;                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;&#xa;&#xa;Expected subtree: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;    VAR 1 [source_file: expected0]&#xa;        NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;    BLOCK 1 [source_file: expected0]&#xa;        EXPR_RESULT 1 [source_file: expected0]&#xa;            CALL 1 [free_call: 1] [source_file: expected0]&#xa;                NAME a 1 [is_constant_name: 1] [source_file: expected0]&#xa;                NUMBER 1.0 1 [source_file: expected0]&#xa;        EXPR_RESULT 1 [source_file: expected0]&#xa;            ASSIGN 1 [source_file: expected0]&#xa;                NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;                VOID 1 [source_file: expected0]&#xa;                    NUMBER 0.0 1 [source_file: expected0]&#xa;&#xa;&#xa;Actual subtree: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;    BLOCK 1 [source_file: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            CALL 1 [free_call: 1] [source_file: testcode]&#xa;                NAME a 1 [is_constant_name: 1] [source_file: testcode]&#xa;                NUMBER 1.0 1 [source_file: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            ASSIGN 1 [source_file: testcode]&#xa;                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;                VOID 1 [source_file: testcode]&#xa;                    NUMBER 0.0 1 [source_file: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME z 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]&#xa;            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: var z;a(1);z=void 0
Result:   var JSCompiler_inline_result$$0;a(1);JSCompiler_inline_result$$0=void 0;var z=JSCompiler_inline_result$$0
Node tree inequality:
Expected tree:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        VAR 1 [source_file: expected0]
            NAME z 1 [is_constant_name: 1] [source_file: expected0]
        BLOCK 1 [source_file: expected0]
            EXPR_RESULT 1 [source_file: expected0]
                CALL 1 [free_call: 1] [source_file: expected0]
                    NAME a 1 [is_constant_name: 1] [source_file: expected0]
                    NUMBER 1.0 1 [source_file: expected0]
            EXPR_RESULT 1 [source_file: expected0]
                ASSIGN 1 [source_file: expected0]
                    NAME z 1 [is_constant_name: 1] [source_file: expected0]
                    VOID 1 [source_file: expected0]
                        NUMBER 0.0 1 [source_file: expected0]


Actual tree:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
        VAR 1 [source_file: testcode]
            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
        BLOCK 1 [source_file: testcode]
            EXPR_RESULT 1 [source_file: testcode]
                CALL 1 [free_call: 1] [source_file: testcode]
                    NAME a 1 [is_constant_name: 1] [source_file: testcode]
                    NUMBER 1.0 1 [source_file: testcode]
            EXPR_RESULT 1 [source_file: testcode]
                ASSIGN 1 [source_file: testcode]
                    NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
                    VOID 1 [source_file: testcode]
                        NUMBER 0.0 1 [source_file: testcode]
        VAR 1 [source_file: testcode]
            NAME z 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]
                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]


Expected subtree: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
    VAR 1 [source_file: expected0]
        NAME z 1 [is_constant_name: 1] [source_file: expected0]
    BLOCK 1 [source_file: expected0]
        EXPR_RESULT 1 [source_file: expected0]
            CALL 1 [free_call: 1] [source_file: expected0]
                NAME a 1 [is_constant_name: 1] [source_file: expected0]
                NUMBER 1.0 1 [source_file: expected0]
        EXPR_RESULT 1 [source_file: expected0]
            ASSIGN 1 [source_file: expected0]
                NAME z 1 [is_constant_name: 1] [source_file: expected0]
                VOID 1 [source_file: expected0]
                    NUMBER 0.0 1 [source_file: expected0]


Actual subtree: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
    VAR 1 [source_file: testcode]
        NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
    BLOCK 1 [source_file: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            CALL 1 [free_call: 1] [source_file: testcode]
                NAME a 1 [is_constant_name: 1] [source_file: testcode]
                NUMBER 1.0 1 [source_file: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            ASSIGN 1 [source_file: testcode]
                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
                VOID 1 [source_file: testcode]
                    NUMBER 0.0 1 [source_file: testcode]
    VAR 1 [source_file: testcode]
        NAME z 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]
            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineFunctionsTest.testComplexInline8(InlineFunctionsTest.java:1315)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testComplexInlineVars1" time="0.003">
    <failure message="&#xa;Expected: var z;JSCompiler_inline_label_f_0:{if(true){z=void 0;break JSCompiler_inline_label_f_0}else;z=void 0}&#xa;Result:   var JSCompiler_inline_result$$0;JSCompiler_inline_label_f_1:{if(true){JSCompiler_inline_result$$0=void 0;break JSCompiler_inline_label_f_1}else;JSCompiler_inline_result$$0=void 0}var z=JSCompiler_inline_result$$0&#xa;Node tree inequality:&#xa;Expected tree:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;        VAR 1 [source_file: expected0]&#xa;            NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;        BLOCK 1 [source_file: expected0]&#xa;            LABEL 1 [source_file: expected0]&#xa;                LABEL_NAME JSCompiler_inline_label_f_0 1 [source_file: expected0]&#xa;                BLOCK 1 [source_file: expected0]&#xa;                    IF 1 [source_file: expected0]&#xa;                        TRUE 1 [source_file: expected0]&#xa;                        BLOCK 1 [source_file: expected0]&#xa;                            EXPR_RESULT 1 [source_file: expected0]&#xa;                                ASSIGN 1 [source_file: expected0]&#xa;                                    NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;                                    VOID 1 [source_file: expected0]&#xa;                                        NUMBER 0.0 1 [source_file: expected0]&#xa;                            BREAK 1 [source_file: expected0]&#xa;                                LABEL_NAME JSCompiler_inline_label_f_0 1 [source_file: expected0]&#xa;                        BLOCK 1 [added_block: 1] [source_file: expected0]&#xa;                    EXPR_RESULT 1 [source_file: expected0]&#xa;                        ASSIGN 1 [source_file: expected0]&#xa;                            NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;                            VOID 1 [source_file: expected0]&#xa;                                NUMBER 0.0 1 [source_file: expected0]&#xa;&#xa;&#xa;Actual tree:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;        BLOCK 1 [source_file: testcode]&#xa;            LABEL 1 [source_file: testcode]&#xa;                LABEL_NAME JSCompiler_inline_label_f_1 1 [source_file: testcode]&#xa;                BLOCK 1 [source_file: testcode]&#xa;                    IF 1 [source_file: testcode]&#xa;                        TRUE 1 [source_file: testcode]&#xa;                        BLOCK 1 [source_file: testcode]&#xa;                            EXPR_RESULT 1 [source_file: testcode]&#xa;                                ASSIGN 1 [source_file: testcode]&#xa;                                    NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;                                    VOID 1 [source_file: testcode]&#xa;                                        NUMBER 0.0 1 [source_file: testcode]&#xa;                            BREAK 1 [source_file: testcode]&#xa;                                LABEL_NAME JSCompiler_inline_label_f_1 1 [source_file: testcode]&#xa;                        BLOCK 1 [added_block: 1] [source_file: testcode]&#xa;                    EXPR_RESULT 1 [source_file: testcode]&#xa;                        ASSIGN 1 [source_file: testcode]&#xa;                            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;                            VOID 1 [source_file: testcode]&#xa;                                NUMBER 0.0 1 [source_file: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME z 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]&#xa;                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;&#xa;&#xa;Expected subtree: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;    VAR 1 [source_file: expected0]&#xa;        NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;    BLOCK 1 [source_file: expected0]&#xa;        LABEL 1 [source_file: expected0]&#xa;            LABEL_NAME JSCompiler_inline_label_f_0 1 [source_file: expected0]&#xa;            BLOCK 1 [source_file: expected0]&#xa;                IF 1 [source_file: expected0]&#xa;                    TRUE 1 [source_file: expected0]&#xa;                    BLOCK 1 [source_file: expected0]&#xa;                        EXPR_RESULT 1 [source_file: expected0]&#xa;                            ASSIGN 1 [source_file: expected0]&#xa;                                NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;                                VOID 1 [source_file: expected0]&#xa;                                    NUMBER 0.0 1 [source_file: expected0]&#xa;                        BREAK 1 [source_file: expected0]&#xa;                            LABEL_NAME JSCompiler_inline_label_f_0 1 [source_file: expected0]&#xa;                    BLOCK 1 [added_block: 1] [source_file: expected0]&#xa;                EXPR_RESULT 1 [source_file: expected0]&#xa;                    ASSIGN 1 [source_file: expected0]&#xa;                        NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;                        VOID 1 [source_file: expected0]&#xa;                            NUMBER 0.0 1 [source_file: expected0]&#xa;&#xa;&#xa;Actual subtree: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;    BLOCK 1 [source_file: testcode]&#xa;        LABEL 1 [source_file: testcode]&#xa;            LABEL_NAME JSCompiler_inline_label_f_1 1 [source_file: testcode]&#xa;            BLOCK 1 [source_file: testcode]&#xa;                IF 1 [source_file: testcode]&#xa;                    TRUE 1 [source_file: testcode]&#xa;                    BLOCK 1 [source_file: testcode]&#xa;                        EXPR_RESULT 1 [source_file: testcode]&#xa;                            ASSIGN 1 [source_file: testcode]&#xa;                                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;                                VOID 1 [source_file: testcode]&#xa;                                    NUMBER 0.0 1 [source_file: testcode]&#xa;                        BREAK 1 [source_file: testcode]&#xa;                            LABEL_NAME JSCompiler_inline_label_f_1 1 [source_file: testcode]&#xa;                    BLOCK 1 [added_block: 1] [source_file: testcode]&#xa;                EXPR_RESULT 1 [source_file: testcode]&#xa;                    ASSIGN 1 [source_file: testcode]&#xa;                        NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;                        VOID 1 [source_file: testcode]&#xa;                            NUMBER 0.0 1 [source_file: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME z 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]&#xa;            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: var z;JSCompiler_inline_label_f_0:{if(true){z=void 0;break JSCompiler_inline_label_f_0}else;z=void 0}
Result:   var JSCompiler_inline_result$$0;JSCompiler_inline_label_f_1:{if(true){JSCompiler_inline_result$$0=void 0;break JSCompiler_inline_label_f_1}else;JSCompiler_inline_result$$0=void 0}var z=JSCompiler_inline_result$$0
Node tree inequality:
Expected tree:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        VAR 1 [source_file: expected0]
            NAME z 1 [is_constant_name: 1] [source_file: expected0]
        BLOCK 1 [source_file: expected0]
            LABEL 1 [source_file: expected0]
                LABEL_NAME JSCompiler_inline_label_f_0 1 [source_file: expected0]
                BLOCK 1 [source_file: expected0]
                    IF 1 [source_file: expected0]
                        TRUE 1 [source_file: expected0]
                        BLOCK 1 [source_file: expected0]
                            EXPR_RESULT 1 [source_file: expected0]
                                ASSIGN 1 [source_file: expected0]
                                    NAME z 1 [is_constant_name: 1] [source_file: expected0]
                                    VOID 1 [source_file: expected0]
                                        NUMBER 0.0 1 [source_file: expected0]
                            BREAK 1 [source_file: expected0]
                                LABEL_NAME JSCompiler_inline_label_f_0 1 [source_file: expected0]
                        BLOCK 1 [added_block: 1] [source_file: expected0]
                    EXPR_RESULT 1 [source_file: expected0]
                        ASSIGN 1 [source_file: expected0]
                            NAME z 1 [is_constant_name: 1] [source_file: expected0]
                            VOID 1 [source_file: expected0]
                                NUMBER 0.0 1 [source_file: expected0]


Actual tree:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
        VAR 1 [source_file: testcode]
            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
        BLOCK 1 [source_file: testcode]
            LABEL 1 [source_file: testcode]
                LABEL_NAME JSCompiler_inline_label_f_1 1 [source_file: testcode]
                BLOCK 1 [source_file: testcode]
                    IF 1 [source_file: testcode]
                        TRUE 1 [source_file: testcode]
                        BLOCK 1 [source_file: testcode]
                            EXPR_RESULT 1 [source_file: testcode]
                                ASSIGN 1 [source_file: testcode]
                                    NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
                                    VOID 1 [source_file: testcode]
                                        NUMBER 0.0 1 [source_file: testcode]
                            BREAK 1 [source_file: testcode]
                                LABEL_NAME JSCompiler_inline_label_f_1 1 [source_file: testcode]
                        BLOCK 1 [added_block: 1] [source_file: testcode]
                    EXPR_RESULT 1 [source_file: testcode]
                        ASSIGN 1 [source_file: testcode]
                            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
                            VOID 1 [source_file: testcode]
                                NUMBER 0.0 1 [source_file: testcode]
        VAR 1 [source_file: testcode]
            NAME z 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]
                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]


Expected subtree: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
    VAR 1 [source_file: expected0]
        NAME z 1 [is_constant_name: 1] [source_file: expected0]
    BLOCK 1 [source_file: expected0]
        LABEL 1 [source_file: expected0]
            LABEL_NAME JSCompiler_inline_label_f_0 1 [source_file: expected0]
            BLOCK 1 [source_file: expected0]
                IF 1 [source_file: expected0]
                    TRUE 1 [source_file: expected0]
                    BLOCK 1 [source_file: expected0]
                        EXPR_RESULT 1 [source_file: expected0]
                            ASSIGN 1 [source_file: expected0]
                                NAME z 1 [is_constant_name: 1] [source_file: expected0]
                                VOID 1 [source_file: expected0]
                                    NUMBER 0.0 1 [source_file: expected0]
                        BREAK 1 [source_file: expected0]
                            LABEL_NAME JSCompiler_inline_label_f_0 1 [source_file: expected0]
                    BLOCK 1 [added_block: 1] [source_file: expected0]
                EXPR_RESULT 1 [source_file: expected0]
                    ASSIGN 1 [source_file: expected0]
                        NAME z 1 [is_constant_name: 1] [source_file: expected0]
                        VOID 1 [source_file: expected0]
                            NUMBER 0.0 1 [source_file: expected0]


Actual subtree: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
    VAR 1 [source_file: testcode]
        NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
    BLOCK 1 [source_file: testcode]
        LABEL 1 [source_file: testcode]
            LABEL_NAME JSCompiler_inline_label_f_1 1 [source_file: testcode]
            BLOCK 1 [source_file: testcode]
                IF 1 [source_file: testcode]
                    TRUE 1 [source_file: testcode]
                    BLOCK 1 [source_file: testcode]
                        EXPR_RESULT 1 [source_file: testcode]
                            ASSIGN 1 [source_file: testcode]
                                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
                                VOID 1 [source_file: testcode]
                                    NUMBER 0.0 1 [source_file: testcode]
                        BREAK 1 [source_file: testcode]
                            LABEL_NAME JSCompiler_inline_label_f_1 1 [source_file: testcode]
                    BLOCK 1 [added_block: 1] [source_file: testcode]
                EXPR_RESULT 1 [source_file: testcode]
                    ASSIGN 1 [source_file: testcode]
                        NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
                        VOID 1 [source_file: testcode]
                            NUMBER 0.0 1 [source_file: testcode]
    VAR 1 [source_file: testcode]
        NAME z 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]
            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineFunctionsTest.testComplexInlineVars1(InlineFunctionsTest.java:1320)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testComplexInlineVars2" time="0.004">
    <failure message="&#xa;Expected: var z;JSCompiler_inline_label_f_0:{if(true){z=void 0;break JSCompiler_inline_label_f_0}else{z=void 0;break JSCompiler_inline_label_f_0}z=void 0}&#xa;Result:   var JSCompiler_inline_result$$0;JSCompiler_inline_label_f_1:{if(true){JSCompiler_inline_result$$0=void 0;break JSCompiler_inline_label_f_1}else{JSCompiler_inline_result$$0=void 0;break JSCompiler_inline_label_f_1}JSCompiler_inline_result$$0=void 0}var z=JSCompiler_inline_result$$0&#xa;Node tree inequality:&#xa;Expected tree:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;        VAR 1 [source_file: expected0]&#xa;            NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;        BLOCK 1 [source_file: expected0]&#xa;            LABEL 1 [source_file: expected0]&#xa;                LABEL_NAME JSCompiler_inline_label_f_0 1 [source_file: expected0]&#xa;                BLOCK 1 [source_file: expected0]&#xa;                    IF 1 [source_file: expected0]&#xa;                        TRUE 1 [source_file: expected0]&#xa;                        BLOCK 1 [source_file: expected0]&#xa;                            EXPR_RESULT 1 [source_file: expected0]&#xa;                                ASSIGN 1 [source_file: expected0]&#xa;                                    NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;                                    VOID 1 [source_file: expected0]&#xa;                                        NUMBER 0.0 1 [source_file: expected0]&#xa;                            BREAK 1 [source_file: expected0]&#xa;                                LABEL_NAME JSCompiler_inline_label_f_0 1 [source_file: expected0]&#xa;                        BLOCK 1 [source_file: expected0]&#xa;                            EXPR_RESULT 1 [source_file: expected0]&#xa;                                ASSIGN 1 [source_file: expected0]&#xa;                                    NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;                                    VOID 1 [source_file: expected0]&#xa;                                        NUMBER 0.0 1 [source_file: expected0]&#xa;                            BREAK 1 [source_file: expected0]&#xa;                                LABEL_NAME JSCompiler_inline_label_f_0 1 [source_file: expected0]&#xa;                    EXPR_RESULT 1 [source_file: expected0]&#xa;                        ASSIGN 1 [source_file: expected0]&#xa;                            NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;                            VOID 1 [source_file: expected0]&#xa;                                NUMBER 0.0 1 [source_file: expected0]&#xa;&#xa;&#xa;Actual tree:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;        BLOCK 1 [source_file: testcode]&#xa;            LABEL 1 [source_file: testcode]&#xa;                LABEL_NAME JSCompiler_inline_label_f_1 1 [source_file: testcode]&#xa;                BLOCK 1 [source_file: testcode]&#xa;                    IF 1 [source_file: testcode]&#xa;                        TRUE 1 [source_file: testcode]&#xa;                        BLOCK 1 [source_file: testcode]&#xa;                            EXPR_RESULT 1 [source_file: testcode]&#xa;                                ASSIGN 1 [source_file: testcode]&#xa;                                    NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;                                    VOID 1 [source_file: testcode]&#xa;                                        NUMBER 0.0 1 [source_file: testcode]&#xa;                            BREAK 1 [source_file: testcode]&#xa;                                LABEL_NAME JSCompiler_inline_label_f_1 1 [source_file: testcode]&#xa;                        BLOCK 1 [added_block: 1] [source_file: testcode]&#xa;                            EXPR_RESULT 1 [source_file: testcode]&#xa;                                ASSIGN 1 [source_file: testcode]&#xa;                                    NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;                                    VOID 1 [source_file: testcode]&#xa;                                        NUMBER 0.0 1 [source_file: testcode]&#xa;                            BREAK 1 [source_file: testcode]&#xa;                                LABEL_NAME JSCompiler_inline_label_f_1 1 [source_file: testcode]&#xa;                    EXPR_RESULT 1 [source_file: testcode]&#xa;                        ASSIGN 1 [source_file: testcode]&#xa;                            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;                            VOID 1 [source_file: testcode]&#xa;                                NUMBER 0.0 1 [source_file: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME z 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]&#xa;                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;&#xa;&#xa;Expected subtree: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;    VAR 1 [source_file: expected0]&#xa;        NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;    BLOCK 1 [source_file: expected0]&#xa;        LABEL 1 [source_file: expected0]&#xa;            LABEL_NAME JSCompiler_inline_label_f_0 1 [source_file: expected0]&#xa;            BLOCK 1 [source_file: expected0]&#xa;                IF 1 [source_file: expected0]&#xa;                    TRUE 1 [source_file: expected0]&#xa;                    BLOCK 1 [source_file: expected0]&#xa;                        EXPR_RESULT 1 [source_file: expected0]&#xa;                            ASSIGN 1 [source_file: expected0]&#xa;                                NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;                                VOID 1 [source_file: expected0]&#xa;                                    NUMBER 0.0 1 [source_file: expected0]&#xa;                        BREAK 1 [source_file: expected0]&#xa;                            LABEL_NAME JSCompiler_inline_label_f_0 1 [source_file: expected0]&#xa;                    BLOCK 1 [source_file: expected0]&#xa;                        EXPR_RESULT 1 [source_file: expected0]&#xa;                            ASSIGN 1 [source_file: expected0]&#xa;                                NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;                                VOID 1 [source_file: expected0]&#xa;                                    NUMBER 0.0 1 [source_file: expected0]&#xa;                        BREAK 1 [source_file: expected0]&#xa;                            LABEL_NAME JSCompiler_inline_label_f_0 1 [source_file: expected0]&#xa;                EXPR_RESULT 1 [source_file: expected0]&#xa;                    ASSIGN 1 [source_file: expected0]&#xa;                        NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;                        VOID 1 [source_file: expected0]&#xa;                            NUMBER 0.0 1 [source_file: expected0]&#xa;&#xa;&#xa;Actual subtree: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;    BLOCK 1 [source_file: testcode]&#xa;        LABEL 1 [source_file: testcode]&#xa;            LABEL_NAME JSCompiler_inline_label_f_1 1 [source_file: testcode]&#xa;            BLOCK 1 [source_file: testcode]&#xa;                IF 1 [source_file: testcode]&#xa;                    TRUE 1 [source_file: testcode]&#xa;                    BLOCK 1 [source_file: testcode]&#xa;                        EXPR_RESULT 1 [source_file: testcode]&#xa;                            ASSIGN 1 [source_file: testcode]&#xa;                                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;                                VOID 1 [source_file: testcode]&#xa;                                    NUMBER 0.0 1 [source_file: testcode]&#xa;                        BREAK 1 [source_file: testcode]&#xa;                            LABEL_NAME JSCompiler_inline_label_f_1 1 [source_file: testcode]&#xa;                    BLOCK 1 [added_block: 1] [source_file: testcode]&#xa;                        EXPR_RESULT 1 [source_file: testcode]&#xa;                            ASSIGN 1 [source_file: testcode]&#xa;                                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;                                VOID 1 [source_file: testcode]&#xa;                                    NUMBER 0.0 1 [source_file: testcode]&#xa;                        BREAK 1 [source_file: testcode]&#xa;                            LABEL_NAME JSCompiler_inline_label_f_1 1 [source_file: testcode]&#xa;                EXPR_RESULT 1 [source_file: testcode]&#xa;                    ASSIGN 1 [source_file: testcode]&#xa;                        NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;                        VOID 1 [source_file: testcode]&#xa;                            NUMBER 0.0 1 [source_file: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME z 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]&#xa;            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: var z;JSCompiler_inline_label_f_0:{if(true){z=void 0;break JSCompiler_inline_label_f_0}else{z=void 0;break JSCompiler_inline_label_f_0}z=void 0}
Result:   var JSCompiler_inline_result$$0;JSCompiler_inline_label_f_1:{if(true){JSCompiler_inline_result$$0=void 0;break JSCompiler_inline_label_f_1}else{JSCompiler_inline_result$$0=void 0;break JSCompiler_inline_label_f_1}JSCompiler_inline_result$$0=void 0}var z=JSCompiler_inline_result$$0
Node tree inequality:
Expected tree:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        VAR 1 [source_file: expected0]
            NAME z 1 [is_constant_name: 1] [source_file: expected0]
        BLOCK 1 [source_file: expected0]
            LABEL 1 [source_file: expected0]
                LABEL_NAME JSCompiler_inline_label_f_0 1 [source_file: expected0]
                BLOCK 1 [source_file: expected0]
                    IF 1 [source_file: expected0]
                        TRUE 1 [source_file: expected0]
                        BLOCK 1 [source_file: expected0]
                            EXPR_RESULT 1 [source_file: expected0]
                                ASSIGN 1 [source_file: expected0]
                                    NAME z 1 [is_constant_name: 1] [source_file: expected0]
                                    VOID 1 [source_file: expected0]
                                        NUMBER 0.0 1 [source_file: expected0]
                            BREAK 1 [source_file: expected0]
                                LABEL_NAME JSCompiler_inline_label_f_0 1 [source_file: expected0]
                        BLOCK 1 [source_file: expected0]
                            EXPR_RESULT 1 [source_file: expected0]
                                ASSIGN 1 [source_file: expected0]
                                    NAME z 1 [is_constant_name: 1] [source_file: expected0]
                                    VOID 1 [source_file: expected0]
                                        NUMBER 0.0 1 [source_file: expected0]
                            BREAK 1 [source_file: expected0]
                                LABEL_NAME JSCompiler_inline_label_f_0 1 [source_file: expected0]
                    EXPR_RESULT 1 [source_file: expected0]
                        ASSIGN 1 [source_file: expected0]
                            NAME z 1 [is_constant_name: 1] [source_file: expected0]
                            VOID 1 [source_file: expected0]
                                NUMBER 0.0 1 [source_file: expected0]


Actual tree:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
        VAR 1 [source_file: testcode]
            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
        BLOCK 1 [source_file: testcode]
            LABEL 1 [source_file: testcode]
                LABEL_NAME JSCompiler_inline_label_f_1 1 [source_file: testcode]
                BLOCK 1 [source_file: testcode]
                    IF 1 [source_file: testcode]
                        TRUE 1 [source_file: testcode]
                        BLOCK 1 [source_file: testcode]
                            EXPR_RESULT 1 [source_file: testcode]
                                ASSIGN 1 [source_file: testcode]
                                    NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
                                    VOID 1 [source_file: testcode]
                                        NUMBER 0.0 1 [source_file: testcode]
                            BREAK 1 [source_file: testcode]
                                LABEL_NAME JSCompiler_inline_label_f_1 1 [source_file: testcode]
                        BLOCK 1 [added_block: 1] [source_file: testcode]
                            EXPR_RESULT 1 [source_file: testcode]
                                ASSIGN 1 [source_file: testcode]
                                    NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
                                    VOID 1 [source_file: testcode]
                                        NUMBER 0.0 1 [source_file: testcode]
                            BREAK 1 [source_file: testcode]
                                LABEL_NAME JSCompiler_inline_label_f_1 1 [source_file: testcode]
                    EXPR_RESULT 1 [source_file: testcode]
                        ASSIGN 1 [source_file: testcode]
                            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
                            VOID 1 [source_file: testcode]
                                NUMBER 0.0 1 [source_file: testcode]
        VAR 1 [source_file: testcode]
            NAME z 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]
                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]


Expected subtree: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
    VAR 1 [source_file: expected0]
        NAME z 1 [is_constant_name: 1] [source_file: expected0]
    BLOCK 1 [source_file: expected0]
        LABEL 1 [source_file: expected0]
            LABEL_NAME JSCompiler_inline_label_f_0 1 [source_file: expected0]
            BLOCK 1 [source_file: expected0]
                IF 1 [source_file: expected0]
                    TRUE 1 [source_file: expected0]
                    BLOCK 1 [source_file: expected0]
                        EXPR_RESULT 1 [source_file: expected0]
                            ASSIGN 1 [source_file: expected0]
                                NAME z 1 [is_constant_name: 1] [source_file: expected0]
                                VOID 1 [source_file: expected0]
                                    NUMBER 0.0 1 [source_file: expected0]
                        BREAK 1 [source_file: expected0]
                            LABEL_NAME JSCompiler_inline_label_f_0 1 [source_file: expected0]
                    BLOCK 1 [source_file: expected0]
                        EXPR_RESULT 1 [source_file: expected0]
                            ASSIGN 1 [source_file: expected0]
                                NAME z 1 [is_constant_name: 1] [source_file: expected0]
                                VOID 1 [source_file: expected0]
                                    NUMBER 0.0 1 [source_file: expected0]
                        BREAK 1 [source_file: expected0]
                            LABEL_NAME JSCompiler_inline_label_f_0 1 [source_file: expected0]
                EXPR_RESULT 1 [source_file: expected0]
                    ASSIGN 1 [source_file: expected0]
                        NAME z 1 [is_constant_name: 1] [source_file: expected0]
                        VOID 1 [source_file: expected0]
                            NUMBER 0.0 1 [source_file: expected0]


Actual subtree: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
    VAR 1 [source_file: testcode]
        NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
    BLOCK 1 [source_file: testcode]
        LABEL 1 [source_file: testcode]
            LABEL_NAME JSCompiler_inline_label_f_1 1 [source_file: testcode]
            BLOCK 1 [source_file: testcode]
                IF 1 [source_file: testcode]
                    TRUE 1 [source_file: testcode]
                    BLOCK 1 [source_file: testcode]
                        EXPR_RESULT 1 [source_file: testcode]
                            ASSIGN 1 [source_file: testcode]
                                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
                                VOID 1 [source_file: testcode]
                                    NUMBER 0.0 1 [source_file: testcode]
                        BREAK 1 [source_file: testcode]
                            LABEL_NAME JSCompiler_inline_label_f_1 1 [source_file: testcode]
                    BLOCK 1 [added_block: 1] [source_file: testcode]
                        EXPR_RESULT 1 [source_file: testcode]
                            ASSIGN 1 [source_file: testcode]
                                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
                                VOID 1 [source_file: testcode]
                                    NUMBER 0.0 1 [source_file: testcode]
                        BREAK 1 [source_file: testcode]
                            LABEL_NAME JSCompiler_inline_label_f_1 1 [source_file: testcode]
                EXPR_RESULT 1 [source_file: testcode]
                    ASSIGN 1 [source_file: testcode]
                        NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
                        VOID 1 [source_file: testcode]
                            NUMBER 0.0 1 [source_file: testcode]
    VAR 1 [source_file: testcode]
        NAME z 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]
            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineFunctionsTest.testComplexInlineVars2(InlineFunctionsTest.java:1326)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testComplexInlineVars3" time="0.004">
    <failure message="&#xa;Expected: var z;JSCompiler_inline_label_f_0:{if(true){z=1;break JSCompiler_inline_label_f_0}else{z=0;break JSCompiler_inline_label_f_0}z=void 0}&#xa;Result:   var JSCompiler_inline_result$$0;JSCompiler_inline_label_f_1:{if(true){JSCompiler_inline_result$$0=1;break JSCompiler_inline_label_f_1}else{JSCompiler_inline_result$$0=0;break JSCompiler_inline_label_f_1}JSCompiler_inline_result$$0=void 0}var z=JSCompiler_inline_result$$0&#xa;Node tree inequality:&#xa;Expected tree:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;        VAR 1 [source_file: expected0]&#xa;            NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;        BLOCK 1 [source_file: expected0]&#xa;            LABEL 1 [source_file: expected0]&#xa;                LABEL_NAME JSCompiler_inline_label_f_0 1 [source_file: expected0]&#xa;                BLOCK 1 [source_file: expected0]&#xa;                    IF 1 [source_file: expected0]&#xa;                        TRUE 1 [source_file: expected0]&#xa;                        BLOCK 1 [source_file: expected0]&#xa;                            EXPR_RESULT 1 [source_file: expected0]&#xa;                                ASSIGN 1 [source_file: expected0]&#xa;                                    NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;                                    NUMBER 1.0 1 [source_file: expected0]&#xa;                            BREAK 1 [source_file: expected0]&#xa;                                LABEL_NAME JSCompiler_inline_label_f_0 1 [source_file: expected0]&#xa;                        BLOCK 1 [source_file: expected0]&#xa;                            EXPR_RESULT 1 [source_file: expected0]&#xa;                                ASSIGN 1 [source_file: expected0]&#xa;                                    NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;                                    NUMBER 0.0 1 [source_file: expected0]&#xa;                            BREAK 1 [source_file: expected0]&#xa;                                LABEL_NAME JSCompiler_inline_label_f_0 1 [source_file: expected0]&#xa;                    EXPR_RESULT 1 [source_file: expected0]&#xa;                        ASSIGN 1 [source_file: expected0]&#xa;                            NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;                            VOID 1 [source_file: expected0]&#xa;                                NUMBER 0.0 1 [source_file: expected0]&#xa;&#xa;&#xa;Actual tree:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;        BLOCK 1 [source_file: testcode]&#xa;            LABEL 1 [source_file: testcode]&#xa;                LABEL_NAME JSCompiler_inline_label_f_1 1 [source_file: testcode]&#xa;                BLOCK 1 [source_file: testcode]&#xa;                    IF 1 [source_file: testcode]&#xa;                        TRUE 1 [source_file: testcode]&#xa;                        BLOCK 1 [source_file: testcode]&#xa;                            EXPR_RESULT 1 [source_file: testcode]&#xa;                                ASSIGN 1 [source_file: testcode]&#xa;                                    NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;                                    NUMBER 1.0 1 [source_file: testcode]&#xa;                            BREAK 1 [source_file: testcode]&#xa;                                LABEL_NAME JSCompiler_inline_label_f_1 1 [source_file: testcode]&#xa;                        BLOCK 1 [added_block: 1] [source_file: testcode]&#xa;                            EXPR_RESULT 1 [source_file: testcode]&#xa;                                ASSIGN 1 [source_file: testcode]&#xa;                                    NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;                                    NUMBER 0.0 1 [source_file: testcode]&#xa;                            BREAK 1 [source_file: testcode]&#xa;                                LABEL_NAME JSCompiler_inline_label_f_1 1 [source_file: testcode]&#xa;                    EXPR_RESULT 1 [source_file: testcode]&#xa;                        ASSIGN 1 [source_file: testcode]&#xa;                            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;                            VOID 1 [source_file: testcode]&#xa;                                NUMBER 0.0 1 [source_file: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME z 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]&#xa;                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;&#xa;&#xa;Expected subtree: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;    VAR 1 [source_file: expected0]&#xa;        NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;    BLOCK 1 [source_file: expected0]&#xa;        LABEL 1 [source_file: expected0]&#xa;            LABEL_NAME JSCompiler_inline_label_f_0 1 [source_file: expected0]&#xa;            BLOCK 1 [source_file: expected0]&#xa;                IF 1 [source_file: expected0]&#xa;                    TRUE 1 [source_file: expected0]&#xa;                    BLOCK 1 [source_file: expected0]&#xa;                        EXPR_RESULT 1 [source_file: expected0]&#xa;                            ASSIGN 1 [source_file: expected0]&#xa;                                NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;                                NUMBER 1.0 1 [source_file: expected0]&#xa;                        BREAK 1 [source_file: expected0]&#xa;                            LABEL_NAME JSCompiler_inline_label_f_0 1 [source_file: expected0]&#xa;                    BLOCK 1 [source_file: expected0]&#xa;                        EXPR_RESULT 1 [source_file: expected0]&#xa;                            ASSIGN 1 [source_file: expected0]&#xa;                                NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;                                NUMBER 0.0 1 [source_file: expected0]&#xa;                        BREAK 1 [source_file: expected0]&#xa;                            LABEL_NAME JSCompiler_inline_label_f_0 1 [source_file: expected0]&#xa;                EXPR_RESULT 1 [source_file: expected0]&#xa;                    ASSIGN 1 [source_file: expected0]&#xa;                        NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;                        VOID 1 [source_file: expected0]&#xa;                            NUMBER 0.0 1 [source_file: expected0]&#xa;&#xa;&#xa;Actual subtree: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;    BLOCK 1 [source_file: testcode]&#xa;        LABEL 1 [source_file: testcode]&#xa;            LABEL_NAME JSCompiler_inline_label_f_1 1 [source_file: testcode]&#xa;            BLOCK 1 [source_file: testcode]&#xa;                IF 1 [source_file: testcode]&#xa;                    TRUE 1 [source_file: testcode]&#xa;                    BLOCK 1 [source_file: testcode]&#xa;                        EXPR_RESULT 1 [source_file: testcode]&#xa;                            ASSIGN 1 [source_file: testcode]&#xa;                                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;                                NUMBER 1.0 1 [source_file: testcode]&#xa;                        BREAK 1 [source_file: testcode]&#xa;                            LABEL_NAME JSCompiler_inline_label_f_1 1 [source_file: testcode]&#xa;                    BLOCK 1 [added_block: 1] [source_file: testcode]&#xa;                        EXPR_RESULT 1 [source_file: testcode]&#xa;                            ASSIGN 1 [source_file: testcode]&#xa;                                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;                                NUMBER 0.0 1 [source_file: testcode]&#xa;                        BREAK 1 [source_file: testcode]&#xa;                            LABEL_NAME JSCompiler_inline_label_f_1 1 [source_file: testcode]&#xa;                EXPR_RESULT 1 [source_file: testcode]&#xa;                    ASSIGN 1 [source_file: testcode]&#xa;                        NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;                        VOID 1 [source_file: testcode]&#xa;                            NUMBER 0.0 1 [source_file: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME z 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]&#xa;            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: var z;JSCompiler_inline_label_f_0:{if(true){z=1;break JSCompiler_inline_label_f_0}else{z=0;break JSCompiler_inline_label_f_0}z=void 0}
Result:   var JSCompiler_inline_result$$0;JSCompiler_inline_label_f_1:{if(true){JSCompiler_inline_result$$0=1;break JSCompiler_inline_label_f_1}else{JSCompiler_inline_result$$0=0;break JSCompiler_inline_label_f_1}JSCompiler_inline_result$$0=void 0}var z=JSCompiler_inline_result$$0
Node tree inequality:
Expected tree:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        VAR 1 [source_file: expected0]
            NAME z 1 [is_constant_name: 1] [source_file: expected0]
        BLOCK 1 [source_file: expected0]
            LABEL 1 [source_file: expected0]
                LABEL_NAME JSCompiler_inline_label_f_0 1 [source_file: expected0]
                BLOCK 1 [source_file: expected0]
                    IF 1 [source_file: expected0]
                        TRUE 1 [source_file: expected0]
                        BLOCK 1 [source_file: expected0]
                            EXPR_RESULT 1 [source_file: expected0]
                                ASSIGN 1 [source_file: expected0]
                                    NAME z 1 [is_constant_name: 1] [source_file: expected0]
                                    NUMBER 1.0 1 [source_file: expected0]
                            BREAK 1 [source_file: expected0]
                                LABEL_NAME JSCompiler_inline_label_f_0 1 [source_file: expected0]
                        BLOCK 1 [source_file: expected0]
                            EXPR_RESULT 1 [source_file: expected0]
                                ASSIGN 1 [source_file: expected0]
                                    NAME z 1 [is_constant_name: 1] [source_file: expected0]
                                    NUMBER 0.0 1 [source_file: expected0]
                            BREAK 1 [source_file: expected0]
                                LABEL_NAME JSCompiler_inline_label_f_0 1 [source_file: expected0]
                    EXPR_RESULT 1 [source_file: expected0]
                        ASSIGN 1 [source_file: expected0]
                            NAME z 1 [is_constant_name: 1] [source_file: expected0]
                            VOID 1 [source_file: expected0]
                                NUMBER 0.0 1 [source_file: expected0]


Actual tree:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
        VAR 1 [source_file: testcode]
            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
        BLOCK 1 [source_file: testcode]
            LABEL 1 [source_file: testcode]
                LABEL_NAME JSCompiler_inline_label_f_1 1 [source_file: testcode]
                BLOCK 1 [source_file: testcode]
                    IF 1 [source_file: testcode]
                        TRUE 1 [source_file: testcode]
                        BLOCK 1 [source_file: testcode]
                            EXPR_RESULT 1 [source_file: testcode]
                                ASSIGN 1 [source_file: testcode]
                                    NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
                                    NUMBER 1.0 1 [source_file: testcode]
                            BREAK 1 [source_file: testcode]
                                LABEL_NAME JSCompiler_inline_label_f_1 1 [source_file: testcode]
                        BLOCK 1 [added_block: 1] [source_file: testcode]
                            EXPR_RESULT 1 [source_file: testcode]
                                ASSIGN 1 [source_file: testcode]
                                    NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
                                    NUMBER 0.0 1 [source_file: testcode]
                            BREAK 1 [source_file: testcode]
                                LABEL_NAME JSCompiler_inline_label_f_1 1 [source_file: testcode]
                    EXPR_RESULT 1 [source_file: testcode]
                        ASSIGN 1 [source_file: testcode]
                            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
                            VOID 1 [source_file: testcode]
                                NUMBER 0.0 1 [source_file: testcode]
        VAR 1 [source_file: testcode]
            NAME z 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]
                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]


Expected subtree: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
    VAR 1 [source_file: expected0]
        NAME z 1 [is_constant_name: 1] [source_file: expected0]
    BLOCK 1 [source_file: expected0]
        LABEL 1 [source_file: expected0]
            LABEL_NAME JSCompiler_inline_label_f_0 1 [source_file: expected0]
            BLOCK 1 [source_file: expected0]
                IF 1 [source_file: expected0]
                    TRUE 1 [source_file: expected0]
                    BLOCK 1 [source_file: expected0]
                        EXPR_RESULT 1 [source_file: expected0]
                            ASSIGN 1 [source_file: expected0]
                                NAME z 1 [is_constant_name: 1] [source_file: expected0]
                                NUMBER 1.0 1 [source_file: expected0]
                        BREAK 1 [source_file: expected0]
                            LABEL_NAME JSCompiler_inline_label_f_0 1 [source_file: expected0]
                    BLOCK 1 [source_file: expected0]
                        EXPR_RESULT 1 [source_file: expected0]
                            ASSIGN 1 [source_file: expected0]
                                NAME z 1 [is_constant_name: 1] [source_file: expected0]
                                NUMBER 0.0 1 [source_file: expected0]
                        BREAK 1 [source_file: expected0]
                            LABEL_NAME JSCompiler_inline_label_f_0 1 [source_file: expected0]
                EXPR_RESULT 1 [source_file: expected0]
                    ASSIGN 1 [source_file: expected0]
                        NAME z 1 [is_constant_name: 1] [source_file: expected0]
                        VOID 1 [source_file: expected0]
                            NUMBER 0.0 1 [source_file: expected0]


Actual subtree: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
    VAR 1 [source_file: testcode]
        NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
    BLOCK 1 [source_file: testcode]
        LABEL 1 [source_file: testcode]
            LABEL_NAME JSCompiler_inline_label_f_1 1 [source_file: testcode]
            BLOCK 1 [source_file: testcode]
                IF 1 [source_file: testcode]
                    TRUE 1 [source_file: testcode]
                    BLOCK 1 [source_file: testcode]
                        EXPR_RESULT 1 [source_file: testcode]
                            ASSIGN 1 [source_file: testcode]
                                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
                                NUMBER 1.0 1 [source_file: testcode]
                        BREAK 1 [source_file: testcode]
                            LABEL_NAME JSCompiler_inline_label_f_1 1 [source_file: testcode]
                    BLOCK 1 [added_block: 1] [source_file: testcode]
                        EXPR_RESULT 1 [source_file: testcode]
                            ASSIGN 1 [source_file: testcode]
                                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
                                NUMBER 0.0 1 [source_file: testcode]
                        BREAK 1 [source_file: testcode]
                            LABEL_NAME JSCompiler_inline_label_f_1 1 [source_file: testcode]
                EXPR_RESULT 1 [source_file: testcode]
                    ASSIGN 1 [source_file: testcode]
                        NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
                        VOID 1 [source_file: testcode]
                            NUMBER 0.0 1 [source_file: testcode]
    VAR 1 [source_file: testcode]
        NAME z 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]
            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineFunctionsTest.testComplexInlineVars3(InlineFunctionsTest.java:1334)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testComplexInlineVars4" time="0.003">
    <failure message="&#xa;Expected: var z;a(1);z=void 0&#xa;Result:   var JSCompiler_inline_result$$0;a(1);JSCompiler_inline_result$$0=void 0;var z=JSCompiler_inline_result$$0&#xa;Node tree inequality:&#xa;Expected tree:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;        VAR 1 [source_file: expected0]&#xa;            NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;        BLOCK 1 [source_file: expected0]&#xa;            EXPR_RESULT 1 [source_file: expected0]&#xa;                CALL 1 [free_call: 1] [source_file: expected0]&#xa;                    NAME a 1 [is_constant_name: 1] [source_file: expected0]&#xa;                    NUMBER 1.0 1 [source_file: expected0]&#xa;            EXPR_RESULT 1 [source_file: expected0]&#xa;                ASSIGN 1 [source_file: expected0]&#xa;                    NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;                    VOID 1 [source_file: expected0]&#xa;                        NUMBER 0.0 1 [source_file: expected0]&#xa;&#xa;&#xa;Actual tree:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;        BLOCK 1 [source_file: testcode]&#xa;            EXPR_RESULT 1 [source_file: testcode]&#xa;                CALL 1 [free_call: 1] [source_file: testcode]&#xa;                    NAME a 1 [is_constant_name: 1] [source_file: testcode]&#xa;                    NUMBER 1.0 1 [source_file: testcode]&#xa;            EXPR_RESULT 1 [source_file: testcode]&#xa;                ASSIGN 1 [source_file: testcode]&#xa;                    NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;                    VOID 1 [source_file: testcode]&#xa;                        NUMBER 0.0 1 [source_file: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME z 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]&#xa;                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;&#xa;&#xa;Expected subtree: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;    VAR 1 [source_file: expected0]&#xa;        NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;    BLOCK 1 [source_file: expected0]&#xa;        EXPR_RESULT 1 [source_file: expected0]&#xa;            CALL 1 [free_call: 1] [source_file: expected0]&#xa;                NAME a 1 [is_constant_name: 1] [source_file: expected0]&#xa;                NUMBER 1.0 1 [source_file: expected0]&#xa;        EXPR_RESULT 1 [source_file: expected0]&#xa;            ASSIGN 1 [source_file: expected0]&#xa;                NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;                VOID 1 [source_file: expected0]&#xa;                    NUMBER 0.0 1 [source_file: expected0]&#xa;&#xa;&#xa;Actual subtree: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;    BLOCK 1 [source_file: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            CALL 1 [free_call: 1] [source_file: testcode]&#xa;                NAME a 1 [is_constant_name: 1] [source_file: testcode]&#xa;                NUMBER 1.0 1 [source_file: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            ASSIGN 1 [source_file: testcode]&#xa;                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;                VOID 1 [source_file: testcode]&#xa;                    NUMBER 0.0 1 [source_file: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME z 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]&#xa;            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: var z;a(1);z=void 0
Result:   var JSCompiler_inline_result$$0;a(1);JSCompiler_inline_result$$0=void 0;var z=JSCompiler_inline_result$$0
Node tree inequality:
Expected tree:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        VAR 1 [source_file: expected0]
            NAME z 1 [is_constant_name: 1] [source_file: expected0]
        BLOCK 1 [source_file: expected0]
            EXPR_RESULT 1 [source_file: expected0]
                CALL 1 [free_call: 1] [source_file: expected0]
                    NAME a 1 [is_constant_name: 1] [source_file: expected0]
                    NUMBER 1.0 1 [source_file: expected0]
            EXPR_RESULT 1 [source_file: expected0]
                ASSIGN 1 [source_file: expected0]
                    NAME z 1 [is_constant_name: 1] [source_file: expected0]
                    VOID 1 [source_file: expected0]
                        NUMBER 0.0 1 [source_file: expected0]


Actual tree:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
        VAR 1 [source_file: testcode]
            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
        BLOCK 1 [source_file: testcode]
            EXPR_RESULT 1 [source_file: testcode]
                CALL 1 [free_call: 1] [source_file: testcode]
                    NAME a 1 [is_constant_name: 1] [source_file: testcode]
                    NUMBER 1.0 1 [source_file: testcode]
            EXPR_RESULT 1 [source_file: testcode]
                ASSIGN 1 [source_file: testcode]
                    NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
                    VOID 1 [source_file: testcode]
                        NUMBER 0.0 1 [source_file: testcode]
        VAR 1 [source_file: testcode]
            NAME z 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]
                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]


Expected subtree: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
    VAR 1 [source_file: expected0]
        NAME z 1 [is_constant_name: 1] [source_file: expected0]
    BLOCK 1 [source_file: expected0]
        EXPR_RESULT 1 [source_file: expected0]
            CALL 1 [free_call: 1] [source_file: expected0]
                NAME a 1 [is_constant_name: 1] [source_file: expected0]
                NUMBER 1.0 1 [source_file: expected0]
        EXPR_RESULT 1 [source_file: expected0]
            ASSIGN 1 [source_file: expected0]
                NAME z 1 [is_constant_name: 1] [source_file: expected0]
                VOID 1 [source_file: expected0]
                    NUMBER 0.0 1 [source_file: expected0]


Actual subtree: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
    VAR 1 [source_file: testcode]
        NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
    BLOCK 1 [source_file: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            CALL 1 [free_call: 1] [source_file: testcode]
                NAME a 1 [is_constant_name: 1] [source_file: testcode]
                NUMBER 1.0 1 [source_file: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            ASSIGN 1 [source_file: testcode]
                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
                VOID 1 [source_file: testcode]
                    NUMBER 0.0 1 [source_file: testcode]
    VAR 1 [source_file: testcode]
        NAME z 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]
            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineFunctionsTest.testComplexInlineVars4(InlineFunctionsTest.java:1342)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testComplexInlineVars5" time="0.005">
    <failure message="&#xa;Expected: var b=1;var z;a(1);z=void 0&#xa;Result:   var b=1;var JSCompiler_inline_result$$0;a(1);JSCompiler_inline_result$$0=void 0;var z=JSCompiler_inline_result$$0&#xa;Node tree inequality:&#xa;Expected tree:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;        VAR 1 [source_file: expected0]&#xa;            NAME b 1 [is_constant_name: 1] [source_file: expected0]&#xa;                NUMBER 1.0 1 [source_file: expected0]&#xa;        VAR 1 [source_file: expected0]&#xa;            NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;        BLOCK 1 [source_file: expected0]&#xa;            EXPR_RESULT 1 [source_file: expected0]&#xa;                CALL 1 [free_call: 1] [source_file: expected0]&#xa;                    NAME a 1 [is_constant_name: 1] [source_file: expected0]&#xa;                    NUMBER 1.0 1 [source_file: expected0]&#xa;            EXPR_RESULT 1 [source_file: expected0]&#xa;                ASSIGN 1 [source_file: expected0]&#xa;                    NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;                    VOID 1 [source_file: expected0]&#xa;                        NUMBER 0.0 1 [source_file: expected0]&#xa;&#xa;&#xa;Actual tree:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME b 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]&#xa;                NUMBER 1.0 1 [source_file: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;        BLOCK 1 [source_file: testcode]&#xa;            EXPR_RESULT 1 [source_file: testcode]&#xa;                CALL 1 [free_call: 1] [source_file: testcode]&#xa;                    NAME a 1 [is_constant_name: 1] [source_file: testcode]&#xa;                    NUMBER 1.0 1 [source_file: testcode]&#xa;            EXPR_RESULT 1 [source_file: testcode]&#xa;                ASSIGN 1 [source_file: testcode]&#xa;                    NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;                    VOID 1 [source_file: testcode]&#xa;                        NUMBER 0.0 1 [source_file: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME z 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]&#xa;                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;&#xa;&#xa;Expected subtree: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;    VAR 1 [source_file: expected0]&#xa;        NAME b 1 [is_constant_name: 1] [source_file: expected0]&#xa;            NUMBER 1.0 1 [source_file: expected0]&#xa;    VAR 1 [source_file: expected0]&#xa;        NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;    BLOCK 1 [source_file: expected0]&#xa;        EXPR_RESULT 1 [source_file: expected0]&#xa;            CALL 1 [free_call: 1] [source_file: expected0]&#xa;                NAME a 1 [is_constant_name: 1] [source_file: expected0]&#xa;                NUMBER 1.0 1 [source_file: expected0]&#xa;        EXPR_RESULT 1 [source_file: expected0]&#xa;            ASSIGN 1 [source_file: expected0]&#xa;                NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;                VOID 1 [source_file: expected0]&#xa;                    NUMBER 0.0 1 [source_file: expected0]&#xa;&#xa;&#xa;Actual subtree: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME b 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]&#xa;            NUMBER 1.0 1 [source_file: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;    BLOCK 1 [source_file: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            CALL 1 [free_call: 1] [source_file: testcode]&#xa;                NAME a 1 [is_constant_name: 1] [source_file: testcode]&#xa;                NUMBER 1.0 1 [source_file: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            ASSIGN 1 [source_file: testcode]&#xa;                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;                VOID 1 [source_file: testcode]&#xa;                    NUMBER 0.0 1 [source_file: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME z 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]&#xa;            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: var b=1;var z;a(1);z=void 0
Result:   var b=1;var JSCompiler_inline_result$$0;a(1);JSCompiler_inline_result$$0=void 0;var z=JSCompiler_inline_result$$0
Node tree inequality:
Expected tree:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        VAR 1 [source_file: expected0]
            NAME b 1 [is_constant_name: 1] [source_file: expected0]
                NUMBER 1.0 1 [source_file: expected0]
        VAR 1 [source_file: expected0]
            NAME z 1 [is_constant_name: 1] [source_file: expected0]
        BLOCK 1 [source_file: expected0]
            EXPR_RESULT 1 [source_file: expected0]
                CALL 1 [free_call: 1] [source_file: expected0]
                    NAME a 1 [is_constant_name: 1] [source_file: expected0]
                    NUMBER 1.0 1 [source_file: expected0]
            EXPR_RESULT 1 [source_file: expected0]
                ASSIGN 1 [source_file: expected0]
                    NAME z 1 [is_constant_name: 1] [source_file: expected0]
                    VOID 1 [source_file: expected0]
                        NUMBER 0.0 1 [source_file: expected0]


Actual tree:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
        VAR 1 [source_file: testcode]
            NAME b 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]
                NUMBER 1.0 1 [source_file: testcode]
        VAR 1 [source_file: testcode]
            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
        BLOCK 1 [source_file: testcode]
            EXPR_RESULT 1 [source_file: testcode]
                CALL 1 [free_call: 1] [source_file: testcode]
                    NAME a 1 [is_constant_name: 1] [source_file: testcode]
                    NUMBER 1.0 1 [source_file: testcode]
            EXPR_RESULT 1 [source_file: testcode]
                ASSIGN 1 [source_file: testcode]
                    NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
                    VOID 1 [source_file: testcode]
                        NUMBER 0.0 1 [source_file: testcode]
        VAR 1 [source_file: testcode]
            NAME z 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]
                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]


Expected subtree: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
    VAR 1 [source_file: expected0]
        NAME b 1 [is_constant_name: 1] [source_file: expected0]
            NUMBER 1.0 1 [source_file: expected0]
    VAR 1 [source_file: expected0]
        NAME z 1 [is_constant_name: 1] [source_file: expected0]
    BLOCK 1 [source_file: expected0]
        EXPR_RESULT 1 [source_file: expected0]
            CALL 1 [free_call: 1] [source_file: expected0]
                NAME a 1 [is_constant_name: 1] [source_file: expected0]
                NUMBER 1.0 1 [source_file: expected0]
        EXPR_RESULT 1 [source_file: expected0]
            ASSIGN 1 [source_file: expected0]
                NAME z 1 [is_constant_name: 1] [source_file: expected0]
                VOID 1 [source_file: expected0]
                    NUMBER 0.0 1 [source_file: expected0]


Actual subtree: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
    VAR 1 [source_file: testcode]
        NAME b 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]
            NUMBER 1.0 1 [source_file: testcode]
    VAR 1 [source_file: testcode]
        NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
    BLOCK 1 [source_file: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            CALL 1 [free_call: 1] [source_file: testcode]
                NAME a 1 [is_constant_name: 1] [source_file: testcode]
                NUMBER 1.0 1 [source_file: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            ASSIGN 1 [source_file: testcode]
                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
                VOID 1 [source_file: testcode]
                    NUMBER 0.0 1 [source_file: testcode]
    VAR 1 [source_file: testcode]
        NAME z 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]
            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineFunctionsTest.testComplexInlineVars5(InlineFunctionsTest.java:1347)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testComplexInlineVars6" time="0.004">
    <failure message="&#xa;Expected: var b=1;var z;if(1)b();z=true&#xa;Result:   var b=1;var JSCompiler_inline_result$$0;if(1)b();JSCompiler_inline_result$$0=true;var z=JSCompiler_inline_result$$0&#xa;Node tree inequality:&#xa;Expected tree:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;        VAR 1 [source_file: expected0]&#xa;            NAME b 1 [is_constant_name: 1] [source_file: expected0]&#xa;                NUMBER 1.0 1 [source_file: expected0]&#xa;        VAR 1 [source_file: expected0]&#xa;            NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;        BLOCK 1 [source_file: expected0]&#xa;            IF 1 [source_file: expected0]&#xa;                NUMBER 1.0 1 [source_file: expected0]&#xa;                BLOCK 1 [added_block: 1] [source_file: expected0]&#xa;                    EXPR_RESULT 1 [source_file: expected0]&#xa;                        CALL 1 [free_call: 1] [source_file: expected0]&#xa;                            NAME b 1 [is_constant_name: 1] [source_file: expected0]&#xa;            EXPR_RESULT 1 [source_file: expected0]&#xa;                ASSIGN 1 [source_file: expected0]&#xa;                    NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;                    TRUE 1 [source_file: expected0]&#xa;&#xa;&#xa;Actual tree:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME b 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]&#xa;                NUMBER 1.0 1 [source_file: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;        BLOCK 1 [source_file: testcode]&#xa;            IF 1 [source_file: testcode]&#xa;                NUMBER 1.0 1 [source_file: testcode]&#xa;                BLOCK 1 [added_block: 1] [source_file: testcode]&#xa;                    EXPR_RESULT 1 [source_file: testcode]&#xa;                        CALL 1 [free_call: 1] [source_file: testcode]&#xa;                            NAME b 1 [is_constant_name: 1] [source_file: testcode]&#xa;            EXPR_RESULT 1 [source_file: testcode]&#xa;                ASSIGN 1 [source_file: testcode]&#xa;                    NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;                    TRUE 1 [source_file: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME z 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]&#xa;                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;&#xa;&#xa;Expected subtree: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;    VAR 1 [source_file: expected0]&#xa;        NAME b 1 [is_constant_name: 1] [source_file: expected0]&#xa;            NUMBER 1.0 1 [source_file: expected0]&#xa;    VAR 1 [source_file: expected0]&#xa;        NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;    BLOCK 1 [source_file: expected0]&#xa;        IF 1 [source_file: expected0]&#xa;            NUMBER 1.0 1 [source_file: expected0]&#xa;            BLOCK 1 [added_block: 1] [source_file: expected0]&#xa;                EXPR_RESULT 1 [source_file: expected0]&#xa;                    CALL 1 [free_call: 1] [source_file: expected0]&#xa;                        NAME b 1 [is_constant_name: 1] [source_file: expected0]&#xa;        EXPR_RESULT 1 [source_file: expected0]&#xa;            ASSIGN 1 [source_file: expected0]&#xa;                NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;                TRUE 1 [source_file: expected0]&#xa;&#xa;&#xa;Actual subtree: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME b 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]&#xa;            NUMBER 1.0 1 [source_file: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;    BLOCK 1 [source_file: testcode]&#xa;        IF 1 [source_file: testcode]&#xa;            NUMBER 1.0 1 [source_file: testcode]&#xa;            BLOCK 1 [added_block: 1] [source_file: testcode]&#xa;                EXPR_RESULT 1 [source_file: testcode]&#xa;                    CALL 1 [free_call: 1] [source_file: testcode]&#xa;                        NAME b 1 [is_constant_name: 1] [source_file: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            ASSIGN 1 [source_file: testcode]&#xa;                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;                TRUE 1 [source_file: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME z 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]&#xa;            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: var b=1;var z;if(1)b();z=true
Result:   var b=1;var JSCompiler_inline_result$$0;if(1)b();JSCompiler_inline_result$$0=true;var z=JSCompiler_inline_result$$0
Node tree inequality:
Expected tree:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        VAR 1 [source_file: expected0]
            NAME b 1 [is_constant_name: 1] [source_file: expected0]
                NUMBER 1.0 1 [source_file: expected0]
        VAR 1 [source_file: expected0]
            NAME z 1 [is_constant_name: 1] [source_file: expected0]
        BLOCK 1 [source_file: expected0]
            IF 1 [source_file: expected0]
                NUMBER 1.0 1 [source_file: expected0]
                BLOCK 1 [added_block: 1] [source_file: expected0]
                    EXPR_RESULT 1 [source_file: expected0]
                        CALL 1 [free_call: 1] [source_file: expected0]
                            NAME b 1 [is_constant_name: 1] [source_file: expected0]
            EXPR_RESULT 1 [source_file: expected0]
                ASSIGN 1 [source_file: expected0]
                    NAME z 1 [is_constant_name: 1] [source_file: expected0]
                    TRUE 1 [source_file: expected0]


Actual tree:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
        VAR 1 [source_file: testcode]
            NAME b 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]
                NUMBER 1.0 1 [source_file: testcode]
        VAR 1 [source_file: testcode]
            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
        BLOCK 1 [source_file: testcode]
            IF 1 [source_file: testcode]
                NUMBER 1.0 1 [source_file: testcode]
                BLOCK 1 [added_block: 1] [source_file: testcode]
                    EXPR_RESULT 1 [source_file: testcode]
                        CALL 1 [free_call: 1] [source_file: testcode]
                            NAME b 1 [is_constant_name: 1] [source_file: testcode]
            EXPR_RESULT 1 [source_file: testcode]
                ASSIGN 1 [source_file: testcode]
                    NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
                    TRUE 1 [source_file: testcode]
        VAR 1 [source_file: testcode]
            NAME z 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]
                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]


Expected subtree: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
    VAR 1 [source_file: expected0]
        NAME b 1 [is_constant_name: 1] [source_file: expected0]
            NUMBER 1.0 1 [source_file: expected0]
    VAR 1 [source_file: expected0]
        NAME z 1 [is_constant_name: 1] [source_file: expected0]
    BLOCK 1 [source_file: expected0]
        IF 1 [source_file: expected0]
            NUMBER 1.0 1 [source_file: expected0]
            BLOCK 1 [added_block: 1] [source_file: expected0]
                EXPR_RESULT 1 [source_file: expected0]
                    CALL 1 [free_call: 1] [source_file: expected0]
                        NAME b 1 [is_constant_name: 1] [source_file: expected0]
        EXPR_RESULT 1 [source_file: expected0]
            ASSIGN 1 [source_file: expected0]
                NAME z 1 [is_constant_name: 1] [source_file: expected0]
                TRUE 1 [source_file: expected0]


Actual subtree: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
    VAR 1 [source_file: testcode]
        NAME b 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]
            NUMBER 1.0 1 [source_file: testcode]
    VAR 1 [source_file: testcode]
        NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
    BLOCK 1 [source_file: testcode]
        IF 1 [source_file: testcode]
            NUMBER 1.0 1 [source_file: testcode]
            BLOCK 1 [added_block: 1] [source_file: testcode]
                EXPR_RESULT 1 [source_file: testcode]
                    CALL 1 [free_call: 1] [source_file: testcode]
                        NAME b 1 [is_constant_name: 1] [source_file: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            ASSIGN 1 [source_file: testcode]
                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
                TRUE 1 [source_file: testcode]
    VAR 1 [source_file: testcode]
        NAME z 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]
            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineFunctionsTest.testComplexInlineVars6(InlineFunctionsTest.java:1352)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testComplexInlineVars7" time="0.005">
    <failure message="&#xa;Expected: var b=1;var z;JSCompiler_inline_label_f_2:{if(1){z=b();break JSCompiler_inline_label_f_2}else{z=true;break JSCompiler_inline_label_f_2}z=void 0}&#xa;Result:   var b=1;var JSCompiler_inline_result$$0;JSCompiler_inline_label_f_3:{if(1){JSCompiler_inline_result$$0=b();break JSCompiler_inline_label_f_3}else{JSCompiler_inline_result$$0=true;break JSCompiler_inline_label_f_3}JSCompiler_inline_result$$0=void 0}var z=JSCompiler_inline_result$$0&#xa;Node tree inequality:&#xa;Expected tree:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;        VAR 1 [source_file: expected0]&#xa;            NAME b 1 [is_constant_name: 1] [source_file: expected0]&#xa;                NUMBER 1.0 1 [source_file: expected0]&#xa;        VAR 1 [source_file: expected0]&#xa;            NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;        BLOCK 1 [source_file: expected0]&#xa;            LABEL 1 [source_file: expected0]&#xa;                LABEL_NAME JSCompiler_inline_label_f_2 1 [source_file: expected0]&#xa;                BLOCK 1 [source_file: expected0]&#xa;                    IF 1 [source_file: expected0]&#xa;                        NUMBER 1.0 1 [source_file: expected0]&#xa;                        BLOCK 1 [source_file: expected0]&#xa;                            EXPR_RESULT 1 [source_file: expected0]&#xa;                                ASSIGN 1 [source_file: expected0]&#xa;                                    NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;                                    CALL 1 [free_call: 1] [source_file: expected0]&#xa;                                        NAME b 1 [is_constant_name: 1] [source_file: expected0]&#xa;                            BREAK 1 [source_file: expected0]&#xa;                                LABEL_NAME JSCompiler_inline_label_f_2 1 [source_file: expected0]&#xa;                        BLOCK 1 [source_file: expected0]&#xa;                            EXPR_RESULT 1 [source_file: expected0]&#xa;                                ASSIGN 1 [source_file: expected0]&#xa;                                    NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;                                    TRUE 1 [source_file: expected0]&#xa;                            BREAK 1 [source_file: expected0]&#xa;                                LABEL_NAME JSCompiler_inline_label_f_2 1 [source_file: expected0]&#xa;                    EXPR_RESULT 1 [source_file: expected0]&#xa;                        ASSIGN 1 [source_file: expected0]&#xa;                            NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;                            VOID 1 [source_file: expected0]&#xa;                                NUMBER 0.0 1 [source_file: expected0]&#xa;&#xa;&#xa;Actual tree:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME b 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]&#xa;                NUMBER 1.0 1 [source_file: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;        BLOCK 1 [source_file: testcode]&#xa;            LABEL 1 [source_file: testcode]&#xa;                LABEL_NAME JSCompiler_inline_label_f_3 1 [source_file: testcode]&#xa;                BLOCK 1 [source_file: testcode]&#xa;                    IF 1 [source_file: testcode]&#xa;                        NUMBER 1.0 1 [source_file: testcode]&#xa;                        BLOCK 1 [added_block: 1] [source_file: testcode]&#xa;                            EXPR_RESULT 1 [source_file: testcode]&#xa;                                ASSIGN 1 [source_file: testcode]&#xa;                                    NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;                                    CALL 1 [free_call: 1] [source_file: testcode]&#xa;                                        NAME b 1 [is_constant_name: 1] [source_file: testcode]&#xa;                            BREAK 1 [source_file: testcode]&#xa;                                LABEL_NAME JSCompiler_inline_label_f_3 1 [source_file: testcode]&#xa;                        BLOCK 1 [added_block: 1] [source_file: testcode]&#xa;                            EXPR_RESULT 1 [source_file: testcode]&#xa;                                ASSIGN 1 [source_file: testcode]&#xa;                                    NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;                                    TRUE 1 [source_file: testcode]&#xa;                            BREAK 1 [source_file: testcode]&#xa;                                LABEL_NAME JSCompiler_inline_label_f_3 1 [source_file: testcode]&#xa;                    EXPR_RESULT 1 [source_file: testcode]&#xa;                        ASSIGN 1 [source_file: testcode]&#xa;                            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;                            VOID 1 [source_file: testcode]&#xa;                                NUMBER 0.0 1 [source_file: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME z 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]&#xa;                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;&#xa;&#xa;Expected subtree: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;    VAR 1 [source_file: expected0]&#xa;        NAME b 1 [is_constant_name: 1] [source_file: expected0]&#xa;            NUMBER 1.0 1 [source_file: expected0]&#xa;    VAR 1 [source_file: expected0]&#xa;        NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;    BLOCK 1 [source_file: expected0]&#xa;        LABEL 1 [source_file: expected0]&#xa;            LABEL_NAME JSCompiler_inline_label_f_2 1 [source_file: expected0]&#xa;            BLOCK 1 [source_file: expected0]&#xa;                IF 1 [source_file: expected0]&#xa;                    NUMBER 1.0 1 [source_file: expected0]&#xa;                    BLOCK 1 [source_file: expected0]&#xa;                        EXPR_RESULT 1 [source_file: expected0]&#xa;                            ASSIGN 1 [source_file: expected0]&#xa;                                NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;                                CALL 1 [free_call: 1] [source_file: expected0]&#xa;                                    NAME b 1 [is_constant_name: 1] [source_file: expected0]&#xa;                        BREAK 1 [source_file: expected0]&#xa;                            LABEL_NAME JSCompiler_inline_label_f_2 1 [source_file: expected0]&#xa;                    BLOCK 1 [source_file: expected0]&#xa;                        EXPR_RESULT 1 [source_file: expected0]&#xa;                            ASSIGN 1 [source_file: expected0]&#xa;                                NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;                                TRUE 1 [source_file: expected0]&#xa;                        BREAK 1 [source_file: expected0]&#xa;                            LABEL_NAME JSCompiler_inline_label_f_2 1 [source_file: expected0]&#xa;                EXPR_RESULT 1 [source_file: expected0]&#xa;                    ASSIGN 1 [source_file: expected0]&#xa;                        NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;                        VOID 1 [source_file: expected0]&#xa;                            NUMBER 0.0 1 [source_file: expected0]&#xa;&#xa;&#xa;Actual subtree: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME b 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]&#xa;            NUMBER 1.0 1 [source_file: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;    BLOCK 1 [source_file: testcode]&#xa;        LABEL 1 [source_file: testcode]&#xa;            LABEL_NAME JSCompiler_inline_label_f_3 1 [source_file: testcode]&#xa;            BLOCK 1 [source_file: testcode]&#xa;                IF 1 [source_file: testcode]&#xa;                    NUMBER 1.0 1 [source_file: testcode]&#xa;                    BLOCK 1 [added_block: 1] [source_file: testcode]&#xa;                        EXPR_RESULT 1 [source_file: testcode]&#xa;                            ASSIGN 1 [source_file: testcode]&#xa;                                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;                                CALL 1 [free_call: 1] [source_file: testcode]&#xa;                                    NAME b 1 [is_constant_name: 1] [source_file: testcode]&#xa;                        BREAK 1 [source_file: testcode]&#xa;                            LABEL_NAME JSCompiler_inline_label_f_3 1 [source_file: testcode]&#xa;                    BLOCK 1 [added_block: 1] [source_file: testcode]&#xa;                        EXPR_RESULT 1 [source_file: testcode]&#xa;                            ASSIGN 1 [source_file: testcode]&#xa;                                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;                                TRUE 1 [source_file: testcode]&#xa;                        BREAK 1 [source_file: testcode]&#xa;                            LABEL_NAME JSCompiler_inline_label_f_3 1 [source_file: testcode]&#xa;                EXPR_RESULT 1 [source_file: testcode]&#xa;                    ASSIGN 1 [source_file: testcode]&#xa;                        NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;                        VOID 1 [source_file: testcode]&#xa;                            NUMBER 0.0 1 [source_file: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME z 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]&#xa;            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: var b=1;var z;JSCompiler_inline_label_f_2:{if(1){z=b();break JSCompiler_inline_label_f_2}else{z=true;break JSCompiler_inline_label_f_2}z=void 0}
Result:   var b=1;var JSCompiler_inline_result$$0;JSCompiler_inline_label_f_3:{if(1){JSCompiler_inline_result$$0=b();break JSCompiler_inline_label_f_3}else{JSCompiler_inline_result$$0=true;break JSCompiler_inline_label_f_3}JSCompiler_inline_result$$0=void 0}var z=JSCompiler_inline_result$$0
Node tree inequality:
Expected tree:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        VAR 1 [source_file: expected0]
            NAME b 1 [is_constant_name: 1] [source_file: expected0]
                NUMBER 1.0 1 [source_file: expected0]
        VAR 1 [source_file: expected0]
            NAME z 1 [is_constant_name: 1] [source_file: expected0]
        BLOCK 1 [source_file: expected0]
            LABEL 1 [source_file: expected0]
                LABEL_NAME JSCompiler_inline_label_f_2 1 [source_file: expected0]
                BLOCK 1 [source_file: expected0]
                    IF 1 [source_file: expected0]
                        NUMBER 1.0 1 [source_file: expected0]
                        BLOCK 1 [source_file: expected0]
                            EXPR_RESULT 1 [source_file: expected0]
                                ASSIGN 1 [source_file: expected0]
                                    NAME z 1 [is_constant_name: 1] [source_file: expected0]
                                    CALL 1 [free_call: 1] [source_file: expected0]
                                        NAME b 1 [is_constant_name: 1] [source_file: expected0]
                            BREAK 1 [source_file: expected0]
                                LABEL_NAME JSCompiler_inline_label_f_2 1 [source_file: expected0]
                        BLOCK 1 [source_file: expected0]
                            EXPR_RESULT 1 [source_file: expected0]
                                ASSIGN 1 [source_file: expected0]
                                    NAME z 1 [is_constant_name: 1] [source_file: expected0]
                                    TRUE 1 [source_file: expected0]
                            BREAK 1 [source_file: expected0]
                                LABEL_NAME JSCompiler_inline_label_f_2 1 [source_file: expected0]
                    EXPR_RESULT 1 [source_file: expected0]
                        ASSIGN 1 [source_file: expected0]
                            NAME z 1 [is_constant_name: 1] [source_file: expected0]
                            VOID 1 [source_file: expected0]
                                NUMBER 0.0 1 [source_file: expected0]


Actual tree:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
        VAR 1 [source_file: testcode]
            NAME b 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]
                NUMBER 1.0 1 [source_file: testcode]
        VAR 1 [source_file: testcode]
            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
        BLOCK 1 [source_file: testcode]
            LABEL 1 [source_file: testcode]
                LABEL_NAME JSCompiler_inline_label_f_3 1 [source_file: testcode]
                BLOCK 1 [source_file: testcode]
                    IF 1 [source_file: testcode]
                        NUMBER 1.0 1 [source_file: testcode]
                        BLOCK 1 [added_block: 1] [source_file: testcode]
                            EXPR_RESULT 1 [source_file: testcode]
                                ASSIGN 1 [source_file: testcode]
                                    NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
                                    CALL 1 [free_call: 1] [source_file: testcode]
                                        NAME b 1 [is_constant_name: 1] [source_file: testcode]
                            BREAK 1 [source_file: testcode]
                                LABEL_NAME JSCompiler_inline_label_f_3 1 [source_file: testcode]
                        BLOCK 1 [added_block: 1] [source_file: testcode]
                            EXPR_RESULT 1 [source_file: testcode]
                                ASSIGN 1 [source_file: testcode]
                                    NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
                                    TRUE 1 [source_file: testcode]
                            BREAK 1 [source_file: testcode]
                                LABEL_NAME JSCompiler_inline_label_f_3 1 [source_file: testcode]
                    EXPR_RESULT 1 [source_file: testcode]
                        ASSIGN 1 [source_file: testcode]
                            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
                            VOID 1 [source_file: testcode]
                                NUMBER 0.0 1 [source_file: testcode]
        VAR 1 [source_file: testcode]
            NAME z 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]
                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]


Expected subtree: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
    VAR 1 [source_file: expected0]
        NAME b 1 [is_constant_name: 1] [source_file: expected0]
            NUMBER 1.0 1 [source_file: expected0]
    VAR 1 [source_file: expected0]
        NAME z 1 [is_constant_name: 1] [source_file: expected0]
    BLOCK 1 [source_file: expected0]
        LABEL 1 [source_file: expected0]
            LABEL_NAME JSCompiler_inline_label_f_2 1 [source_file: expected0]
            BLOCK 1 [source_file: expected0]
                IF 1 [source_file: expected0]
                    NUMBER 1.0 1 [source_file: expected0]
                    BLOCK 1 [source_file: expected0]
                        EXPR_RESULT 1 [source_file: expected0]
                            ASSIGN 1 [source_file: expected0]
                                NAME z 1 [is_constant_name: 1] [source_file: expected0]
                                CALL 1 [free_call: 1] [source_file: expected0]
                                    NAME b 1 [is_constant_name: 1] [source_file: expected0]
                        BREAK 1 [source_file: expected0]
                            LABEL_NAME JSCompiler_inline_label_f_2 1 [source_file: expected0]
                    BLOCK 1 [source_file: expected0]
                        EXPR_RESULT 1 [source_file: expected0]
                            ASSIGN 1 [source_file: expected0]
                                NAME z 1 [is_constant_name: 1] [source_file: expected0]
                                TRUE 1 [source_file: expected0]
                        BREAK 1 [source_file: expected0]
                            LABEL_NAME JSCompiler_inline_label_f_2 1 [source_file: expected0]
                EXPR_RESULT 1 [source_file: expected0]
                    ASSIGN 1 [source_file: expected0]
                        NAME z 1 [is_constant_name: 1] [source_file: expected0]
                        VOID 1 [source_file: expected0]
                            NUMBER 0.0 1 [source_file: expected0]


Actual subtree: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
    VAR 1 [source_file: testcode]
        NAME b 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]
            NUMBER 1.0 1 [source_file: testcode]
    VAR 1 [source_file: testcode]
        NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
    BLOCK 1 [source_file: testcode]
        LABEL 1 [source_file: testcode]
            LABEL_NAME JSCompiler_inline_label_f_3 1 [source_file: testcode]
            BLOCK 1 [source_file: testcode]
                IF 1 [source_file: testcode]
                    NUMBER 1.0 1 [source_file: testcode]
                    BLOCK 1 [added_block: 1] [source_file: testcode]
                        EXPR_RESULT 1 [source_file: testcode]
                            ASSIGN 1 [source_file: testcode]
                                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
                                CALL 1 [free_call: 1] [source_file: testcode]
                                    NAME b 1 [is_constant_name: 1] [source_file: testcode]
                        BREAK 1 [source_file: testcode]
                            LABEL_NAME JSCompiler_inline_label_f_3 1 [source_file: testcode]
                    BLOCK 1 [added_block: 1] [source_file: testcode]
                        EXPR_RESULT 1 [source_file: testcode]
                            ASSIGN 1 [source_file: testcode]
                                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
                                TRUE 1 [source_file: testcode]
                        BREAK 1 [source_file: testcode]
                            LABEL_NAME JSCompiler_inline_label_f_3 1 [source_file: testcode]
                EXPR_RESULT 1 [source_file: testcode]
                    ASSIGN 1 [source_file: testcode]
                        NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
                        VOID 1 [source_file: testcode]
                            NUMBER 0.0 1 [source_file: testcode]
    VAR 1 [source_file: testcode]
        NAME z 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]
            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineFunctionsTest.testComplexInlineVars7(InlineFunctionsTest.java:1357)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testComplexInlineVars8" time="0.006">
    <failure message="&#xa;Expected: var x;var z;a(1);z=void 0&#xa;Result:   var x;var JSCompiler_inline_result$$0;a(1);JSCompiler_inline_result$$0=void 0;var z=JSCompiler_inline_result$$0&#xa;Node tree inequality:&#xa;Expected tree:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;        VAR 1 [source_file: expected0]&#xa;            NAME x 1 [is_constant_name: 1] [source_file: expected0]&#xa;        VAR 1 [source_file: expected0]&#xa;            NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;        BLOCK 1 [source_file: expected0]&#xa;            EXPR_RESULT 1 [source_file: expected0]&#xa;                CALL 1 [free_call: 1] [source_file: expected0]&#xa;                    NAME a 1 [is_constant_name: 1] [source_file: expected0]&#xa;                    NUMBER 1.0 1 [source_file: expected0]&#xa;            EXPR_RESULT 1 [source_file: expected0]&#xa;                ASSIGN 1 [source_file: expected0]&#xa;                    NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;                    VOID 1 [source_file: expected0]&#xa;                        NUMBER 0.0 1 [source_file: expected0]&#xa;&#xa;&#xa;Actual tree:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME x 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;        BLOCK 1 [source_file: testcode]&#xa;            EXPR_RESULT 1 [source_file: testcode]&#xa;                CALL 1 [free_call: 1] [source_file: testcode]&#xa;                    NAME a 1 [is_constant_name: 1] [source_file: testcode]&#xa;                    NUMBER 1.0 1 [source_file: testcode]&#xa;            EXPR_RESULT 1 [source_file: testcode]&#xa;                ASSIGN 1 [source_file: testcode]&#xa;                    NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;                    VOID 1 [source_file: testcode]&#xa;                        NUMBER 0.0 1 [source_file: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME z 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]&#xa;                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;&#xa;&#xa;Expected subtree: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;    VAR 1 [source_file: expected0]&#xa;        NAME x 1 [is_constant_name: 1] [source_file: expected0]&#xa;    VAR 1 [source_file: expected0]&#xa;        NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;    BLOCK 1 [source_file: expected0]&#xa;        EXPR_RESULT 1 [source_file: expected0]&#xa;            CALL 1 [free_call: 1] [source_file: expected0]&#xa;                NAME a 1 [is_constant_name: 1] [source_file: expected0]&#xa;                NUMBER 1.0 1 [source_file: expected0]&#xa;        EXPR_RESULT 1 [source_file: expected0]&#xa;            ASSIGN 1 [source_file: expected0]&#xa;                NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;                VOID 1 [source_file: expected0]&#xa;                    NUMBER 0.0 1 [source_file: expected0]&#xa;&#xa;&#xa;Actual subtree: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME x 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;    BLOCK 1 [source_file: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            CALL 1 [free_call: 1] [source_file: testcode]&#xa;                NAME a 1 [is_constant_name: 1] [source_file: testcode]&#xa;                NUMBER 1.0 1 [source_file: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            ASSIGN 1 [source_file: testcode]&#xa;                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;                VOID 1 [source_file: testcode]&#xa;                    NUMBER 0.0 1 [source_file: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME z 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]&#xa;            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: var x;var z;a(1);z=void 0
Result:   var x;var JSCompiler_inline_result$$0;a(1);JSCompiler_inline_result$$0=void 0;var z=JSCompiler_inline_result$$0
Node tree inequality:
Expected tree:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        VAR 1 [source_file: expected0]
            NAME x 1 [is_constant_name: 1] [source_file: expected0]
        VAR 1 [source_file: expected0]
            NAME z 1 [is_constant_name: 1] [source_file: expected0]
        BLOCK 1 [source_file: expected0]
            EXPR_RESULT 1 [source_file: expected0]
                CALL 1 [free_call: 1] [source_file: expected0]
                    NAME a 1 [is_constant_name: 1] [source_file: expected0]
                    NUMBER 1.0 1 [source_file: expected0]
            EXPR_RESULT 1 [source_file: expected0]
                ASSIGN 1 [source_file: expected0]
                    NAME z 1 [is_constant_name: 1] [source_file: expected0]
                    VOID 1 [source_file: expected0]
                        NUMBER 0.0 1 [source_file: expected0]


Actual tree:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
        VAR 1 [source_file: testcode]
            NAME x 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]
        VAR 1 [source_file: testcode]
            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
        BLOCK 1 [source_file: testcode]
            EXPR_RESULT 1 [source_file: testcode]
                CALL 1 [free_call: 1] [source_file: testcode]
                    NAME a 1 [is_constant_name: 1] [source_file: testcode]
                    NUMBER 1.0 1 [source_file: testcode]
            EXPR_RESULT 1 [source_file: testcode]
                ASSIGN 1 [source_file: testcode]
                    NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
                    VOID 1 [source_file: testcode]
                        NUMBER 0.0 1 [source_file: testcode]
        VAR 1 [source_file: testcode]
            NAME z 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]
                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]


Expected subtree: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
    VAR 1 [source_file: expected0]
        NAME x 1 [is_constant_name: 1] [source_file: expected0]
    VAR 1 [source_file: expected0]
        NAME z 1 [is_constant_name: 1] [source_file: expected0]
    BLOCK 1 [source_file: expected0]
        EXPR_RESULT 1 [source_file: expected0]
            CALL 1 [free_call: 1] [source_file: expected0]
                NAME a 1 [is_constant_name: 1] [source_file: expected0]
                NUMBER 1.0 1 [source_file: expected0]
        EXPR_RESULT 1 [source_file: expected0]
            ASSIGN 1 [source_file: expected0]
                NAME z 1 [is_constant_name: 1] [source_file: expected0]
                VOID 1 [source_file: expected0]
                    NUMBER 0.0 1 [source_file: expected0]


Actual subtree: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
    VAR 1 [source_file: testcode]
        NAME x 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]
    VAR 1 [source_file: testcode]
        NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
    BLOCK 1 [source_file: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            CALL 1 [free_call: 1] [source_file: testcode]
                NAME a 1 [is_constant_name: 1] [source_file: testcode]
                NUMBER 1.0 1 [source_file: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            ASSIGN 1 [source_file: testcode]
                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
                VOID 1 [source_file: testcode]
                    NUMBER 0.0 1 [source_file: testcode]
    VAR 1 [source_file: testcode]
        NAME z 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]
            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineFunctionsTest.testComplexInlineVars8(InlineFunctionsTest.java:1367)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testComplexInlineVars9" time="0.004">
    <failure message="&#xa;Expected: var x;var z;a(1);z=void 0;var y&#xa;Result:   var x;var JSCompiler_inline_result$$0;a(1);JSCompiler_inline_result$$0=void 0;var z=JSCompiler_inline_result$$0;var y&#xa;Node tree inequality:&#xa;Expected tree:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;        VAR 1 [source_file: expected0]&#xa;            NAME x 1 [is_constant_name: 1] [source_file: expected0]&#xa;        VAR 1 [source_file: expected0]&#xa;            NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;        BLOCK 1 [source_file: expected0]&#xa;            EXPR_RESULT 1 [source_file: expected0]&#xa;                CALL 1 [free_call: 1] [source_file: expected0]&#xa;                    NAME a 1 [is_constant_name: 1] [source_file: expected0]&#xa;                    NUMBER 1.0 1 [source_file: expected0]&#xa;            EXPR_RESULT 1 [source_file: expected0]&#xa;                ASSIGN 1 [source_file: expected0]&#xa;                    NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;                    VOID 1 [source_file: expected0]&#xa;                        NUMBER 0.0 1 [source_file: expected0]&#xa;        VAR 1 [source_file: expected0]&#xa;            NAME y 1 [is_constant_name: 1] [source_file: expected0]&#xa;&#xa;&#xa;Actual tree:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME x 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;        BLOCK 1 [source_file: testcode]&#xa;            EXPR_RESULT 1 [source_file: testcode]&#xa;                CALL 1 [free_call: 1] [source_file: testcode]&#xa;                    NAME a 1 [is_constant_name: 1] [source_file: testcode]&#xa;                    NUMBER 1.0 1 [source_file: testcode]&#xa;            EXPR_RESULT 1 [source_file: testcode]&#xa;                ASSIGN 1 [source_file: testcode]&#xa;                    NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;                    VOID 1 [source_file: testcode]&#xa;                        NUMBER 0.0 1 [source_file: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME z 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]&#xa;                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME y 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]&#xa;&#xa;&#xa;Expected subtree: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;    VAR 1 [source_file: expected0]&#xa;        NAME x 1 [is_constant_name: 1] [source_file: expected0]&#xa;    VAR 1 [source_file: expected0]&#xa;        NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;    BLOCK 1 [source_file: expected0]&#xa;        EXPR_RESULT 1 [source_file: expected0]&#xa;            CALL 1 [free_call: 1] [source_file: expected0]&#xa;                NAME a 1 [is_constant_name: 1] [source_file: expected0]&#xa;                NUMBER 1.0 1 [source_file: expected0]&#xa;        EXPR_RESULT 1 [source_file: expected0]&#xa;            ASSIGN 1 [source_file: expected0]&#xa;                NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;                VOID 1 [source_file: expected0]&#xa;                    NUMBER 0.0 1 [source_file: expected0]&#xa;    VAR 1 [source_file: expected0]&#xa;        NAME y 1 [is_constant_name: 1] [source_file: expected0]&#xa;&#xa;&#xa;Actual subtree: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME x 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;    BLOCK 1 [source_file: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            CALL 1 [free_call: 1] [source_file: testcode]&#xa;                NAME a 1 [is_constant_name: 1] [source_file: testcode]&#xa;                NUMBER 1.0 1 [source_file: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            ASSIGN 1 [source_file: testcode]&#xa;                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;                VOID 1 [source_file: testcode]&#xa;                    NUMBER 0.0 1 [source_file: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME z 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]&#xa;            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME y 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: var x;var z;a(1);z=void 0;var y
Result:   var x;var JSCompiler_inline_result$$0;a(1);JSCompiler_inline_result$$0=void 0;var z=JSCompiler_inline_result$$0;var y
Node tree inequality:
Expected tree:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        VAR 1 [source_file: expected0]
            NAME x 1 [is_constant_name: 1] [source_file: expected0]
        VAR 1 [source_file: expected0]
            NAME z 1 [is_constant_name: 1] [source_file: expected0]
        BLOCK 1 [source_file: expected0]
            EXPR_RESULT 1 [source_file: expected0]
                CALL 1 [free_call: 1] [source_file: expected0]
                    NAME a 1 [is_constant_name: 1] [source_file: expected0]
                    NUMBER 1.0 1 [source_file: expected0]
            EXPR_RESULT 1 [source_file: expected0]
                ASSIGN 1 [source_file: expected0]
                    NAME z 1 [is_constant_name: 1] [source_file: expected0]
                    VOID 1 [source_file: expected0]
                        NUMBER 0.0 1 [source_file: expected0]
        VAR 1 [source_file: expected0]
            NAME y 1 [is_constant_name: 1] [source_file: expected0]


Actual tree:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
        VAR 1 [source_file: testcode]
            NAME x 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]
        VAR 1 [source_file: testcode]
            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
        BLOCK 1 [source_file: testcode]
            EXPR_RESULT 1 [source_file: testcode]
                CALL 1 [free_call: 1] [source_file: testcode]
                    NAME a 1 [is_constant_name: 1] [source_file: testcode]
                    NUMBER 1.0 1 [source_file: testcode]
            EXPR_RESULT 1 [source_file: testcode]
                ASSIGN 1 [source_file: testcode]
                    NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
                    VOID 1 [source_file: testcode]
                        NUMBER 0.0 1 [source_file: testcode]
        VAR 1 [source_file: testcode]
            NAME z 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]
                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
        VAR 1 [source_file: testcode]
            NAME y 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]


Expected subtree: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
    VAR 1 [source_file: expected0]
        NAME x 1 [is_constant_name: 1] [source_file: expected0]
    VAR 1 [source_file: expected0]
        NAME z 1 [is_constant_name: 1] [source_file: expected0]
    BLOCK 1 [source_file: expected0]
        EXPR_RESULT 1 [source_file: expected0]
            CALL 1 [free_call: 1] [source_file: expected0]
                NAME a 1 [is_constant_name: 1] [source_file: expected0]
                NUMBER 1.0 1 [source_file: expected0]
        EXPR_RESULT 1 [source_file: expected0]
            ASSIGN 1 [source_file: expected0]
                NAME z 1 [is_constant_name: 1] [source_file: expected0]
                VOID 1 [source_file: expected0]
                    NUMBER 0.0 1 [source_file: expected0]
    VAR 1 [source_file: expected0]
        NAME y 1 [is_constant_name: 1] [source_file: expected0]


Actual subtree: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
    VAR 1 [source_file: testcode]
        NAME x 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]
    VAR 1 [source_file: testcode]
        NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
    BLOCK 1 [source_file: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            CALL 1 [free_call: 1] [source_file: testcode]
                NAME a 1 [is_constant_name: 1] [source_file: testcode]
                NUMBER 1.0 1 [source_file: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            ASSIGN 1 [source_file: testcode]
                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
                VOID 1 [source_file: testcode]
                    NUMBER 0.0 1 [source_file: testcode]
    VAR 1 [source_file: testcode]
        NAME z 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]
            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
    VAR 1 [source_file: testcode]
        NAME y 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineFunctionsTest.testComplexInlineVars9(InlineFunctionsTest.java:1372)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testComplexInlineVars10" time="0.005">
    <failure message="&#xa;Expected: var x=blah();var z;a(1);z=void 0;var y=blah()&#xa;Result:   var x=blah();var JSCompiler_inline_result$$0;a(1);JSCompiler_inline_result$$0=void 0;var z=JSCompiler_inline_result$$0;var y=blah()&#xa;Node tree inequality:&#xa;Expected tree:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;        VAR 1 [source_file: expected0]&#xa;            NAME x 1 [is_constant_name: 1] [source_file: expected0]&#xa;                CALL 1 [free_call: 1] [source_file: expected0]&#xa;                    NAME blah 1 [source_file: expected0]&#xa;        VAR 1 [source_file: expected0]&#xa;            NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;        BLOCK 1 [source_file: expected0]&#xa;            EXPR_RESULT 1 [source_file: expected0]&#xa;                CALL 1 [free_call: 1] [source_file: expected0]&#xa;                    NAME a 1 [is_constant_name: 1] [source_file: expected0]&#xa;                    NUMBER 1.0 1 [source_file: expected0]&#xa;            EXPR_RESULT 1 [source_file: expected0]&#xa;                ASSIGN 1 [source_file: expected0]&#xa;                    NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;                    VOID 1 [source_file: expected0]&#xa;                        NUMBER 0.0 1 [source_file: expected0]&#xa;        VAR 1 [source_file: expected0]&#xa;            NAME y 1 [is_constant_name: 1] [source_file: expected0]&#xa;                CALL 1 [free_call: 1] [source_file: expected0]&#xa;                    NAME blah 1 [source_file: expected0]&#xa;&#xa;&#xa;Actual tree:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME x 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]&#xa;                CALL 1 [free_call: 1] [source_file: testcode]&#xa;                    NAME blah 1 [source_file: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;        BLOCK 1 [source_file: testcode]&#xa;            EXPR_RESULT 1 [source_file: testcode]&#xa;                CALL 1 [free_call: 1] [source_file: testcode]&#xa;                    NAME a 1 [is_constant_name: 1] [source_file: testcode]&#xa;                    NUMBER 1.0 1 [source_file: testcode]&#xa;            EXPR_RESULT 1 [source_file: testcode]&#xa;                ASSIGN 1 [source_file: testcode]&#xa;                    NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;                    VOID 1 [source_file: testcode]&#xa;                        NUMBER 0.0 1 [source_file: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME z 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]&#xa;                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME y 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]&#xa;                CALL 1 [free_call: 1] [source_file: testcode]&#xa;                    NAME blah 1 [source_file: testcode]&#xa;&#xa;&#xa;Expected subtree: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;    VAR 1 [source_file: expected0]&#xa;        NAME x 1 [is_constant_name: 1] [source_file: expected0]&#xa;            CALL 1 [free_call: 1] [source_file: expected0]&#xa;                NAME blah 1 [source_file: expected0]&#xa;    VAR 1 [source_file: expected0]&#xa;        NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;    BLOCK 1 [source_file: expected0]&#xa;        EXPR_RESULT 1 [source_file: expected0]&#xa;            CALL 1 [free_call: 1] [source_file: expected0]&#xa;                NAME a 1 [is_constant_name: 1] [source_file: expected0]&#xa;                NUMBER 1.0 1 [source_file: expected0]&#xa;        EXPR_RESULT 1 [source_file: expected0]&#xa;            ASSIGN 1 [source_file: expected0]&#xa;                NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;                VOID 1 [source_file: expected0]&#xa;                    NUMBER 0.0 1 [source_file: expected0]&#xa;    VAR 1 [source_file: expected0]&#xa;        NAME y 1 [is_constant_name: 1] [source_file: expected0]&#xa;            CALL 1 [free_call: 1] [source_file: expected0]&#xa;                NAME blah 1 [source_file: expected0]&#xa;&#xa;&#xa;Actual subtree: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME x 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]&#xa;            CALL 1 [free_call: 1] [source_file: testcode]&#xa;                NAME blah 1 [source_file: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;    BLOCK 1 [source_file: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            CALL 1 [free_call: 1] [source_file: testcode]&#xa;                NAME a 1 [is_constant_name: 1] [source_file: testcode]&#xa;                NUMBER 1.0 1 [source_file: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            ASSIGN 1 [source_file: testcode]&#xa;                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;                VOID 1 [source_file: testcode]&#xa;                    NUMBER 0.0 1 [source_file: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME z 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]&#xa;            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME y 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]&#xa;            CALL 1 [free_call: 1] [source_file: testcode]&#xa;                NAME blah 1 [source_file: testcode]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: var x=blah();var z;a(1);z=void 0;var y=blah()
Result:   var x=blah();var JSCompiler_inline_result$$0;a(1);JSCompiler_inline_result$$0=void 0;var z=JSCompiler_inline_result$$0;var y=blah()
Node tree inequality:
Expected tree:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        VAR 1 [source_file: expected0]
            NAME x 1 [is_constant_name: 1] [source_file: expected0]
                CALL 1 [free_call: 1] [source_file: expected0]
                    NAME blah 1 [source_file: expected0]
        VAR 1 [source_file: expected0]
            NAME z 1 [is_constant_name: 1] [source_file: expected0]
        BLOCK 1 [source_file: expected0]
            EXPR_RESULT 1 [source_file: expected0]
                CALL 1 [free_call: 1] [source_file: expected0]
                    NAME a 1 [is_constant_name: 1] [source_file: expected0]
                    NUMBER 1.0 1 [source_file: expected0]
            EXPR_RESULT 1 [source_file: expected0]
                ASSIGN 1 [source_file: expected0]
                    NAME z 1 [is_constant_name: 1] [source_file: expected0]
                    VOID 1 [source_file: expected0]
                        NUMBER 0.0 1 [source_file: expected0]
        VAR 1 [source_file: expected0]
            NAME y 1 [is_constant_name: 1] [source_file: expected0]
                CALL 1 [free_call: 1] [source_file: expected0]
                    NAME blah 1 [source_file: expected0]


Actual tree:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
        VAR 1 [source_file: testcode]
            NAME x 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]
                CALL 1 [free_call: 1] [source_file: testcode]
                    NAME blah 1 [source_file: testcode]
        VAR 1 [source_file: testcode]
            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
        BLOCK 1 [source_file: testcode]
            EXPR_RESULT 1 [source_file: testcode]
                CALL 1 [free_call: 1] [source_file: testcode]
                    NAME a 1 [is_constant_name: 1] [source_file: testcode]
                    NUMBER 1.0 1 [source_file: testcode]
            EXPR_RESULT 1 [source_file: testcode]
                ASSIGN 1 [source_file: testcode]
                    NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
                    VOID 1 [source_file: testcode]
                        NUMBER 0.0 1 [source_file: testcode]
        VAR 1 [source_file: testcode]
            NAME z 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]
                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
        VAR 1 [source_file: testcode]
            NAME y 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]
                CALL 1 [free_call: 1] [source_file: testcode]
                    NAME blah 1 [source_file: testcode]


Expected subtree: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
    VAR 1 [source_file: expected0]
        NAME x 1 [is_constant_name: 1] [source_file: expected0]
            CALL 1 [free_call: 1] [source_file: expected0]
                NAME blah 1 [source_file: expected0]
    VAR 1 [source_file: expected0]
        NAME z 1 [is_constant_name: 1] [source_file: expected0]
    BLOCK 1 [source_file: expected0]
        EXPR_RESULT 1 [source_file: expected0]
            CALL 1 [free_call: 1] [source_file: expected0]
                NAME a 1 [is_constant_name: 1] [source_file: expected0]
                NUMBER 1.0 1 [source_file: expected0]
        EXPR_RESULT 1 [source_file: expected0]
            ASSIGN 1 [source_file: expected0]
                NAME z 1 [is_constant_name: 1] [source_file: expected0]
                VOID 1 [source_file: expected0]
                    NUMBER 0.0 1 [source_file: expected0]
    VAR 1 [source_file: expected0]
        NAME y 1 [is_constant_name: 1] [source_file: expected0]
            CALL 1 [free_call: 1] [source_file: expected0]
                NAME blah 1 [source_file: expected0]


Actual subtree: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
    VAR 1 [source_file: testcode]
        NAME x 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]
            CALL 1 [free_call: 1] [source_file: testcode]
                NAME blah 1 [source_file: testcode]
    VAR 1 [source_file: testcode]
        NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
    BLOCK 1 [source_file: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            CALL 1 [free_call: 1] [source_file: testcode]
                NAME a 1 [is_constant_name: 1] [source_file: testcode]
                NUMBER 1.0 1 [source_file: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            ASSIGN 1 [source_file: testcode]
                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
                VOID 1 [source_file: testcode]
                    NUMBER 0.0 1 [source_file: testcode]
    VAR 1 [source_file: testcode]
        NAME z 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]
            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
    VAR 1 [source_file: testcode]
        NAME y 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]
            CALL 1 [free_call: 1] [source_file: testcode]
                NAME blah 1 [source_file: testcode]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineFunctionsTest.testComplexInlineVars10(InlineFunctionsTest.java:1377)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testComplexInlineVars11" time="0.004">
    <failure message="&#xa;Expected: var x=blah();var z;a(1);z=void 0;var y&#xa;Result:   var x=blah();var JSCompiler_inline_result$$0;a(1);JSCompiler_inline_result$$0=void 0;var z=JSCompiler_inline_result$$0;var y&#xa;Node tree inequality:&#xa;Expected tree:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;        VAR 1 [source_file: expected0]&#xa;            NAME x 1 [is_constant_name: 1] [source_file: expected0]&#xa;                CALL 1 [free_call: 1] [source_file: expected0]&#xa;                    NAME blah 1 [source_file: expected0]&#xa;        VAR 1 [source_file: expected0]&#xa;            NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;        BLOCK 1 [source_file: expected0]&#xa;            EXPR_RESULT 1 [source_file: expected0]&#xa;                CALL 1 [free_call: 1] [source_file: expected0]&#xa;                    NAME a 1 [is_constant_name: 1] [source_file: expected0]&#xa;                    NUMBER 1.0 1 [source_file: expected0]&#xa;            EXPR_RESULT 1 [source_file: expected0]&#xa;                ASSIGN 1 [source_file: expected0]&#xa;                    NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;                    VOID 1 [source_file: expected0]&#xa;                        NUMBER 0.0 1 [source_file: expected0]&#xa;        VAR 1 [source_file: expected0]&#xa;            NAME y 1 [is_constant_name: 1] [source_file: expected0]&#xa;&#xa;&#xa;Actual tree:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME x 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]&#xa;                CALL 1 [free_call: 1] [source_file: testcode]&#xa;                    NAME blah 1 [source_file: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;        BLOCK 1 [source_file: testcode]&#xa;            EXPR_RESULT 1 [source_file: testcode]&#xa;                CALL 1 [free_call: 1] [source_file: testcode]&#xa;                    NAME a 1 [is_constant_name: 1] [source_file: testcode]&#xa;                    NUMBER 1.0 1 [source_file: testcode]&#xa;            EXPR_RESULT 1 [source_file: testcode]&#xa;                ASSIGN 1 [source_file: testcode]&#xa;                    NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;                    VOID 1 [source_file: testcode]&#xa;                        NUMBER 0.0 1 [source_file: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME z 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]&#xa;                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME y 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]&#xa;&#xa;&#xa;Expected subtree: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;    VAR 1 [source_file: expected0]&#xa;        NAME x 1 [is_constant_name: 1] [source_file: expected0]&#xa;            CALL 1 [free_call: 1] [source_file: expected0]&#xa;                NAME blah 1 [source_file: expected0]&#xa;    VAR 1 [source_file: expected0]&#xa;        NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;    BLOCK 1 [source_file: expected0]&#xa;        EXPR_RESULT 1 [source_file: expected0]&#xa;            CALL 1 [free_call: 1] [source_file: expected0]&#xa;                NAME a 1 [is_constant_name: 1] [source_file: expected0]&#xa;                NUMBER 1.0 1 [source_file: expected0]&#xa;        EXPR_RESULT 1 [source_file: expected0]&#xa;            ASSIGN 1 [source_file: expected0]&#xa;                NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;                VOID 1 [source_file: expected0]&#xa;                    NUMBER 0.0 1 [source_file: expected0]&#xa;    VAR 1 [source_file: expected0]&#xa;        NAME y 1 [is_constant_name: 1] [source_file: expected0]&#xa;&#xa;&#xa;Actual subtree: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME x 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]&#xa;            CALL 1 [free_call: 1] [source_file: testcode]&#xa;                NAME blah 1 [source_file: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;    BLOCK 1 [source_file: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            CALL 1 [free_call: 1] [source_file: testcode]&#xa;                NAME a 1 [is_constant_name: 1] [source_file: testcode]&#xa;                NUMBER 1.0 1 [source_file: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            ASSIGN 1 [source_file: testcode]&#xa;                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;                VOID 1 [source_file: testcode]&#xa;                    NUMBER 0.0 1 [source_file: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME z 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]&#xa;            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME y 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: var x=blah();var z;a(1);z=void 0;var y
Result:   var x=blah();var JSCompiler_inline_result$$0;a(1);JSCompiler_inline_result$$0=void 0;var z=JSCompiler_inline_result$$0;var y
Node tree inequality:
Expected tree:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        VAR 1 [source_file: expected0]
            NAME x 1 [is_constant_name: 1] [source_file: expected0]
                CALL 1 [free_call: 1] [source_file: expected0]
                    NAME blah 1 [source_file: expected0]
        VAR 1 [source_file: expected0]
            NAME z 1 [is_constant_name: 1] [source_file: expected0]
        BLOCK 1 [source_file: expected0]
            EXPR_RESULT 1 [source_file: expected0]
                CALL 1 [free_call: 1] [source_file: expected0]
                    NAME a 1 [is_constant_name: 1] [source_file: expected0]
                    NUMBER 1.0 1 [source_file: expected0]
            EXPR_RESULT 1 [source_file: expected0]
                ASSIGN 1 [source_file: expected0]
                    NAME z 1 [is_constant_name: 1] [source_file: expected0]
                    VOID 1 [source_file: expected0]
                        NUMBER 0.0 1 [source_file: expected0]
        VAR 1 [source_file: expected0]
            NAME y 1 [is_constant_name: 1] [source_file: expected0]


Actual tree:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
        VAR 1 [source_file: testcode]
            NAME x 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]
                CALL 1 [free_call: 1] [source_file: testcode]
                    NAME blah 1 [source_file: testcode]
        VAR 1 [source_file: testcode]
            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
        BLOCK 1 [source_file: testcode]
            EXPR_RESULT 1 [source_file: testcode]
                CALL 1 [free_call: 1] [source_file: testcode]
                    NAME a 1 [is_constant_name: 1] [source_file: testcode]
                    NUMBER 1.0 1 [source_file: testcode]
            EXPR_RESULT 1 [source_file: testcode]
                ASSIGN 1 [source_file: testcode]
                    NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
                    VOID 1 [source_file: testcode]
                        NUMBER 0.0 1 [source_file: testcode]
        VAR 1 [source_file: testcode]
            NAME z 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]
                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
        VAR 1 [source_file: testcode]
            NAME y 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]


Expected subtree: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
    VAR 1 [source_file: expected0]
        NAME x 1 [is_constant_name: 1] [source_file: expected0]
            CALL 1 [free_call: 1] [source_file: expected0]
                NAME blah 1 [source_file: expected0]
    VAR 1 [source_file: expected0]
        NAME z 1 [is_constant_name: 1] [source_file: expected0]
    BLOCK 1 [source_file: expected0]
        EXPR_RESULT 1 [source_file: expected0]
            CALL 1 [free_call: 1] [source_file: expected0]
                NAME a 1 [is_constant_name: 1] [source_file: expected0]
                NUMBER 1.0 1 [source_file: expected0]
        EXPR_RESULT 1 [source_file: expected0]
            ASSIGN 1 [source_file: expected0]
                NAME z 1 [is_constant_name: 1] [source_file: expected0]
                VOID 1 [source_file: expected0]
                    NUMBER 0.0 1 [source_file: expected0]
    VAR 1 [source_file: expected0]
        NAME y 1 [is_constant_name: 1] [source_file: expected0]


Actual subtree: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
    VAR 1 [source_file: testcode]
        NAME x 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]
            CALL 1 [free_call: 1] [source_file: testcode]
                NAME blah 1 [source_file: testcode]
    VAR 1 [source_file: testcode]
        NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
    BLOCK 1 [source_file: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            CALL 1 [free_call: 1] [source_file: testcode]
                NAME a 1 [is_constant_name: 1] [source_file: testcode]
                NUMBER 1.0 1 [source_file: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            ASSIGN 1 [source_file: testcode]
                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
                VOID 1 [source_file: testcode]
                    NUMBER 0.0 1 [source_file: testcode]
    VAR 1 [source_file: testcode]
        NAME z 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]
            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
    VAR 1 [source_file: testcode]
        NAME y 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineFunctionsTest.testComplexInlineVars11(InlineFunctionsTest.java:1382)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testComplexInlineVars12" time="0.004">
    <failure message="&#xa;Expected: var x;var z;a(1);z=void 0;var y=blah()&#xa;Result:   var x;var JSCompiler_inline_result$$0;a(1);JSCompiler_inline_result$$0=void 0;var z=JSCompiler_inline_result$$0;var y=blah()&#xa;Node tree inequality:&#xa;Expected tree:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;        VAR 1 [source_file: expected0]&#xa;            NAME x 1 [is_constant_name: 1] [source_file: expected0]&#xa;        VAR 1 [source_file: expected0]&#xa;            NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;        BLOCK 1 [source_file: expected0]&#xa;            EXPR_RESULT 1 [source_file: expected0]&#xa;                CALL 1 [free_call: 1] [source_file: expected0]&#xa;                    NAME a 1 [is_constant_name: 1] [source_file: expected0]&#xa;                    NUMBER 1.0 1 [source_file: expected0]&#xa;            EXPR_RESULT 1 [source_file: expected0]&#xa;                ASSIGN 1 [source_file: expected0]&#xa;                    NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;                    VOID 1 [source_file: expected0]&#xa;                        NUMBER 0.0 1 [source_file: expected0]&#xa;        VAR 1 [source_file: expected0]&#xa;            NAME y 1 [is_constant_name: 1] [source_file: expected0]&#xa;                CALL 1 [free_call: 1] [source_file: expected0]&#xa;                    NAME blah 1 [source_file: expected0]&#xa;&#xa;&#xa;Actual tree:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME x 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;        BLOCK 1 [source_file: testcode]&#xa;            EXPR_RESULT 1 [source_file: testcode]&#xa;                CALL 1 [free_call: 1] [source_file: testcode]&#xa;                    NAME a 1 [is_constant_name: 1] [source_file: testcode]&#xa;                    NUMBER 1.0 1 [source_file: testcode]&#xa;            EXPR_RESULT 1 [source_file: testcode]&#xa;                ASSIGN 1 [source_file: testcode]&#xa;                    NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;                    VOID 1 [source_file: testcode]&#xa;                        NUMBER 0.0 1 [source_file: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME z 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]&#xa;                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME y 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]&#xa;                CALL 1 [free_call: 1] [source_file: testcode]&#xa;                    NAME blah 1 [source_file: testcode]&#xa;&#xa;&#xa;Expected subtree: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;    VAR 1 [source_file: expected0]&#xa;        NAME x 1 [is_constant_name: 1] [source_file: expected0]&#xa;    VAR 1 [source_file: expected0]&#xa;        NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;    BLOCK 1 [source_file: expected0]&#xa;        EXPR_RESULT 1 [source_file: expected0]&#xa;            CALL 1 [free_call: 1] [source_file: expected0]&#xa;                NAME a 1 [is_constant_name: 1] [source_file: expected0]&#xa;                NUMBER 1.0 1 [source_file: expected0]&#xa;        EXPR_RESULT 1 [source_file: expected0]&#xa;            ASSIGN 1 [source_file: expected0]&#xa;                NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;                VOID 1 [source_file: expected0]&#xa;                    NUMBER 0.0 1 [source_file: expected0]&#xa;    VAR 1 [source_file: expected0]&#xa;        NAME y 1 [is_constant_name: 1] [source_file: expected0]&#xa;            CALL 1 [free_call: 1] [source_file: expected0]&#xa;                NAME blah 1 [source_file: expected0]&#xa;&#xa;&#xa;Actual subtree: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME x 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;    BLOCK 1 [source_file: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            CALL 1 [free_call: 1] [source_file: testcode]&#xa;                NAME a 1 [is_constant_name: 1] [source_file: testcode]&#xa;                NUMBER 1.0 1 [source_file: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            ASSIGN 1 [source_file: testcode]&#xa;                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;                VOID 1 [source_file: testcode]&#xa;                    NUMBER 0.0 1 [source_file: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME z 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]&#xa;            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME y 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]&#xa;            CALL 1 [free_call: 1] [source_file: testcode]&#xa;                NAME blah 1 [source_file: testcode]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: var x;var z;a(1);z=void 0;var y=blah()
Result:   var x;var JSCompiler_inline_result$$0;a(1);JSCompiler_inline_result$$0=void 0;var z=JSCompiler_inline_result$$0;var y=blah()
Node tree inequality:
Expected tree:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        VAR 1 [source_file: expected0]
            NAME x 1 [is_constant_name: 1] [source_file: expected0]
        VAR 1 [source_file: expected0]
            NAME z 1 [is_constant_name: 1] [source_file: expected0]
        BLOCK 1 [source_file: expected0]
            EXPR_RESULT 1 [source_file: expected0]
                CALL 1 [free_call: 1] [source_file: expected0]
                    NAME a 1 [is_constant_name: 1] [source_file: expected0]
                    NUMBER 1.0 1 [source_file: expected0]
            EXPR_RESULT 1 [source_file: expected0]
                ASSIGN 1 [source_file: expected0]
                    NAME z 1 [is_constant_name: 1] [source_file: expected0]
                    VOID 1 [source_file: expected0]
                        NUMBER 0.0 1 [source_file: expected0]
        VAR 1 [source_file: expected0]
            NAME y 1 [is_constant_name: 1] [source_file: expected0]
                CALL 1 [free_call: 1] [source_file: expected0]
                    NAME blah 1 [source_file: expected0]


Actual tree:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
        VAR 1 [source_file: testcode]
            NAME x 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]
        VAR 1 [source_file: testcode]
            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
        BLOCK 1 [source_file: testcode]
            EXPR_RESULT 1 [source_file: testcode]
                CALL 1 [free_call: 1] [source_file: testcode]
                    NAME a 1 [is_constant_name: 1] [source_file: testcode]
                    NUMBER 1.0 1 [source_file: testcode]
            EXPR_RESULT 1 [source_file: testcode]
                ASSIGN 1 [source_file: testcode]
                    NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
                    VOID 1 [source_file: testcode]
                        NUMBER 0.0 1 [source_file: testcode]
        VAR 1 [source_file: testcode]
            NAME z 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]
                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
        VAR 1 [source_file: testcode]
            NAME y 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]
                CALL 1 [free_call: 1] [source_file: testcode]
                    NAME blah 1 [source_file: testcode]


Expected subtree: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
    VAR 1 [source_file: expected0]
        NAME x 1 [is_constant_name: 1] [source_file: expected0]
    VAR 1 [source_file: expected0]
        NAME z 1 [is_constant_name: 1] [source_file: expected0]
    BLOCK 1 [source_file: expected0]
        EXPR_RESULT 1 [source_file: expected0]
            CALL 1 [free_call: 1] [source_file: expected0]
                NAME a 1 [is_constant_name: 1] [source_file: expected0]
                NUMBER 1.0 1 [source_file: expected0]
        EXPR_RESULT 1 [source_file: expected0]
            ASSIGN 1 [source_file: expected0]
                NAME z 1 [is_constant_name: 1] [source_file: expected0]
                VOID 1 [source_file: expected0]
                    NUMBER 0.0 1 [source_file: expected0]
    VAR 1 [source_file: expected0]
        NAME y 1 [is_constant_name: 1] [source_file: expected0]
            CALL 1 [free_call: 1] [source_file: expected0]
                NAME blah 1 [source_file: expected0]


Actual subtree: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
    VAR 1 [source_file: testcode]
        NAME x 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]
    VAR 1 [source_file: testcode]
        NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
    BLOCK 1 [source_file: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            CALL 1 [free_call: 1] [source_file: testcode]
                NAME a 1 [is_constant_name: 1] [source_file: testcode]
                NUMBER 1.0 1 [source_file: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            ASSIGN 1 [source_file: testcode]
                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
                VOID 1 [source_file: testcode]
                    NUMBER 0.0 1 [source_file: testcode]
    VAR 1 [source_file: testcode]
        NAME z 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]
            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
    VAR 1 [source_file: testcode]
        NAME y 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]
            CALL 1 [free_call: 1] [source_file: testcode]
                NAME blah 1 [source_file: testcode]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineFunctionsTest.testComplexInlineVars12(InlineFunctionsTest.java:1387)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testComplexInlineInExpressionss1" time="0.003">
    <failure message="&#xa;Expected: var z;a();z=void 0&#xa;Result:   var JSCompiler_inline_result$$0;a();JSCompiler_inline_result$$0=void 0;var z=JSCompiler_inline_result$$0&#xa;Node tree inequality:&#xa;Expected tree:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;        VAR 1 [source_file: expected0]&#xa;            NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;        BLOCK 1 [source_file: expected0]&#xa;            EXPR_RESULT 1 [source_file: expected0]&#xa;                CALL 1 [free_call: 1] [source_file: expected0]&#xa;                    NAME a 1 [is_constant_name: 1] [source_file: expected0]&#xa;            EXPR_RESULT 1 [source_file: expected0]&#xa;                ASSIGN 1 [source_file: expected0]&#xa;                    NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;                    VOID 1 [source_file: expected0]&#xa;                        NUMBER 0.0 1 [source_file: expected0]&#xa;&#xa;&#xa;Actual tree:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;        BLOCK 1 [source_file: testcode]&#xa;            EXPR_RESULT 1 [source_file: testcode]&#xa;                CALL 1 [free_call: 1] [source_file: testcode]&#xa;                    NAME a 1 [is_constant_name: 1] [source_file: testcode]&#xa;            EXPR_RESULT 1 [source_file: testcode]&#xa;                ASSIGN 1 [source_file: testcode]&#xa;                    NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;                    VOID 1 [source_file: testcode]&#xa;                        NUMBER 0.0 1 [source_file: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME z 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]&#xa;                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;&#xa;&#xa;Expected subtree: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;    VAR 1 [source_file: expected0]&#xa;        NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;    BLOCK 1 [source_file: expected0]&#xa;        EXPR_RESULT 1 [source_file: expected0]&#xa;            CALL 1 [free_call: 1] [source_file: expected0]&#xa;                NAME a 1 [is_constant_name: 1] [source_file: expected0]&#xa;        EXPR_RESULT 1 [source_file: expected0]&#xa;            ASSIGN 1 [source_file: expected0]&#xa;                NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;                VOID 1 [source_file: expected0]&#xa;                    NUMBER 0.0 1 [source_file: expected0]&#xa;&#xa;&#xa;Actual subtree: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;    BLOCK 1 [source_file: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            CALL 1 [free_call: 1] [source_file: testcode]&#xa;                NAME a 1 [is_constant_name: 1] [source_file: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            ASSIGN 1 [source_file: testcode]&#xa;                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;                VOID 1 [source_file: testcode]&#xa;                    NUMBER 0.0 1 [source_file: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME z 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]&#xa;            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: var z;a();z=void 0
Result:   var JSCompiler_inline_result$$0;a();JSCompiler_inline_result$$0=void 0;var z=JSCompiler_inline_result$$0
Node tree inequality:
Expected tree:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        VAR 1 [source_file: expected0]
            NAME z 1 [is_constant_name: 1] [source_file: expected0]
        BLOCK 1 [source_file: expected0]
            EXPR_RESULT 1 [source_file: expected0]
                CALL 1 [free_call: 1] [source_file: expected0]
                    NAME a 1 [is_constant_name: 1] [source_file: expected0]
            EXPR_RESULT 1 [source_file: expected0]
                ASSIGN 1 [source_file: expected0]
                    NAME z 1 [is_constant_name: 1] [source_file: expected0]
                    VOID 1 [source_file: expected0]
                        NUMBER 0.0 1 [source_file: expected0]


Actual tree:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
        VAR 1 [source_file: testcode]
            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
        BLOCK 1 [source_file: testcode]
            EXPR_RESULT 1 [source_file: testcode]
                CALL 1 [free_call: 1] [source_file: testcode]
                    NAME a 1 [is_constant_name: 1] [source_file: testcode]
            EXPR_RESULT 1 [source_file: testcode]
                ASSIGN 1 [source_file: testcode]
                    NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
                    VOID 1 [source_file: testcode]
                        NUMBER 0.0 1 [source_file: testcode]
        VAR 1 [source_file: testcode]
            NAME z 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]
                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]


Expected subtree: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
    VAR 1 [source_file: expected0]
        NAME z 1 [is_constant_name: 1] [source_file: expected0]
    BLOCK 1 [source_file: expected0]
        EXPR_RESULT 1 [source_file: expected0]
            CALL 1 [free_call: 1] [source_file: expected0]
                NAME a 1 [is_constant_name: 1] [source_file: expected0]
        EXPR_RESULT 1 [source_file: expected0]
            ASSIGN 1 [source_file: expected0]
                NAME z 1 [is_constant_name: 1] [source_file: expected0]
                VOID 1 [source_file: expected0]
                    NUMBER 0.0 1 [source_file: expected0]


Actual subtree: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
    VAR 1 [source_file: testcode]
        NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
    BLOCK 1 [source_file: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            CALL 1 [free_call: 1] [source_file: testcode]
                NAME a 1 [is_constant_name: 1] [source_file: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            ASSIGN 1 [source_file: testcode]
                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
                VOID 1 [source_file: testcode]
                    NUMBER 0.0 1 [source_file: testcode]
    VAR 1 [source_file: testcode]
        NAME z 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]
            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineFunctionsTest.testComplexInlineInExpressionss1(InlineFunctionsTest.java:1392)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testComplexInlineInExpressionss2" time="0.002">
    <error message="Unexpected." type="java.lang.IllegalStateException">java.lang.IllegalStateException: Unexpected.
	at com.google.javascript.jscomp.ExpressionDecomposer.extractConditional(ExpressionDecomposer.java:379)
	at com.google.javascript.jscomp.ExpressionDecomposer.exposeExpression(ExpressionDecomposer.java:236)
	at com.google.javascript.jscomp.ExpressionDecomposer.exposeExpression(ExpressionDecomposer.java:103)
	at com.google.javascript.jscomp.ExpressionDecomposer.maybeExposeExpression(ExpressionDecomposer.java:85)
	at com.google.javascript.jscomp.FunctionInjector$CallSiteType$6.prepare(FunctionInjector.java:389)
	at com.google.javascript.jscomp.FunctionInjector.maybePrepareCall(FunctionInjector.java:467)
	at com.google.javascript.jscomp.InlineFunctions.decomposeExpressions(InlineFunctions.java:825)
	at com.google.javascript.jscomp.InlineFunctions.process(InlineFunctions.java:142)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1044)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineFunctionsTest.testComplexInlineInExpressionss2(InlineFunctionsTest.java:1397)
</error>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testComplexInlineInExpressionss3" time="0.002">
    <error message="Unexpected." type="java.lang.IllegalStateException">java.lang.IllegalStateException: Unexpected.
	at com.google.javascript.jscomp.ExpressionDecomposer.extractConditional(ExpressionDecomposer.java:379)
	at com.google.javascript.jscomp.ExpressionDecomposer.exposeExpression(ExpressionDecomposer.java:236)
	at com.google.javascript.jscomp.ExpressionDecomposer.exposeExpression(ExpressionDecomposer.java:103)
	at com.google.javascript.jscomp.ExpressionDecomposer.maybeExposeExpression(ExpressionDecomposer.java:85)
	at com.google.javascript.jscomp.FunctionInjector$CallSiteType$6.prepare(FunctionInjector.java:389)
	at com.google.javascript.jscomp.FunctionInjector.maybePrepareCall(FunctionInjector.java:467)
	at com.google.javascript.jscomp.InlineFunctions.decomposeExpressions(InlineFunctions.java:825)
	at com.google.javascript.jscomp.InlineFunctions.process(InlineFunctions.java:142)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1044)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineFunctionsTest.testComplexInlineInExpressionss3(InlineFunctionsTest.java:1404)
</error>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testComplexInlineInExpressionss4" time="0.002">
    <error message="Unexpected." type="java.lang.IllegalStateException">java.lang.IllegalStateException: Unexpected.
	at com.google.javascript.jscomp.ExpressionDecomposer.extractConditional(ExpressionDecomposer.java:379)
	at com.google.javascript.jscomp.ExpressionDecomposer.exposeExpression(ExpressionDecomposer.java:236)
	at com.google.javascript.jscomp.ExpressionDecomposer.exposeExpression(ExpressionDecomposer.java:103)
	at com.google.javascript.jscomp.ExpressionDecomposer.maybeExposeExpression(ExpressionDecomposer.java:85)
	at com.google.javascript.jscomp.FunctionInjector$CallSiteType$6.prepare(FunctionInjector.java:389)
	at com.google.javascript.jscomp.FunctionInjector.maybePrepareCall(FunctionInjector.java:467)
	at com.google.javascript.jscomp.InlineFunctions.decomposeExpressions(InlineFunctions.java:825)
	at com.google.javascript.jscomp.InlineFunctions.process(InlineFunctions.java:142)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1044)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineFunctionsTest.testComplexInlineInExpressionss4(InlineFunctionsTest.java:1411)
</error>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testComplexInlineInExpressionss5" time="0.002">
    <error message="Unexpected." type="java.lang.IllegalStateException">java.lang.IllegalStateException: Unexpected.
	at com.google.javascript.jscomp.ExpressionDecomposer.extractConditional(ExpressionDecomposer.java:379)
	at com.google.javascript.jscomp.ExpressionDecomposer.exposeExpression(ExpressionDecomposer.java:236)
	at com.google.javascript.jscomp.ExpressionDecomposer.exposeExpression(ExpressionDecomposer.java:103)
	at com.google.javascript.jscomp.ExpressionDecomposer.maybeExposeExpression(ExpressionDecomposer.java:85)
	at com.google.javascript.jscomp.FunctionInjector$CallSiteType$6.prepare(FunctionInjector.java:389)
	at com.google.javascript.jscomp.FunctionInjector.maybePrepareCall(FunctionInjector.java:467)
	at com.google.javascript.jscomp.InlineFunctions.decomposeExpressions(InlineFunctions.java:825)
	at com.google.javascript.jscomp.InlineFunctions.process(InlineFunctions.java:142)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1044)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineFunctionsTest.testComplexInlineInExpressionss5(InlineFunctionsTest.java:1418)
</error>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testComplexNoInline1" time="0.004" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testComplexNoInline2" time="0.003" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testComplexSample" time="0.009">
    <failure message="&#xa;Expected: var styleSheet$$inline_2=null;if(goog$userAgent$IE)styleSheet$$inline_2=0;else var head$$inline_3=0;var element$$inline_0=styleSheet$$inline_2;var stylesString$$inline_1=a;if(goog$userAgent$IE)element$$inline_0.cssText=stylesString$$inline_1;else{var propToSet$$inline_2=&quot;innerText&quot;;element$$inline_0[propToSet$$inline_2]=stylesString$$inline_1}styleSheet$$inline_2&#xa;Result:   var styleSheet$$inline_2=null;if(goog$userAgent$IE)styleSheet$$inline_2=0;else var head$$inline_3=0;var element$$inline_0=styleSheet$$inline_2;if(goog$userAgent$IE)element$$inline_0.cssText=a;else{var propToSet$$inline_2=&quot;innerText&quot;;element$$inline_0[propToSet$$inline_2]=a}styleSheet$$inline_2&#xa;Node tree inequality:&#xa;Expected tree:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;        BLOCK 1 [source_file: expected0]&#xa;            BLOCK 1 [source_file: expected0]&#xa;                VAR 1 [source_file: expected0]&#xa;                    NAME styleSheet$$inline_2 1 [source_file: expected0]&#xa;                        NULL 1 [source_file: expected0]&#xa;                IF 1 [source_file: expected0]&#xa;                    NAME goog$userAgent$IE 1 [is_constant_name: 1] [source_file: expected0]&#xa;                    BLOCK 1 [added_block: 1] [source_file: expected0]&#xa;                        EXPR_RESULT 1 [source_file: expected0]&#xa;                            ASSIGN 1 [source_file: expected0]&#xa;                                NAME styleSheet$$inline_2 1 [source_file: expected0]&#xa;                                NUMBER 0.0 1 [source_file: expected0]&#xa;                    BLOCK 1 [added_block: 1] [source_file: expected0]&#xa;                        VAR 1 [source_file: expected0]&#xa;                            NAME head$$inline_3 1 [source_file: expected0]&#xa;                                NUMBER 0.0 1 [source_file: expected0]&#xa;                BLOCK 1 [source_file: expected0]&#xa;                    VAR 1 [source_file: expected0]&#xa;                        NAME element$$inline_0 1 [source_file: expected0]&#xa;                            NAME styleSheet$$inline_2 1 [source_file: expected0]&#xa;                    VAR 1 [source_file: expected0]&#xa;                        NAME stylesString$$inline_1 1 [source_file: expected0]&#xa;                            NAME a 1 [is_constant_name: 1] [source_file: expected0]&#xa;                    IF 1 [source_file: expected0]&#xa;                        NAME goog$userAgent$IE 1 [is_constant_name: 1] [source_file: expected0]&#xa;                        BLOCK 1 [added_block: 1] [source_file: expected0]&#xa;                            EXPR_RESULT 1 [source_file: expected0]&#xa;                                ASSIGN 1 [source_file: expected0]&#xa;                                    GETPROP 1 [source_file: expected0]&#xa;                                        NAME element$$inline_0 1 [source_file: expected0]&#xa;                                        STRING cssText 1 [source_file: expected0]&#xa;                                    NAME stylesString$$inline_1 1 [source_file: expected0]&#xa;                        BLOCK 1 [source_file: expected0]&#xa;                            VAR 1 [source_file: expected0]&#xa;                                NAME propToSet$$inline_2 1 [source_file: expected0]&#xa;                                    STRING innerText 1 [source_file: expected0]&#xa;                            EXPR_RESULT 1 [source_file: expected0]&#xa;                                ASSIGN 1 [source_file: expected0]&#xa;                                    GETELEM 1 [source_file: expected0]&#xa;                                        NAME element$$inline_0 1 [source_file: expected0]&#xa;                                        NAME propToSet$$inline_2 1 [source_file: expected0]&#xa;                                    NAME stylesString$$inline_1 1 [source_file: expected0]&#xa;                EXPR_RESULT 1 [source_file: expected0]&#xa;                    NAME styleSheet$$inline_2 1 [source_file: expected0]&#xa;&#xa;&#xa;Actual tree:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;        BLOCK 2 [source_file: testcode]&#xa;            BLOCK 1 [source_file: testcode]&#xa;                VAR 1 [source_file: testcode]&#xa;                    NAME styleSheet$$inline_2 1 [source_file: testcode]&#xa;                        NULL 1 [source_file: testcode]&#xa;                IF 1 [source_file: testcode]&#xa;                    NAME goog$userAgent$IE 1 [is_constant_name: 1] [source_file: testcode]&#xa;                    BLOCK 1 [added_block: 1] [source_file: testcode]&#xa;                        EXPR_RESULT 1 [source_file: testcode]&#xa;                            ASSIGN 1 [source_file: testcode]&#xa;                                NAME styleSheet$$inline_2 1 [source_file: testcode]&#xa;                                NUMBER 0.0 1 [source_file: testcode]&#xa;                    BLOCK 1 [added_block: 1] [source_file: testcode]&#xa;                        VAR 1 [source_file: testcode]&#xa;                            NAME head$$inline_3 1 [source_file: testcode] [is_constant_var: 1]&#xa;                                NUMBER 0.0 1 [source_file: testcode]&#xa;                BLOCK 2 [source_file: testcode]&#xa;                    VAR 1 [source_file: testcode]&#xa;                        NAME element$$inline_0 1 [source_file: testcode]&#xa;                            NAME styleSheet$$inline_2 1 [source_file: testcode]&#xa;                    IF 2 [source_file: testcode]&#xa;                        NAME goog$userAgent$IE 2 [is_constant_name: 1] [source_file: testcode]&#xa;                        BLOCK 2 [added_block: 1] [source_file: testcode]&#xa;                            EXPR_RESULT 2 [source_file: testcode]&#xa;                                ASSIGN 2 [source_file: testcode]&#xa;                                    GETPROP 2 [source_file: testcode]&#xa;                                        NAME element$$inline_0 2 [source_file: testcode]&#xa;                                        STRING cssText 2 [source_file: testcode]&#xa;                                    NAME a 2 [is_constant_name: 1] [source_file: testcode]&#xa;                        BLOCK 2 [source_file: testcode]&#xa;                            VAR 2 [source_file: testcode]&#xa;                                NAME propToSet$$inline_2 2 [source_file: testcode] [is_constant_var: 1]&#xa;                                    STRING innerText 2 [source_file: testcode]&#xa;                            EXPR_RESULT 2 [source_file: testcode]&#xa;                                ASSIGN 2 [source_file: testcode]&#xa;                                    GETELEM 2 [source_file: testcode]&#xa;                                        NAME element$$inline_0 2 [source_file: testcode]&#xa;                                        NAME propToSet$$inline_2 2 [source_file: testcode]&#xa;                                    NAME a 2 [is_constant_name: 1] [source_file: testcode]&#xa;                EXPR_RESULT 1 [source_file: testcode]&#xa;                    NAME styleSheet$$inline_2 1 [source_file: testcode]&#xa;&#xa;&#xa;Expected subtree: BLOCK 1 [source_file: expected0]&#xa;    VAR 1 [source_file: expected0]&#xa;        NAME element$$inline_0 1 [source_file: expected0]&#xa;            NAME styleSheet$$inline_2 1 [source_file: expected0]&#xa;    VAR 1 [source_file: expected0]&#xa;        NAME stylesString$$inline_1 1 [source_file: expected0]&#xa;            NAME a 1 [is_constant_name: 1] [source_file: expected0]&#xa;    IF 1 [source_file: expected0]&#xa;        NAME goog$userAgent$IE 1 [is_constant_name: 1] [source_file: expected0]&#xa;        BLOCK 1 [added_block: 1] [source_file: expected0]&#xa;            EXPR_RESULT 1 [source_file: expected0]&#xa;                ASSIGN 1 [source_file: expected0]&#xa;                    GETPROP 1 [source_file: expected0]&#xa;                        NAME element$$inline_0 1 [source_file: expected0]&#xa;                        STRING cssText 1 [source_file: expected0]&#xa;                    NAME stylesString$$inline_1 1 [source_file: expected0]&#xa;        BLOCK 1 [source_file: expected0]&#xa;            VAR 1 [source_file: expected0]&#xa;                NAME propToSet$$inline_2 1 [source_file: expected0]&#xa;                    STRING innerText 1 [source_file: expected0]&#xa;            EXPR_RESULT 1 [source_file: expected0]&#xa;                ASSIGN 1 [source_file: expected0]&#xa;                    GETELEM 1 [source_file: expected0]&#xa;                        NAME element$$inline_0 1 [source_file: expected0]&#xa;                        NAME propToSet$$inline_2 1 [source_file: expected0]&#xa;                    NAME stylesString$$inline_1 1 [source_file: expected0]&#xa;&#xa;&#xa;Actual subtree: BLOCK 2 [source_file: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME element$$inline_0 1 [source_file: testcode]&#xa;            NAME styleSheet$$inline_2 1 [source_file: testcode]&#xa;    IF 2 [source_file: testcode]&#xa;        NAME goog$userAgent$IE 2 [is_constant_name: 1] [source_file: testcode]&#xa;        BLOCK 2 [added_block: 1] [source_file: testcode]&#xa;            EXPR_RESULT 2 [source_file: testcode]&#xa;                ASSIGN 2 [source_file: testcode]&#xa;                    GETPROP 2 [source_file: testcode]&#xa;                        NAME element$$inline_0 2 [source_file: testcode]&#xa;                        STRING cssText 2 [source_file: testcode]&#xa;                    NAME a 2 [is_constant_name: 1] [source_file: testcode]&#xa;        BLOCK 2 [source_file: testcode]&#xa;            VAR 2 [source_file: testcode]&#xa;                NAME propToSet$$inline_2 2 [source_file: testcode] [is_constant_var: 1]&#xa;                    STRING innerText 2 [source_file: testcode]&#xa;            EXPR_RESULT 2 [source_file: testcode]&#xa;                ASSIGN 2 [source_file: testcode]&#xa;                    GETELEM 2 [source_file: testcode]&#xa;                        NAME element$$inline_0 2 [source_file: testcode]&#xa;                        NAME propToSet$$inline_2 2 [source_file: testcode]&#xa;                    NAME a 2 [is_constant_name: 1] [source_file: testcode]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: var styleSheet$$inline_2=null;if(goog$userAgent$IE)styleSheet$$inline_2=0;else var head$$inline_3=0;var element$$inline_0=styleSheet$$inline_2;var stylesString$$inline_1=a;if(goog$userAgent$IE)element$$inline_0.cssText=stylesString$$inline_1;else{var propToSet$$inline_2=&quot;innerText&quot;;element$$inline_0[propToSet$$inline_2]=stylesString$$inline_1}styleSheet$$inline_2
Result:   var styleSheet$$inline_2=null;if(goog$userAgent$IE)styleSheet$$inline_2=0;else var head$$inline_3=0;var element$$inline_0=styleSheet$$inline_2;if(goog$userAgent$IE)element$$inline_0.cssText=a;else{var propToSet$$inline_2=&quot;innerText&quot;;element$$inline_0[propToSet$$inline_2]=a}styleSheet$$inline_2
Node tree inequality:
Expected tree:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        BLOCK 1 [source_file: expected0]
            BLOCK 1 [source_file: expected0]
                VAR 1 [source_file: expected0]
                    NAME styleSheet$$inline_2 1 [source_file: expected0]
                        NULL 1 [source_file: expected0]
                IF 1 [source_file: expected0]
                    NAME goog$userAgent$IE 1 [is_constant_name: 1] [source_file: expected0]
                    BLOCK 1 [added_block: 1] [source_file: expected0]
                        EXPR_RESULT 1 [source_file: expected0]
                            ASSIGN 1 [source_file: expected0]
                                NAME styleSheet$$inline_2 1 [source_file: expected0]
                                NUMBER 0.0 1 [source_file: expected0]
                    BLOCK 1 [added_block: 1] [source_file: expected0]
                        VAR 1 [source_file: expected0]
                            NAME head$$inline_3 1 [source_file: expected0]
                                NUMBER 0.0 1 [source_file: expected0]
                BLOCK 1 [source_file: expected0]
                    VAR 1 [source_file: expected0]
                        NAME element$$inline_0 1 [source_file: expected0]
                            NAME styleSheet$$inline_2 1 [source_file: expected0]
                    VAR 1 [source_file: expected0]
                        NAME stylesString$$inline_1 1 [source_file: expected0]
                            NAME a 1 [is_constant_name: 1] [source_file: expected0]
                    IF 1 [source_file: expected0]
                        NAME goog$userAgent$IE 1 [is_constant_name: 1] [source_file: expected0]
                        BLOCK 1 [added_block: 1] [source_file: expected0]
                            EXPR_RESULT 1 [source_file: expected0]
                                ASSIGN 1 [source_file: expected0]
                                    GETPROP 1 [source_file: expected0]
                                        NAME element$$inline_0 1 [source_file: expected0]
                                        STRING cssText 1 [source_file: expected0]
                                    NAME stylesString$$inline_1 1 [source_file: expected0]
                        BLOCK 1 [source_file: expected0]
                            VAR 1 [source_file: expected0]
                                NAME propToSet$$inline_2 1 [source_file: expected0]
                                    STRING innerText 1 [source_file: expected0]
                            EXPR_RESULT 1 [source_file: expected0]
                                ASSIGN 1 [source_file: expected0]
                                    GETELEM 1 [source_file: expected0]
                                        NAME element$$inline_0 1 [source_file: expected0]
                                        NAME propToSet$$inline_2 1 [source_file: expected0]
                                    NAME stylesString$$inline_1 1 [source_file: expected0]
                EXPR_RESULT 1 [source_file: expected0]
                    NAME styleSheet$$inline_2 1 [source_file: expected0]


Actual tree:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
        BLOCK 2 [source_file: testcode]
            BLOCK 1 [source_file: testcode]
                VAR 1 [source_file: testcode]
                    NAME styleSheet$$inline_2 1 [source_file: testcode]
                        NULL 1 [source_file: testcode]
                IF 1 [source_file: testcode]
                    NAME goog$userAgent$IE 1 [is_constant_name: 1] [source_file: testcode]
                    BLOCK 1 [added_block: 1] [source_file: testcode]
                        EXPR_RESULT 1 [source_file: testcode]
                            ASSIGN 1 [source_file: testcode]
                                NAME styleSheet$$inline_2 1 [source_file: testcode]
                                NUMBER 0.0 1 [source_file: testcode]
                    BLOCK 1 [added_block: 1] [source_file: testcode]
                        VAR 1 [source_file: testcode]
                            NAME head$$inline_3 1 [source_file: testcode] [is_constant_var: 1]
                                NUMBER 0.0 1 [source_file: testcode]
                BLOCK 2 [source_file: testcode]
                    VAR 1 [source_file: testcode]
                        NAME element$$inline_0 1 [source_file: testcode]
                            NAME styleSheet$$inline_2 1 [source_file: testcode]
                    IF 2 [source_file: testcode]
                        NAME goog$userAgent$IE 2 [is_constant_name: 1] [source_file: testcode]
                        BLOCK 2 [added_block: 1] [source_file: testcode]
                            EXPR_RESULT 2 [source_file: testcode]
                                ASSIGN 2 [source_file: testcode]
                                    GETPROP 2 [source_file: testcode]
                                        NAME element$$inline_0 2 [source_file: testcode]
                                        STRING cssText 2 [source_file: testcode]
                                    NAME a 2 [is_constant_name: 1] [source_file: testcode]
                        BLOCK 2 [source_file: testcode]
                            VAR 2 [source_file: testcode]
                                NAME propToSet$$inline_2 2 [source_file: testcode] [is_constant_var: 1]
                                    STRING innerText 2 [source_file: testcode]
                            EXPR_RESULT 2 [source_file: testcode]
                                ASSIGN 2 [source_file: testcode]
                                    GETELEM 2 [source_file: testcode]
                                        NAME element$$inline_0 2 [source_file: testcode]
                                        NAME propToSet$$inline_2 2 [source_file: testcode]
                                    NAME a 2 [is_constant_name: 1] [source_file: testcode]
                EXPR_RESULT 1 [source_file: testcode]
                    NAME styleSheet$$inline_2 1 [source_file: testcode]


Expected subtree: BLOCK 1 [source_file: expected0]
    VAR 1 [source_file: expected0]
        NAME element$$inline_0 1 [source_file: expected0]
            NAME styleSheet$$inline_2 1 [source_file: expected0]
    VAR 1 [source_file: expected0]
        NAME stylesString$$inline_1 1 [source_file: expected0]
            NAME a 1 [is_constant_name: 1] [source_file: expected0]
    IF 1 [source_file: expected0]
        NAME goog$userAgent$IE 1 [is_constant_name: 1] [source_file: expected0]
        BLOCK 1 [added_block: 1] [source_file: expected0]
            EXPR_RESULT 1 [source_file: expected0]
                ASSIGN 1 [source_file: expected0]
                    GETPROP 1 [source_file: expected0]
                        NAME element$$inline_0 1 [source_file: expected0]
                        STRING cssText 1 [source_file: expected0]
                    NAME stylesString$$inline_1 1 [source_file: expected0]
        BLOCK 1 [source_file: expected0]
            VAR 1 [source_file: expected0]
                NAME propToSet$$inline_2 1 [source_file: expected0]
                    STRING innerText 1 [source_file: expected0]
            EXPR_RESULT 1 [source_file: expected0]
                ASSIGN 1 [source_file: expected0]
                    GETELEM 1 [source_file: expected0]
                        NAME element$$inline_0 1 [source_file: expected0]
                        NAME propToSet$$inline_2 1 [source_file: expected0]
                    NAME stylesString$$inline_1 1 [source_file: expected0]


Actual subtree: BLOCK 2 [source_file: testcode]
    VAR 1 [source_file: testcode]
        NAME element$$inline_0 1 [source_file: testcode]
            NAME styleSheet$$inline_2 1 [source_file: testcode]
    IF 2 [source_file: testcode]
        NAME goog$userAgent$IE 2 [is_constant_name: 1] [source_file: testcode]
        BLOCK 2 [added_block: 1] [source_file: testcode]
            EXPR_RESULT 2 [source_file: testcode]
                ASSIGN 2 [source_file: testcode]
                    GETPROP 2 [source_file: testcode]
                        NAME element$$inline_0 2 [source_file: testcode]
                        STRING cssText 2 [source_file: testcode]
                    NAME a 2 [is_constant_name: 1] [source_file: testcode]
        BLOCK 2 [source_file: testcode]
            VAR 2 [source_file: testcode]
                NAME propToSet$$inline_2 2 [source_file: testcode] [is_constant_var: 1]
                    STRING innerText 2 [source_file: testcode]
            EXPR_RESULT 2 [source_file: testcode]
                ASSIGN 2 [source_file: testcode]
                    GETELEM 2 [source_file: testcode]
                        NAME element$$inline_0 2 [source_file: testcode]
                        NAME propToSet$$inline_2 2 [source_file: testcode]
                    NAME a 2 [is_constant_name: 1] [source_file: testcode]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineFunctionsTest.testComplexSample(InlineFunctionsTest.java:1460)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testComplexSampleNoInline" time="0.006" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testComplexNoVarSub" time="0.003" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testComplexFunctionWithFunctionDefinition1" time="0.003" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testComplexFunctionWithFunctionDefinition2" time="0.007">
    <error message="INTERNAL COMPILER ERROR.&#xa;Please report this problem.&#xa;&#xa;The name a$$inline_0 is not consistently annotated as constant.&#xa;  Node(NAME a$$inline_0): testcode:1:55&#xa;(function(){var f = function(a){call(function(){return a})};f()})()&#xa;  Parent(RETURN): testcode:1:48&#xa;(function(){var f = function(a){call(function(){return a})};f()})()&#xa;" type="java.lang.RuntimeException">java.lang.RuntimeException: INTERNAL COMPILER ERROR.
Please report this problem.

The name a$$inline_0 is not consistently annotated as constant.
  Node(NAME a$$inline_0): testcode:1:55
(function(){var f = function(a){call(function(){return a})};f()})()
  Parent(RETURN): testcode:1:48
(function(){var f = function(a){call(function(){return a})};f()})()

	at com.google.common.base.Preconditions.checkState(Preconditions.java:197)
	at com.google.javascript.jscomp.Normalize$VerifyConstants.visit(Normalize.java:333)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:576)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseFunction(NodeTraversal.java:610)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:562)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseRoots(NodeTraversal.java:308)
	at com.google.javascript.jscomp.NodeTraversal.traverseRoots(NodeTraversal.java:538)
	at com.google.javascript.jscomp.Normalize$VerifyConstants.process(Normalize.java:284)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1063)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineFunctionsTest.testComplexFunctionWithFunctionDefinition2(InlineFunctionsTest.java:1531)
Caused by: java.lang.IllegalStateException: The name a$$inline_0 is not consistently annotated as constant.
</error>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testComplexFunctionWithFunctionDefinition2a" time="0.008">
    <error message="INTERNAL COMPILER ERROR.&#xa;Please report this problem.&#xa;&#xa;The name a$$inline_0 is not consistently annotated as constant.&#xa;  Node(NAME a$$inline_0): testcode:1:55&#xa;(function(){var f = function(a){call(function(){return a})};f()})()&#xa;  Parent(RETURN): testcode:1:48&#xa;(function(){var f = function(a){call(function(){return a})};f()})()&#xa;" type="java.lang.RuntimeException">java.lang.RuntimeException: INTERNAL COMPILER ERROR.
Please report this problem.

The name a$$inline_0 is not consistently annotated as constant.
  Node(NAME a$$inline_0): testcode:1:55
(function(){var f = function(a){call(function(){return a})};f()})()
  Parent(RETURN): testcode:1:48
(function(){var f = function(a){call(function(){return a})};f()})()

	at com.google.common.base.Preconditions.checkState(Preconditions.java:197)
	at com.google.javascript.jscomp.Normalize$VerifyConstants.visit(Normalize.java:333)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:576)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseFunction(NodeTraversal.java:610)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:562)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseRoots(NodeTraversal.java:308)
	at com.google.javascript.jscomp.NodeTraversal.traverseRoots(NodeTraversal.java:538)
	at com.google.javascript.jscomp.Normalize$VerifyConstants.process(Normalize.java:284)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1063)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineFunctionsTest.testComplexFunctionWithFunctionDefinition2a(InlineFunctionsTest.java:1545)
Caused by: java.lang.IllegalStateException: The name a$$inline_0 is not consistently annotated as constant.
</error>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testComplexFunctionWithFunctionDefinition3" time="0.007" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testDecomposePlusEquals" time="0.002">
    <error message="Unexpected." type="java.lang.IllegalStateException">java.lang.IllegalStateException: Unexpected.
	at com.google.javascript.jscomp.ExpressionDecomposer.extractConditional(ExpressionDecomposer.java:379)
	at com.google.javascript.jscomp.ExpressionDecomposer.exposeExpression(ExpressionDecomposer.java:236)
	at com.google.javascript.jscomp.ExpressionDecomposer.exposeExpression(ExpressionDecomposer.java:103)
	at com.google.javascript.jscomp.ExpressionDecomposer.maybeExposeExpression(ExpressionDecomposer.java:85)
	at com.google.javascript.jscomp.FunctionInjector$CallSiteType$6.prepare(FunctionInjector.java:389)
	at com.google.javascript.jscomp.FunctionInjector.maybePrepareCall(FunctionInjector.java:467)
	at com.google.javascript.jscomp.InlineFunctions.decomposeExpressions(InlineFunctions.java:825)
	at com.google.javascript.jscomp.InlineFunctions.process(InlineFunctions.java:142)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1044)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineFunctionsTest.testDecomposePlusEquals(InlineFunctionsTest.java:1564)
</error>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testDecomposeFunctionExpressionInCall" time="0.002">
    <error message="Unexpected." type="java.lang.IllegalStateException">java.lang.IllegalStateException: Unexpected.
	at com.google.javascript.jscomp.ExpressionDecomposer.extractConditional(ExpressionDecomposer.java:379)
	at com.google.javascript.jscomp.ExpressionDecomposer.exposeExpression(ExpressionDecomposer.java:236)
	at com.google.javascript.jscomp.ExpressionDecomposer.exposeExpression(ExpressionDecomposer.java:103)
	at com.google.javascript.jscomp.ExpressionDecomposer.maybeExposeExpression(ExpressionDecomposer.java:85)
	at com.google.javascript.jscomp.FunctionInjector$CallSiteType$6.prepare(FunctionInjector.java:389)
	at com.google.javascript.jscomp.FunctionInjector.maybePrepareCall(FunctionInjector.java:467)
	at com.google.javascript.jscomp.InlineFunctions.decomposeExpressions(InlineFunctions.java:825)
	at com.google.javascript.jscomp.InlineFunctions.process(InlineFunctions.java:142)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1044)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineFunctionsTest.testDecomposeFunctionExpressionInCall(InlineFunctionsTest.java:1574)
</error>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testInlineConstructor1" time="0.003" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testInlineConstructor2" time="0.003" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testInlineConstructor3" time="0.003" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testInlineConstructor4" time="0.004">
    <failure message="&#xa;Expected: function f(){x.call(this)}f.prototype.a=0;function _g(){var t;x.call(this);t=void 0}&#xa;Result:   function f(){x.call(this)}f.prototype.a=0;function _g(){var JSCompiler_inline_result$$0;x.call(this);JSCompiler_inline_result$$0=void 0;var t=JSCompiler_inline_result$$0}&#xa;Node tree inequality:&#xa;Expected tree:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;        FUNCTION f 1 [source_file: expected0]&#xa;            NAME f 1 [is_constant_name: 1] [source_file: expected0]&#xa;            PARAM_LIST 1 [source_file: expected0]&#xa;            BLOCK 1 [source_file: expected0]&#xa;                EXPR_RESULT 1 [source_file: expected0]&#xa;                    CALL 1 [source_file: expected0]&#xa;                        GETPROP 1 [source_file: expected0]&#xa;                            NAME x 1 [is_constant_name: 1] [source_file: expected0]&#xa;                            STRING call 1 [source_file: expected0]&#xa;                        THIS 1 [source_file: expected0]&#xa;        EXPR_RESULT 1 [source_file: expected0]&#xa;            ASSIGN 1 [source_file: expected0]&#xa;                GETPROP 1 [source_file: expected0]&#xa;                    GETPROP 1 [source_file: expected0]&#xa;                        NAME f 1 [is_constant_name: 1] [source_file: expected0]&#xa;                        STRING prototype 1 [source_file: expected0]&#xa;                    STRING a 1 [source_file: expected0]&#xa;                NUMBER 0.0 1 [source_file: expected0]&#xa;        FUNCTION _g 1 [source_file: expected0]&#xa;            NAME _g 1 [source_file: expected0]&#xa;            PARAM_LIST 1 [source_file: expected0]&#xa;            BLOCK 1 [source_file: expected0]&#xa;                VAR 1 [source_file: expected0]&#xa;                    NAME t 1 [is_constant_name: 1] [source_file: expected0]&#xa;                BLOCK 1 [source_file: expected0]&#xa;                    EXPR_RESULT 1 [source_file: expected0]&#xa;                        CALL 1 [source_file: expected0]&#xa;                            GETPROP 1 [source_file: expected0]&#xa;                                NAME x 1 [is_constant_name: 1] [source_file: expected0]&#xa;                                STRING call 1 [source_file: expected0]&#xa;                            THIS 1 [source_file: expected0]&#xa;                    EXPR_RESULT 1 [source_file: expected0]&#xa;                        ASSIGN 1 [source_file: expected0]&#xa;                            NAME t 1 [is_constant_name: 1] [source_file: expected0]&#xa;                            VOID 1 [source_file: expected0]&#xa;                                NUMBER 0.0 1 [source_file: expected0]&#xa;&#xa;&#xa;Actual tree:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;        FUNCTION f 1 [source_file: testcode]&#xa;            NAME f 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]&#xa;            PARAM_LIST 1 [source_file: testcode]&#xa;            BLOCK 1 [source_file: testcode]&#xa;                EXPR_RESULT 1 [source_file: testcode]&#xa;                    CALL 1 [source_file: testcode]&#xa;                        GETPROP 1 [source_file: testcode]&#xa;                            NAME x 1 [is_constant_name: 1] [source_file: testcode]&#xa;                            STRING call 1 [source_file: testcode]&#xa;                        THIS 1 [source_file: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            ASSIGN 1 [source_file: testcode]&#xa;                GETPROP 1 [source_file: testcode]&#xa;                    GETPROP 1 [source_file: testcode]&#xa;                        NAME f 1 [is_constant_name: 1] [source_file: testcode]&#xa;                        STRING prototype 1 [source_file: testcode]&#xa;                    STRING a 1 [source_file: testcode]&#xa;                NUMBER 0.0 1 [source_file: testcode]&#xa;        FUNCTION _g 1 [source_file: testcode]&#xa;            NAME _g 1 [source_file: testcode] [is_constant_var: 1]&#xa;            PARAM_LIST 1 [source_file: testcode]&#xa;            BLOCK 1 [source_file: testcode]&#xa;                VAR 1 [source_file: testcode]&#xa;                    NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;                BLOCK 1 [source_file: testcode]&#xa;                    EXPR_RESULT 1 [source_file: testcode]&#xa;                        CALL 1 [source_file: testcode]&#xa;                            GETPROP 1 [source_file: testcode]&#xa;                                NAME x 1 [is_constant_name: 1] [source_file: testcode]&#xa;                                STRING call 1 [source_file: testcode]&#xa;                            THIS 1 [source_file: testcode]&#xa;                    EXPR_RESULT 1 [source_file: testcode]&#xa;                        ASSIGN 1 [source_file: testcode]&#xa;                            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;                            VOID 1 [source_file: testcode]&#xa;                                NUMBER 0.0 1 [source_file: testcode]&#xa;                VAR 1 [source_file: testcode]&#xa;                    NAME t 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]&#xa;                        NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;&#xa;&#xa;Expected subtree: BLOCK 1 [source_file: expected0]&#xa;    VAR 1 [source_file: expected0]&#xa;        NAME t 1 [is_constant_name: 1] [source_file: expected0]&#xa;    BLOCK 1 [source_file: expected0]&#xa;        EXPR_RESULT 1 [source_file: expected0]&#xa;            CALL 1 [source_file: expected0]&#xa;                GETPROP 1 [source_file: expected0]&#xa;                    NAME x 1 [is_constant_name: 1] [source_file: expected0]&#xa;                    STRING call 1 [source_file: expected0]&#xa;                THIS 1 [source_file: expected0]&#xa;        EXPR_RESULT 1 [source_file: expected0]&#xa;            ASSIGN 1 [source_file: expected0]&#xa;                NAME t 1 [is_constant_name: 1] [source_file: expected0]&#xa;                VOID 1 [source_file: expected0]&#xa;                    NUMBER 0.0 1 [source_file: expected0]&#xa;&#xa;&#xa;Actual subtree: BLOCK 1 [source_file: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;    BLOCK 1 [source_file: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            CALL 1 [source_file: testcode]&#xa;                GETPROP 1 [source_file: testcode]&#xa;                    NAME x 1 [is_constant_name: 1] [source_file: testcode]&#xa;                    STRING call 1 [source_file: testcode]&#xa;                THIS 1 [source_file: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            ASSIGN 1 [source_file: testcode]&#xa;                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;                VOID 1 [source_file: testcode]&#xa;                    NUMBER 0.0 1 [source_file: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME t 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]&#xa;            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: function f(){x.call(this)}f.prototype.a=0;function _g(){var t;x.call(this);t=void 0}
Result:   function f(){x.call(this)}f.prototype.a=0;function _g(){var JSCompiler_inline_result$$0;x.call(this);JSCompiler_inline_result$$0=void 0;var t=JSCompiler_inline_result$$0}
Node tree inequality:
Expected tree:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        FUNCTION f 1 [source_file: expected0]
            NAME f 1 [is_constant_name: 1] [source_file: expected0]
            PARAM_LIST 1 [source_file: expected0]
            BLOCK 1 [source_file: expected0]
                EXPR_RESULT 1 [source_file: expected0]
                    CALL 1 [source_file: expected0]
                        GETPROP 1 [source_file: expected0]
                            NAME x 1 [is_constant_name: 1] [source_file: expected0]
                            STRING call 1 [source_file: expected0]
                        THIS 1 [source_file: expected0]
        EXPR_RESULT 1 [source_file: expected0]
            ASSIGN 1 [source_file: expected0]
                GETPROP 1 [source_file: expected0]
                    GETPROP 1 [source_file: expected0]
                        NAME f 1 [is_constant_name: 1] [source_file: expected0]
                        STRING prototype 1 [source_file: expected0]
                    STRING a 1 [source_file: expected0]
                NUMBER 0.0 1 [source_file: expected0]
        FUNCTION _g 1 [source_file: expected0]
            NAME _g 1 [source_file: expected0]
            PARAM_LIST 1 [source_file: expected0]
            BLOCK 1 [source_file: expected0]
                VAR 1 [source_file: expected0]
                    NAME t 1 [is_constant_name: 1] [source_file: expected0]
                BLOCK 1 [source_file: expected0]
                    EXPR_RESULT 1 [source_file: expected0]
                        CALL 1 [source_file: expected0]
                            GETPROP 1 [source_file: expected0]
                                NAME x 1 [is_constant_name: 1] [source_file: expected0]
                                STRING call 1 [source_file: expected0]
                            THIS 1 [source_file: expected0]
                    EXPR_RESULT 1 [source_file: expected0]
                        ASSIGN 1 [source_file: expected0]
                            NAME t 1 [is_constant_name: 1] [source_file: expected0]
                            VOID 1 [source_file: expected0]
                                NUMBER 0.0 1 [source_file: expected0]


Actual tree:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
        FUNCTION f 1 [source_file: testcode]
            NAME f 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]
            PARAM_LIST 1 [source_file: testcode]
            BLOCK 1 [source_file: testcode]
                EXPR_RESULT 1 [source_file: testcode]
                    CALL 1 [source_file: testcode]
                        GETPROP 1 [source_file: testcode]
                            NAME x 1 [is_constant_name: 1] [source_file: testcode]
                            STRING call 1 [source_file: testcode]
                        THIS 1 [source_file: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            ASSIGN 1 [source_file: testcode]
                GETPROP 1 [source_file: testcode]
                    GETPROP 1 [source_file: testcode]
                        NAME f 1 [is_constant_name: 1] [source_file: testcode]
                        STRING prototype 1 [source_file: testcode]
                    STRING a 1 [source_file: testcode]
                NUMBER 0.0 1 [source_file: testcode]
        FUNCTION _g 1 [source_file: testcode]
            NAME _g 1 [source_file: testcode] [is_constant_var: 1]
            PARAM_LIST 1 [source_file: testcode]
            BLOCK 1 [source_file: testcode]
                VAR 1 [source_file: testcode]
                    NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
                BLOCK 1 [source_file: testcode]
                    EXPR_RESULT 1 [source_file: testcode]
                        CALL 1 [source_file: testcode]
                            GETPROP 1 [source_file: testcode]
                                NAME x 1 [is_constant_name: 1] [source_file: testcode]
                                STRING call 1 [source_file: testcode]
                            THIS 1 [source_file: testcode]
                    EXPR_RESULT 1 [source_file: testcode]
                        ASSIGN 1 [source_file: testcode]
                            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
                            VOID 1 [source_file: testcode]
                                NUMBER 0.0 1 [source_file: testcode]
                VAR 1 [source_file: testcode]
                    NAME t 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]
                        NAME JSCompiler_inline_result$$0 1 [source_file: testcode]


Expected subtree: BLOCK 1 [source_file: expected0]
    VAR 1 [source_file: expected0]
        NAME t 1 [is_constant_name: 1] [source_file: expected0]
    BLOCK 1 [source_file: expected0]
        EXPR_RESULT 1 [source_file: expected0]
            CALL 1 [source_file: expected0]
                GETPROP 1 [source_file: expected0]
                    NAME x 1 [is_constant_name: 1] [source_file: expected0]
                    STRING call 1 [source_file: expected0]
                THIS 1 [source_file: expected0]
        EXPR_RESULT 1 [source_file: expected0]
            ASSIGN 1 [source_file: expected0]
                NAME t 1 [is_constant_name: 1] [source_file: expected0]
                VOID 1 [source_file: expected0]
                    NUMBER 0.0 1 [source_file: expected0]


Actual subtree: BLOCK 1 [source_file: testcode]
    VAR 1 [source_file: testcode]
        NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
    BLOCK 1 [source_file: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            CALL 1 [source_file: testcode]
                GETPROP 1 [source_file: testcode]
                    NAME x 1 [is_constant_name: 1] [source_file: testcode]
                    STRING call 1 [source_file: testcode]
                THIS 1 [source_file: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            ASSIGN 1 [source_file: testcode]
                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
                VOID 1 [source_file: testcode]
                    NUMBER 0.0 1 [source_file: testcode]
    VAR 1 [source_file: testcode]
        NAME t 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]
            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineFunctionsTest.testInlineConstructor4(InlineFunctionsTest.java:1614)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testFunctionExpressionInlining1" time="0.003" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testFunctionExpressionInlining2" time="0.003" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testFunctionExpressionInlining3" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testFunctionExpressionInlining4" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testFunctionExpressionCallInlining1" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testFunctionExpressionCallInlining2" time="0.004" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testFunctionExpressionCallInlining3" time="0.003" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testFunctionExpressionCallInlining4" time="0.004" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testFunctionExpressionCallInlining5" time="0.003" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testFunctionExpressionCallInlining6" time="0.003" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testFunctionExpressionCallInlining7" time="0.003" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testFunctionExpressionCallInlining8" time="0.003" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testFunctionExpressionCallInlining9" time="0.003" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testFunctionExpressionCallInlining10" time="0.005" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testFunctionExpressionCallInlining11a" time="0.003" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testFunctionExpressionCallInlining11b" time="0.01" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testFunctionExpressionCallInlining11c" time="0.007" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testFunctionExpressionCallInlining11d" time="0.008" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testFunctionExpressionCallInlining11e" time="0.008" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testFunctionExpressionCallInlining12" time="0.003" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testFunctionExpressionOmega" time="0.003">
    <error message="INTERNAL COMPILER ERROR.&#xa;Please report this problem.&#xa;&#xa;The name f$$inline_0 is not consistently annotated as constant.&#xa;  Node(NAME f$$inline_0): testcode:1:14&#xa;(function (f){f(f)})(function(f){f(f)})&#xa;  Parent(CALL): testcode:1:14&#xa;(function (f){f(f)})(function(f){f(f)})&#xa;" type="java.lang.RuntimeException">java.lang.RuntimeException: INTERNAL COMPILER ERROR.
Please report this problem.

The name f$$inline_0 is not consistently annotated as constant.
  Node(NAME f$$inline_0): testcode:1:14
(function (f){f(f)})(function(f){f(f)})
  Parent(CALL): testcode:1:14
(function (f){f(f)})(function(f){f(f)})

	at com.google.common.base.Preconditions.checkState(Preconditions.java:197)
	at com.google.javascript.jscomp.Normalize$VerifyConstants.visit(Normalize.java:333)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:576)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseRoots(NodeTraversal.java:308)
	at com.google.javascript.jscomp.NodeTraversal.traverseRoots(NodeTraversal.java:538)
	at com.google.javascript.jscomp.Normalize$VerifyConstants.process(Normalize.java:284)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1063)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineFunctionsTest.testFunctionExpressionOmega(InlineFunctionsTest.java:1779)
Caused by: java.lang.IllegalStateException: The name f$$inline_0 is not consistently annotated as constant.
</error>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testLocalFunctionInlining1" time="0.003" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testLocalFunctionInlining2" time="0.003" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testLocalFunctionInlining3" time="0.003" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testLocalFunctionInlining4" time="0.003" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testLocalFunctionInlining5" time="0.003" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testLocalFunctionInlining6" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testLocalFunctionInliningOnly1" time="0.005" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testLocalFunctionInliningOnly2" time="0.005" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testLocalFunctionInliningOnly3" time="0.006" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testLocalFunctionInliningOnly4" time="0.004" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testInlineWithThis1" time="0.01" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testInlineWithThis2" time="0.005" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testInlineWithThis3" time="0.005" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testInlineWithThis4" time="0.006" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testInlineWithThis5" time="0.006" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testInlineWithThis6" time="0.004" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testInlineWithThis7" time="0.002">
    <error message="INTERNAL COMPILER ERROR.&#xa;Please report this problem.&#xa;&#xa;The name a$$inline_0 is not consistently annotated as constant.&#xa;  Node(NAME a$$inline_0): testcode:1:14&#xa;function f(a){a=1;this} f.call();&#xa;  Parent(ASSIGN): testcode:1:14&#xa;function f(a){a=1;this} f.call();&#xa;" type="java.lang.RuntimeException">java.lang.RuntimeException: INTERNAL COMPILER ERROR.
Please report this problem.

The name a$$inline_0 is not consistently annotated as constant.
  Node(NAME a$$inline_0): testcode:1:14
function f(a){a=1;this} f.call();
  Parent(ASSIGN): testcode:1:14
function f(a){a=1;this} f.call();

	at com.google.common.base.Preconditions.checkState(Preconditions.java:197)
	at com.google.javascript.jscomp.Normalize$VerifyConstants.visit(Normalize.java:333)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:576)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseRoots(NodeTraversal.java:308)
	at com.google.javascript.jscomp.NodeTraversal.traverseRoots(NodeTraversal.java:538)
	at com.google.javascript.jscomp.Normalize$VerifyConstants.process(Normalize.java:284)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1063)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineFunctionsTest.testInlineWithThis7(InlineFunctionsTest.java:1916)
Caused by: java.lang.IllegalStateException: The name a$$inline_0 is not consistently annotated as constant.
</error>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testFunctionExpressionYCombinator" time="0.012">
    <error message="INTERNAL COMPILER ERROR.&#xa;Please report this problem.&#xa;&#xa;The name M$$inline_4 is not consistently annotated as constant.&#xa;  Node(NAME M$$inline_4): testcode:3:24&#xa;                 return M(function(arg) {&#xa;  Parent(CALL): testcode:3:24&#xa;                 return M(function(arg) {&#xa;" type="java.lang.RuntimeException">java.lang.RuntimeException: INTERNAL COMPILER ERROR.
Please report this problem.

The name M$$inline_4 is not consistently annotated as constant.
  Node(NAME M$$inline_4): testcode:3:24
                 return M(function(arg) {
  Parent(CALL): testcode:3:24
                 return M(function(arg) {

	at com.google.common.base.Preconditions.checkState(Preconditions.java:197)
	at com.google.javascript.jscomp.Normalize$VerifyConstants.visit(Normalize.java:333)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:576)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseFunction(NodeTraversal.java:610)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:562)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseRoots(NodeTraversal.java:308)
	at com.google.javascript.jscomp.NodeTraversal.traverseRoots(NodeTraversal.java:538)
	at com.google.javascript.jscomp.Normalize$VerifyConstants.process(Normalize.java:284)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1063)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineFunctionsTest.testFunctionExpressionYCombinator(InlineFunctionsTest.java:1950)
Caused by: java.lang.IllegalStateException: The name M$$inline_4 is not consistently annotated as constant.
</error>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testRenamePropertyFunction" time="0.003" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testReplacePropertyFunction" time="0.006" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testInlineWithClosureContainingThis" time="0.004" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testIssue5159924a" time="0.003" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testIssue5159924b" time="0.003">
    <failure message="&#xa;Expected: for(;1;){var m;JSCompiler_inline_label_f_0:{if(x()){m=y();break JSCompiler_inline_label_f_0}m=void 0}}&#xa;Result:   for(;1;){var JSCompiler_inline_result$$0;JSCompiler_inline_label_f_1:{if(x()){JSCompiler_inline_result$$0=y();break JSCompiler_inline_label_f_1}JSCompiler_inline_result$$0=void 0}var m=JSCompiler_inline_result$$0}&#xa;Node tree inequality:&#xa;Expected tree:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;        FOR 1 [source_file: expected0]&#xa;            EMPTY 1 [source_file: expected0]&#xa;            NUMBER 1.0 1 [source_file: expected0]&#xa;            EMPTY 1 [source_file: expected0]&#xa;            BLOCK 1 [source_file: expected0]&#xa;                VAR 1 [source_file: expected0]&#xa;                    NAME m 1 [is_constant_name: 1] [source_file: expected0]&#xa;                BLOCK 1 [source_file: expected0]&#xa;                    LABEL 1 [source_file: expected0]&#xa;                        LABEL_NAME JSCompiler_inline_label_f_0 1 [source_file: expected0]&#xa;                        BLOCK 1 [source_file: expected0]&#xa;                            IF 1 [source_file: expected0]&#xa;                                CALL 1 [free_call: 1] [source_file: expected0]&#xa;                                    NAME x 1 [is_constant_name: 1] [source_file: expected0]&#xa;                                BLOCK 1 [source_file: expected0]&#xa;                                    EXPR_RESULT 1 [source_file: expected0]&#xa;                                        ASSIGN 1 [source_file: expected0]&#xa;                                            NAME m 1 [is_constant_name: 1] [source_file: expected0]&#xa;                                            CALL 1 [free_call: 1] [source_file: expected0]&#xa;                                                NAME y 1 [is_constant_name: 1] [source_file: expected0]&#xa;                                    BREAK 1 [source_file: expected0]&#xa;                                        LABEL_NAME JSCompiler_inline_label_f_0 1 [source_file: expected0]&#xa;                            EXPR_RESULT 1 [source_file: expected0]&#xa;                                ASSIGN 1 [source_file: expected0]&#xa;                                    NAME m 1 [is_constant_name: 1] [source_file: expected0]&#xa;                                    VOID 1 [source_file: expected0]&#xa;                                        NUMBER 0.0 1 [source_file: expected0]&#xa;&#xa;&#xa;Actual tree:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;        FOR 2 [source_file: testcode]&#xa;            EMPTY 2 [source_file: testcode]&#xa;            NUMBER 1.0 2 [source_file: testcode]&#xa;            EMPTY 2 [source_file: testcode]&#xa;            BLOCK 2 [source_file: testcode]&#xa;                VAR 2 [source_file: testcode]&#xa;                    NAME JSCompiler_inline_result$$0 2 [source_file: testcode]&#xa;                BLOCK 1 [source_file: testcode]&#xa;                    LABEL 1 [source_file: testcode]&#xa;                        LABEL_NAME JSCompiler_inline_label_f_1 1 [source_file: testcode]&#xa;                        BLOCK 1 [source_file: testcode]&#xa;                            IF 1 [source_file: testcode]&#xa;                                CALL 1 [free_call: 1] [source_file: testcode]&#xa;                                    NAME x 1 [is_constant_name: 1] [source_file: testcode]&#xa;                                BLOCK 1 [added_block: 1] [source_file: testcode]&#xa;                                    EXPR_RESULT 1 [source_file: testcode]&#xa;                                        ASSIGN 1 [source_file: testcode]&#xa;                                            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;                                            CALL 1 [free_call: 1] [source_file: testcode]&#xa;                                                NAME y 1 [is_constant_name: 1] [source_file: testcode]&#xa;                                    BREAK 1 [source_file: testcode]&#xa;                                        LABEL_NAME JSCompiler_inline_label_f_1 1 [source_file: testcode]&#xa;                            EXPR_RESULT 1 [source_file: testcode]&#xa;                                ASSIGN 1 [source_file: testcode]&#xa;                                    NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;                                    VOID 1 [source_file: testcode]&#xa;                                        NUMBER 0.0 1 [source_file: testcode]&#xa;                VAR 2 [source_file: testcode]&#xa;                    NAME m 2 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]&#xa;                        NAME JSCompiler_inline_result$$0 2 [source_file: testcode]&#xa;&#xa;&#xa;Expected subtree: BLOCK 1 [source_file: expected0]&#xa;    VAR 1 [source_file: expected0]&#xa;        NAME m 1 [is_constant_name: 1] [source_file: expected0]&#xa;    BLOCK 1 [source_file: expected0]&#xa;        LABEL 1 [source_file: expected0]&#xa;            LABEL_NAME JSCompiler_inline_label_f_0 1 [source_file: expected0]&#xa;            BLOCK 1 [source_file: expected0]&#xa;                IF 1 [source_file: expected0]&#xa;                    CALL 1 [free_call: 1] [source_file: expected0]&#xa;                        NAME x 1 [is_constant_name: 1] [source_file: expected0]&#xa;                    BLOCK 1 [source_file: expected0]&#xa;                        EXPR_RESULT 1 [source_file: expected0]&#xa;                            ASSIGN 1 [source_file: expected0]&#xa;                                NAME m 1 [is_constant_name: 1] [source_file: expected0]&#xa;                                CALL 1 [free_call: 1] [source_file: expected0]&#xa;                                    NAME y 1 [is_constant_name: 1] [source_file: expected0]&#xa;                        BREAK 1 [source_file: expected0]&#xa;                            LABEL_NAME JSCompiler_inline_label_f_0 1 [source_file: expected0]&#xa;                EXPR_RESULT 1 [source_file: expected0]&#xa;                    ASSIGN 1 [source_file: expected0]&#xa;                        NAME m 1 [is_constant_name: 1] [source_file: expected0]&#xa;                        VOID 1 [source_file: expected0]&#xa;                            NUMBER 0.0 1 [source_file: expected0]&#xa;&#xa;&#xa;Actual subtree: BLOCK 2 [source_file: testcode]&#xa;    VAR 2 [source_file: testcode]&#xa;        NAME JSCompiler_inline_result$$0 2 [source_file: testcode]&#xa;    BLOCK 1 [source_file: testcode]&#xa;        LABEL 1 [source_file: testcode]&#xa;            LABEL_NAME JSCompiler_inline_label_f_1 1 [source_file: testcode]&#xa;            BLOCK 1 [source_file: testcode]&#xa;                IF 1 [source_file: testcode]&#xa;                    CALL 1 [free_call: 1] [source_file: testcode]&#xa;                        NAME x 1 [is_constant_name: 1] [source_file: testcode]&#xa;                    BLOCK 1 [added_block: 1] [source_file: testcode]&#xa;                        EXPR_RESULT 1 [source_file: testcode]&#xa;                            ASSIGN 1 [source_file: testcode]&#xa;                                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;                                CALL 1 [free_call: 1] [source_file: testcode]&#xa;                                    NAME y 1 [is_constant_name: 1] [source_file: testcode]&#xa;                        BREAK 1 [source_file: testcode]&#xa;                            LABEL_NAME JSCompiler_inline_label_f_1 1 [source_file: testcode]&#xa;                EXPR_RESULT 1 [source_file: testcode]&#xa;                    ASSIGN 1 [source_file: testcode]&#xa;                        NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;                        VOID 1 [source_file: testcode]&#xa;                            NUMBER 0.0 1 [source_file: testcode]&#xa;    VAR 2 [source_file: testcode]&#xa;        NAME m 2 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]&#xa;            NAME JSCompiler_inline_result$$0 2 [source_file: testcode]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: for(;1;){var m;JSCompiler_inline_label_f_0:{if(x()){m=y();break JSCompiler_inline_label_f_0}m=void 0}}
Result:   for(;1;){var JSCompiler_inline_result$$0;JSCompiler_inline_label_f_1:{if(x()){JSCompiler_inline_result$$0=y();break JSCompiler_inline_label_f_1}JSCompiler_inline_result$$0=void 0}var m=JSCompiler_inline_result$$0}
Node tree inequality:
Expected tree:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        FOR 1 [source_file: expected0]
            EMPTY 1 [source_file: expected0]
            NUMBER 1.0 1 [source_file: expected0]
            EMPTY 1 [source_file: expected0]
            BLOCK 1 [source_file: expected0]
                VAR 1 [source_file: expected0]
                    NAME m 1 [is_constant_name: 1] [source_file: expected0]
                BLOCK 1 [source_file: expected0]
                    LABEL 1 [source_file: expected0]
                        LABEL_NAME JSCompiler_inline_label_f_0 1 [source_file: expected0]
                        BLOCK 1 [source_file: expected0]
                            IF 1 [source_file: expected0]
                                CALL 1 [free_call: 1] [source_file: expected0]
                                    NAME x 1 [is_constant_name: 1] [source_file: expected0]
                                BLOCK 1 [source_file: expected0]
                                    EXPR_RESULT 1 [source_file: expected0]
                                        ASSIGN 1 [source_file: expected0]
                                            NAME m 1 [is_constant_name: 1] [source_file: expected0]
                                            CALL 1 [free_call: 1] [source_file: expected0]
                                                NAME y 1 [is_constant_name: 1] [source_file: expected0]
                                    BREAK 1 [source_file: expected0]
                                        LABEL_NAME JSCompiler_inline_label_f_0 1 [source_file: expected0]
                            EXPR_RESULT 1 [source_file: expected0]
                                ASSIGN 1 [source_file: expected0]
                                    NAME m 1 [is_constant_name: 1] [source_file: expected0]
                                    VOID 1 [source_file: expected0]
                                        NUMBER 0.0 1 [source_file: expected0]


Actual tree:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
        FOR 2 [source_file: testcode]
            EMPTY 2 [source_file: testcode]
            NUMBER 1.0 2 [source_file: testcode]
            EMPTY 2 [source_file: testcode]
            BLOCK 2 [source_file: testcode]
                VAR 2 [source_file: testcode]
                    NAME JSCompiler_inline_result$$0 2 [source_file: testcode]
                BLOCK 1 [source_file: testcode]
                    LABEL 1 [source_file: testcode]
                        LABEL_NAME JSCompiler_inline_label_f_1 1 [source_file: testcode]
                        BLOCK 1 [source_file: testcode]
                            IF 1 [source_file: testcode]
                                CALL 1 [free_call: 1] [source_file: testcode]
                                    NAME x 1 [is_constant_name: 1] [source_file: testcode]
                                BLOCK 1 [added_block: 1] [source_file: testcode]
                                    EXPR_RESULT 1 [source_file: testcode]
                                        ASSIGN 1 [source_file: testcode]
                                            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
                                            CALL 1 [free_call: 1] [source_file: testcode]
                                                NAME y 1 [is_constant_name: 1] [source_file: testcode]
                                    BREAK 1 [source_file: testcode]
                                        LABEL_NAME JSCompiler_inline_label_f_1 1 [source_file: testcode]
                            EXPR_RESULT 1 [source_file: testcode]
                                ASSIGN 1 [source_file: testcode]
                                    NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
                                    VOID 1 [source_file: testcode]
                                        NUMBER 0.0 1 [source_file: testcode]
                VAR 2 [source_file: testcode]
                    NAME m 2 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]
                        NAME JSCompiler_inline_result$$0 2 [source_file: testcode]


Expected subtree: BLOCK 1 [source_file: expected0]
    VAR 1 [source_file: expected0]
        NAME m 1 [is_constant_name: 1] [source_file: expected0]
    BLOCK 1 [source_file: expected0]
        LABEL 1 [source_file: expected0]
            LABEL_NAME JSCompiler_inline_label_f_0 1 [source_file: expected0]
            BLOCK 1 [source_file: expected0]
                IF 1 [source_file: expected0]
                    CALL 1 [free_call: 1] [source_file: expected0]
                        NAME x 1 [is_constant_name: 1] [source_file: expected0]
                    BLOCK 1 [source_file: expected0]
                        EXPR_RESULT 1 [source_file: expected0]
                            ASSIGN 1 [source_file: expected0]
                                NAME m 1 [is_constant_name: 1] [source_file: expected0]
                                CALL 1 [free_call: 1] [source_file: expected0]
                                    NAME y 1 [is_constant_name: 1] [source_file: expected0]
                        BREAK 1 [source_file: expected0]
                            LABEL_NAME JSCompiler_inline_label_f_0 1 [source_file: expected0]
                EXPR_RESULT 1 [source_file: expected0]
                    ASSIGN 1 [source_file: expected0]
                        NAME m 1 [is_constant_name: 1] [source_file: expected0]
                        VOID 1 [source_file: expected0]
                            NUMBER 0.0 1 [source_file: expected0]


Actual subtree: BLOCK 2 [source_file: testcode]
    VAR 2 [source_file: testcode]
        NAME JSCompiler_inline_result$$0 2 [source_file: testcode]
    BLOCK 1 [source_file: testcode]
        LABEL 1 [source_file: testcode]
            LABEL_NAME JSCompiler_inline_label_f_1 1 [source_file: testcode]
            BLOCK 1 [source_file: testcode]
                IF 1 [source_file: testcode]
                    CALL 1 [free_call: 1] [source_file: testcode]
                        NAME x 1 [is_constant_name: 1] [source_file: testcode]
                    BLOCK 1 [added_block: 1] [source_file: testcode]
                        EXPR_RESULT 1 [source_file: testcode]
                            ASSIGN 1 [source_file: testcode]
                                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
                                CALL 1 [free_call: 1] [source_file: testcode]
                                    NAME y 1 [is_constant_name: 1] [source_file: testcode]
                        BREAK 1 [source_file: testcode]
                            LABEL_NAME JSCompiler_inline_label_f_1 1 [source_file: testcode]
                EXPR_RESULT 1 [source_file: testcode]
                    ASSIGN 1 [source_file: testcode]
                        NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
                        VOID 1 [source_file: testcode]
                            NUMBER 0.0 1 [source_file: testcode]
    VAR 2 [source_file: testcode]
        NAME m 2 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]
            NAME JSCompiler_inline_result$$0 2 [source_file: testcode]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineFunctionsTest.testIssue5159924b(InlineFunctionsTest.java:2036)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testInlineObject" time="0.004" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testBug4944818" time="0.003">
    <error message="Unexpected." type="java.lang.IllegalStateException">java.lang.IllegalStateException: Unexpected.
	at com.google.javascript.jscomp.ExpressionDecomposer.extractConditional(ExpressionDecomposer.java:379)
	at com.google.javascript.jscomp.ExpressionDecomposer.exposeExpression(ExpressionDecomposer.java:236)
	at com.google.javascript.jscomp.ExpressionDecomposer.exposeExpression(ExpressionDecomposer.java:103)
	at com.google.javascript.jscomp.ExpressionDecomposer.maybeExposeExpression(ExpressionDecomposer.java:85)
	at com.google.javascript.jscomp.FunctionInjector$CallSiteType$6.prepare(FunctionInjector.java:389)
	at com.google.javascript.jscomp.FunctionInjector.maybePrepareCall(FunctionInjector.java:467)
	at com.google.javascript.jscomp.InlineFunctions.decomposeExpressions(InlineFunctions.java:825)
	at com.google.javascript.jscomp.InlineFunctions.process(InlineFunctions.java:142)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1044)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineFunctionsTest.testBug4944818(InlineFunctionsTest.java:2099)
</error>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testIssue423" time="0.008">
    <error message="INTERNAL COMPILER ERROR.&#xa;Please report this problem.&#xa;&#xa;The name $$$inline_0 is not consistently annotated as constant.&#xa;  Node(NAME $$$inline_0): testcode:7:25&#xa;    options.checkboxes = $(this).siblings(&apos;:checkbox&apos;);&#xa;  Parent(CALL): testcode:7:25&#xa;    options.checkboxes = $(this).siblings(&apos;:checkbox&apos;);&#xa;" type="java.lang.RuntimeException">java.lang.RuntimeException: INTERNAL COMPILER ERROR.
Please report this problem.

The name $$$inline_0 is not consistently annotated as constant.
  Node(NAME $$$inline_0): testcode:7:25
    options.checkboxes = $(this).siblings(&apos;:checkbox&apos;);
  Parent(CALL): testcode:7:25
    options.checkboxes = $(this).siblings(&apos;:checkbox&apos;);

	at com.google.common.base.Preconditions.checkState(Preconditions.java:197)
	at com.google.javascript.jscomp.Normalize$VerifyConstants.visit(Normalize.java:333)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:576)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseFunction(NodeTraversal.java:610)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:562)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseRoots(NodeTraversal.java:308)
	at com.google.javascript.jscomp.NodeTraversal.traverseRoots(NodeTraversal.java:538)
	at com.google.javascript.jscomp.Normalize$VerifyConstants.process(Normalize.java:284)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1063)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineFunctionsTest.testIssue423(InlineFunctionsTest.java:2164)
Caused by: java.lang.IllegalStateException: The name $$$inline_0 is not consistently annotated as constant.
</error>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testIssue728" time="0.018" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testAnonymous1" time="0.008" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testAnonymous2" time="0.003" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testAnonymous3" time="0.008" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testLoopWithFunctionWithFunction" time="0.008" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testMethodWithFunctionWithFunction" time="0.004">
    <error message="INTERNAL COMPILER ERROR.&#xa;Please report this problem.&#xa;&#xa;The name j$$inline_0 is not consistently annotated as constant.&#xa;  Node(NAME j$$inline_0): testcode:6:42&#xa;        setTimeout(function() { result += j; }, 5 * i);&#xa;  Parent(ASSIGN_ADD): testcode:6:32&#xa;        setTimeout(function() { result += j; }, 5 * i);&#xa;" type="java.lang.RuntimeException">java.lang.RuntimeException: INTERNAL COMPILER ERROR.
Please report this problem.

The name j$$inline_0 is not consistently annotated as constant.
  Node(NAME j$$inline_0): testcode:6:42
        setTimeout(function() { result += j; }, 5 * i);
  Parent(ASSIGN_ADD): testcode:6:32
        setTimeout(function() { result += j; }, 5 * i);

	at com.google.common.base.Preconditions.checkState(Preconditions.java:197)
	at com.google.javascript.jscomp.Normalize$VerifyConstants.visit(Normalize.java:333)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:576)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseFunction(NodeTraversal.java:610)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:562)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseFunction(NodeTraversal.java:610)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:562)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseRoots(NodeTraversal.java:308)
	at com.google.javascript.jscomp.NodeTraversal.traverseRoots(NodeTraversal.java:538)
	at com.google.javascript.jscomp.Normalize$VerifyConstants.process(Normalize.java:284)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1063)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineFunctionsTest.testMethodWithFunctionWithFunction(InlineFunctionsTest.java:2270)
Caused by: java.lang.IllegalStateException: The name j$$inline_0 is not consistently annotated as constant.
</error>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testCrossModuleInlining1" time="0.003" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testCrossModuleInlining2" time="0.007" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testCrossModuleInlining3" time="0.007" />
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="test6671158" time="0.003">
    <error message="Unexpected." type="java.lang.IllegalStateException">java.lang.IllegalStateException: Unexpected.
	at com.google.javascript.jscomp.ExpressionDecomposer.extractConditional(ExpressionDecomposer.java:379)
	at com.google.javascript.jscomp.ExpressionDecomposer.exposeExpression(ExpressionDecomposer.java:236)
	at com.google.javascript.jscomp.ExpressionDecomposer.exposeExpression(ExpressionDecomposer.java:103)
	at com.google.javascript.jscomp.ExpressionDecomposer.maybeExposeExpression(ExpressionDecomposer.java:85)
	at com.google.javascript.jscomp.FunctionInjector$CallSiteType$6.prepare(FunctionInjector.java:389)
	at com.google.javascript.jscomp.FunctionInjector.maybePrepareCall(FunctionInjector.java:467)
	at com.google.javascript.jscomp.InlineFunctions.decomposeExpressions(InlineFunctions.java:825)
	at com.google.javascript.jscomp.InlineFunctions.process(InlineFunctions.java:142)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1044)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineFunctionsTest.test6671158(InlineFunctionsTest.java:2371)
</error>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="test6671158b" time="0.002">
    <error message="Unexpected." type="java.lang.IllegalStateException">java.lang.IllegalStateException: Unexpected.
	at com.google.javascript.jscomp.ExpressionDecomposer.extractConditional(ExpressionDecomposer.java:379)
	at com.google.javascript.jscomp.ExpressionDecomposer.exposeExpression(ExpressionDecomposer.java:236)
	at com.google.javascript.jscomp.ExpressionDecomposer.exposeExpression(ExpressionDecomposer.java:103)
	at com.google.javascript.jscomp.ExpressionDecomposer.maybeExposeExpression(ExpressionDecomposer.java:85)
	at com.google.javascript.jscomp.FunctionInjector$CallSiteType$6.prepare(FunctionInjector.java:389)
	at com.google.javascript.jscomp.FunctionInjector.maybePrepareCall(FunctionInjector.java:467)
	at com.google.javascript.jscomp.InlineFunctions.decomposeExpressions(InlineFunctions.java:825)
	at com.google.javascript.jscomp.InlineFunctions.process(InlineFunctions.java:142)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1044)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineFunctionsTest.test6671158b(InlineFunctionsTest.java:2395)
</error>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="test8609285a" time="0.002">
    <error message="INTERNAL COMPILER ERROR.&#xa;Please report this problem.&#xa;&#xa;The name x$$inline_0 is not consistently annotated as constant.&#xa;  Node(NAME x$$inline_0): testcode:1:19&#xa;function f(x){ for(x in y){} } f()&#xa;  Parent(FOR): testcode:1:15&#xa;function f(x){ for(x in y){} } f()&#xa;" type="java.lang.RuntimeException">java.lang.RuntimeException: INTERNAL COMPILER ERROR.
Please report this problem.

The name x$$inline_0 is not consistently annotated as constant.
  Node(NAME x$$inline_0): testcode:1:19
function f(x){ for(x in y){} } f()
  Parent(FOR): testcode:1:15
function f(x){ for(x in y){} } f()

	at com.google.common.base.Preconditions.checkState(Preconditions.java:197)
	at com.google.javascript.jscomp.Normalize$VerifyConstants.visit(Normalize.java:333)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:576)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseRoots(NodeTraversal.java:308)
	at com.google.javascript.jscomp.NodeTraversal.traverseRoots(NodeTraversal.java:538)
	at com.google.javascript.jscomp.Normalize$VerifyConstants.process(Normalize.java:284)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1063)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineFunctionsTest.test8609285a(InlineFunctionsTest.java:2418)
Caused by: java.lang.IllegalStateException: The name x$$inline_0 is not consistently annotated as constant.
</error>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="test8609285b" time="0.002">
    <error message="INTERNAL COMPILER ERROR.&#xa;Please report this problem.&#xa;&#xa;The name x$$inline_0 is not consistently annotated as constant.&#xa;  Node(NAME x$$inline_0): testcode:1:23&#xa;function f(x){ for(var x in y){} } f()&#xa;  Parent(FOR): testcode:1:15&#xa;function f(x){ for(var x in y){} } f()&#xa;" type="java.lang.RuntimeException">java.lang.RuntimeException: INTERNAL COMPILER ERROR.
Please report this problem.

The name x$$inline_0 is not consistently annotated as constant.
  Node(NAME x$$inline_0): testcode:1:23
function f(x){ for(var x in y){} } f()
  Parent(FOR): testcode:1:15
function f(x){ for(var x in y){} } f()

	at com.google.common.base.Preconditions.checkState(Preconditions.java:197)
	at com.google.javascript.jscomp.Normalize$VerifyConstants.visit(Normalize.java:333)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:576)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseRoots(NodeTraversal.java:308)
	at com.google.javascript.jscomp.NodeTraversal.traverseRoots(NodeTraversal.java:538)
	at com.google.javascript.jscomp.Normalize$VerifyConstants.process(Normalize.java:284)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1063)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineFunctionsTest.test8609285b(InlineFunctionsTest.java:2424)
Caused by: java.lang.IllegalStateException: The name x$$inline_0 is not consistently annotated as constant.
</error>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testIssue1101" time="0.004">
    <failure message="&#xa;Expected: var x;var saved$$inline_0=obj[&quot;prop&quot;];x=modifyObjProp(obj)+saved$$inline_0&#xa;Result:   var JSCompiler_inline_result$$0;var saved$$inline_1=obj[&quot;prop&quot;];JSCompiler_inline_result$$0=modifyObjProp(obj)+saved$$inline_1;var x=JSCompiler_inline_result$$0&#xa;Node tree inequality:&#xa;Expected tree:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;        VAR 1 [source_file: expected0]&#xa;            NAME x 1 [is_constant_name: 1] [source_file: expected0]&#xa;        BLOCK 1 [source_file: expected0]&#xa;            VAR 1 [source_file: expected0]&#xa;                NAME saved$$inline_0 1 [source_file: expected0]&#xa;                    GETELEM 1 [source_file: expected0]&#xa;                        NAME obj 1 [source_file: expected0]&#xa;                        STRING prop 1 [source_file: expected0]&#xa;            EXPR_RESULT 1 [source_file: expected0]&#xa;                ASSIGN 1 [source_file: expected0]&#xa;                    NAME x 1 [is_constant_name: 1] [source_file: expected0]&#xa;                    ADD 1 [source_file: expected0]&#xa;                        CALL 1 [free_call: 1] [source_file: expected0]&#xa;                            NAME modifyObjProp 1 [source_file: expected0]&#xa;                            NAME obj 1 [source_file: expected0]&#xa;                        NAME saved$$inline_0 2 [source_file: expected0]&#xa;&#xa;&#xa;Actual tree:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;        BLOCK 1 [source_file: testcode]&#xa;            VAR 1 [source_file: testcode]&#xa;                NAME saved$$inline_1 1 [source_file: testcode]&#xa;                    GETELEM 1 [source_file: testcode]&#xa;                        NAME obj 1 [source_file: testcode]&#xa;                        STRING prop 1 [source_file: testcode]&#xa;            EXPR_RESULT 1 [source_file: testcode]&#xa;                ASSIGN 1 [source_file: testcode]&#xa;                    NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;                    ADD 1 [source_file: testcode]&#xa;                        CALL 1 [free_call: 1] [source_file: testcode]&#xa;                            NAME modifyObjProp 1 [source_file: testcode]&#xa;                            NAME obj 1 [source_file: testcode]&#xa;                        NAME saved$$inline_1 1 [source_file: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME x 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]&#xa;                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;&#xa;&#xa;Expected subtree: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;    VAR 1 [source_file: expected0]&#xa;        NAME x 1 [is_constant_name: 1] [source_file: expected0]&#xa;    BLOCK 1 [source_file: expected0]&#xa;        VAR 1 [source_file: expected0]&#xa;            NAME saved$$inline_0 1 [source_file: expected0]&#xa;                GETELEM 1 [source_file: expected0]&#xa;                    NAME obj 1 [source_file: expected0]&#xa;                    STRING prop 1 [source_file: expected0]&#xa;        EXPR_RESULT 1 [source_file: expected0]&#xa;            ASSIGN 1 [source_file: expected0]&#xa;                NAME x 1 [is_constant_name: 1] [source_file: expected0]&#xa;                ADD 1 [source_file: expected0]&#xa;                    CALL 1 [free_call: 1] [source_file: expected0]&#xa;                        NAME modifyObjProp 1 [source_file: expected0]&#xa;                        NAME obj 1 [source_file: expected0]&#xa;                    NAME saved$$inline_0 2 [source_file: expected0]&#xa;&#xa;&#xa;Actual subtree: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;    BLOCK 1 [source_file: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME saved$$inline_1 1 [source_file: testcode]&#xa;                GETELEM 1 [source_file: testcode]&#xa;                    NAME obj 1 [source_file: testcode]&#xa;                    STRING prop 1 [source_file: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            ASSIGN 1 [source_file: testcode]&#xa;                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;                ADD 1 [source_file: testcode]&#xa;                    CALL 1 [free_call: 1] [source_file: testcode]&#xa;                        NAME modifyObjProp 1 [source_file: testcode]&#xa;                        NAME obj 1 [source_file: testcode]&#xa;                    NAME saved$$inline_1 1 [source_file: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME x 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]&#xa;            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: var x;var saved$$inline_0=obj[&quot;prop&quot;];x=modifyObjProp(obj)+saved$$inline_0
Result:   var JSCompiler_inline_result$$0;var saved$$inline_1=obj[&quot;prop&quot;];JSCompiler_inline_result$$0=modifyObjProp(obj)+saved$$inline_1;var x=JSCompiler_inline_result$$0
Node tree inequality:
Expected tree:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        VAR 1 [source_file: expected0]
            NAME x 1 [is_constant_name: 1] [source_file: expected0]
        BLOCK 1 [source_file: expected0]
            VAR 1 [source_file: expected0]
                NAME saved$$inline_0 1 [source_file: expected0]
                    GETELEM 1 [source_file: expected0]
                        NAME obj 1 [source_file: expected0]
                        STRING prop 1 [source_file: expected0]
            EXPR_RESULT 1 [source_file: expected0]
                ASSIGN 1 [source_file: expected0]
                    NAME x 1 [is_constant_name: 1] [source_file: expected0]
                    ADD 1 [source_file: expected0]
                        CALL 1 [free_call: 1] [source_file: expected0]
                            NAME modifyObjProp 1 [source_file: expected0]
                            NAME obj 1 [source_file: expected0]
                        NAME saved$$inline_0 2 [source_file: expected0]


Actual tree:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
        VAR 1 [source_file: testcode]
            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
        BLOCK 1 [source_file: testcode]
            VAR 1 [source_file: testcode]
                NAME saved$$inline_1 1 [source_file: testcode]
                    GETELEM 1 [source_file: testcode]
                        NAME obj 1 [source_file: testcode]
                        STRING prop 1 [source_file: testcode]
            EXPR_RESULT 1 [source_file: testcode]
                ASSIGN 1 [source_file: testcode]
                    NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
                    ADD 1 [source_file: testcode]
                        CALL 1 [free_call: 1] [source_file: testcode]
                            NAME modifyObjProp 1 [source_file: testcode]
                            NAME obj 1 [source_file: testcode]
                        NAME saved$$inline_1 1 [source_file: testcode]
        VAR 1 [source_file: testcode]
            NAME x 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]
                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]


Expected subtree: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
    VAR 1 [source_file: expected0]
        NAME x 1 [is_constant_name: 1] [source_file: expected0]
    BLOCK 1 [source_file: expected0]
        VAR 1 [source_file: expected0]
            NAME saved$$inline_0 1 [source_file: expected0]
                GETELEM 1 [source_file: expected0]
                    NAME obj 1 [source_file: expected0]
                    STRING prop 1 [source_file: expected0]
        EXPR_RESULT 1 [source_file: expected0]
            ASSIGN 1 [source_file: expected0]
                NAME x 1 [is_constant_name: 1] [source_file: expected0]
                ADD 1 [source_file: expected0]
                    CALL 1 [free_call: 1] [source_file: expected0]
                        NAME modifyObjProp 1 [source_file: expected0]
                        NAME obj 1 [source_file: expected0]
                    NAME saved$$inline_0 2 [source_file: expected0]


Actual subtree: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
    VAR 1 [source_file: testcode]
        NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
    BLOCK 1 [source_file: testcode]
        VAR 1 [source_file: testcode]
            NAME saved$$inline_1 1 [source_file: testcode]
                GETELEM 1 [source_file: testcode]
                    NAME obj 1 [source_file: testcode]
                    STRING prop 1 [source_file: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            ASSIGN 1 [source_file: testcode]
                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]
                ADD 1 [source_file: testcode]
                    CALL 1 [free_call: 1] [source_file: testcode]
                        NAME modifyObjProp 1 [source_file: testcode]
                        NAME obj 1 [source_file: testcode]
                    NAME saved$$inline_1 1 [source_file: testcode]
    VAR 1 [source_file: testcode]
        NAME x 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]
            NAME JSCompiler_inline_result$$0 1 [source_file: testcode]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineFunctionsTest.testIssue1101(InlineFunctionsTest.java:2430)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineFunctionsTest" name="testMaxFunSizeAfterInlining" time="0.004">
    <failure message="&#xa;Expected: function f(){123}&#xa;Result:   function g(){return 123}function f(){g()}&#xa;Node tree inequality:&#xa;Expected tree:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;        FUNCTION f 1 [source_file: expected0]&#xa;            NAME f 1 [is_constant_name: 1] [source_file: expected0]&#xa;            PARAM_LIST 1 [source_file: expected0]&#xa;            BLOCK 1 [source_file: expected0]&#xa;                EXPR_RESULT 1 [source_file: expected0]&#xa;                    NUMBER 123.0 1 [source_file: expected0]&#xa;&#xa;&#xa;Actual tree:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;        FUNCTION g 1 [source_file: testcode]&#xa;            NAME g 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]&#xa;            PARAM_LIST 1 [source_file: testcode]&#xa;            BLOCK 1 [source_file: testcode]&#xa;                RETURN 1 [source_file: testcode]&#xa;                    NUMBER 123.0 1 [source_file: testcode]&#xa;        FUNCTION f 2 [source_file: testcode]&#xa;            NAME f 2 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]&#xa;            PARAM_LIST 2 [source_file: testcode]&#xa;            BLOCK 2 [source_file: testcode]&#xa;                EXPR_RESULT 2 [source_file: testcode]&#xa;                    CALL 2 [side_effect_flags: 31] [free_call: 1] [source_file: testcode]&#xa;                        NAME g 2 [is_constant_name: 1] [source_file: testcode]&#xa;&#xa;&#xa;Expected subtree: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;    FUNCTION f 1 [source_file: expected0]&#xa;        NAME f 1 [is_constant_name: 1] [source_file: expected0]&#xa;        PARAM_LIST 1 [source_file: expected0]&#xa;        BLOCK 1 [source_file: expected0]&#xa;            EXPR_RESULT 1 [source_file: expected0]&#xa;                NUMBER 123.0 1 [source_file: expected0]&#xa;&#xa;&#xa;Actual subtree: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;    FUNCTION g 1 [source_file: testcode]&#xa;        NAME g 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]&#xa;        PARAM_LIST 1 [source_file: testcode]&#xa;        BLOCK 1 [source_file: testcode]&#xa;            RETURN 1 [source_file: testcode]&#xa;                NUMBER 123.0 1 [source_file: testcode]&#xa;    FUNCTION f 2 [source_file: testcode]&#xa;        NAME f 2 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]&#xa;        PARAM_LIST 2 [source_file: testcode]&#xa;        BLOCK 2 [source_file: testcode]&#xa;            EXPR_RESULT 2 [source_file: testcode]&#xa;                CALL 2 [side_effect_flags: 31] [free_call: 1] [source_file: testcode]&#xa;                    NAME g 2 [is_constant_name: 1] [source_file: testcode]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: function f(){123}
Result:   function g(){return 123}function f(){g()}
Node tree inequality:
Expected tree:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        FUNCTION f 1 [source_file: expected0]
            NAME f 1 [is_constant_name: 1] [source_file: expected0]
            PARAM_LIST 1 [source_file: expected0]
            BLOCK 1 [source_file: expected0]
                EXPR_RESULT 1 [source_file: expected0]
                    NUMBER 123.0 1 [source_file: expected0]


Actual tree:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
        FUNCTION g 1 [source_file: testcode]
            NAME g 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]
            PARAM_LIST 1 [source_file: testcode]
            BLOCK 1 [source_file: testcode]
                RETURN 1 [source_file: testcode]
                    NUMBER 123.0 1 [source_file: testcode]
        FUNCTION f 2 [source_file: testcode]
            NAME f 2 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]
            PARAM_LIST 2 [source_file: testcode]
            BLOCK 2 [source_file: testcode]
                EXPR_RESULT 2 [source_file: testcode]
                    CALL 2 [side_effect_flags: 31] [free_call: 1] [source_file: testcode]
                        NAME g 2 [is_constant_name: 1] [source_file: testcode]


Expected subtree: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
    FUNCTION f 1 [source_file: expected0]
        NAME f 1 [is_constant_name: 1] [source_file: expected0]
        PARAM_LIST 1 [source_file: expected0]
        BLOCK 1 [source_file: expected0]
            EXPR_RESULT 1 [source_file: expected0]
                NUMBER 123.0 1 [source_file: expected0]


Actual subtree: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
    FUNCTION g 1 [source_file: testcode]
        NAME g 1 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]
        PARAM_LIST 1 [source_file: testcode]
        BLOCK 1 [source_file: testcode]
            RETURN 1 [source_file: testcode]
                NUMBER 123.0 1 [source_file: testcode]
    FUNCTION f 2 [source_file: testcode]
        NAME f 2 [is_constant_name: 1] [source_file: testcode] [is_constant_var: 1]
        PARAM_LIST 2 [source_file: testcode]
        BLOCK 2 [source_file: testcode]
            EXPR_RESULT 2 [source_file: testcode]
                CALL 2 [side_effect_flags: 31] [free_call: 1] [source_file: testcode]
                    NAME g 2 [is_constant_name: 1] [source_file: testcode]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineFunctionsTest.testMaxFunSizeAfterInlining(InlineFunctionsTest.java:2443)
</failure>
  </testcase>
  <system-out><![CDATA[]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
