<?xml version="1.0" encoding="UTF-8" ?>
<testsuite errors="6" failures="17" hostname="cs-210-206.cs.ucla.edu" name="com.google.javascript.jscomp.InlineVariablesTest" skipped="0" tests="142" time="0.529" timestamp="2015-03-09T03:17:26">
  <properties>
    <property name="java.vendor" value="Oracle Corporation" />
    <property name="lib.dir" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/lib" />
    <property name="refasterjs-jarfile" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/build/refasterjs.jar" />
    <property name="sun.java.launcher" value="SUN_STANDARD" />
    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers" />
    <property name="os.name" value="Mac OS X" />
    <property name="sun.boot.class.path" value="/Library/Java/JavaVirtualMachines/jdk1.7.0_75.jdk/Contents/Home/jre/lib/resources.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_75.jdk/Contents/Home/jre/lib/rt.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_75.jdk/Contents/Home/jre/lib/sunrsasign.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_75.jdk/Contents/Home/jre/lib/jsse.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_75.jdk/Contents/Home/jre/lib/jce.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_75.jdk/Contents/Home/jre/lib/charsets.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_75.jdk/Contents/Home/jre/lib/jfr.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_75.jdk/Contents/Home/jre/classes" />
    <property name="maven-repository-id" value="sonatype-nexus-staging" />
    <property name="java.vm.specification.vendor" value="Oracle Corporation" />
    <property name="ant.home" value="//Users/linmanna/ant" />
    <property name="java.runtime.version" value="1.7.0_75-b13" />
    <property name="gen.dir" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/gen" />
    <property name="user.name" value="linmanna" />
    <property name="ant.file.compiler" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/build.xml" />
    <property name="build.dir" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/build" />
    <property name="ant.build.javac.target" value="1.7" />
    <property name="user.language" value="zh" />
    <property name="test.method" value="" />
    <property name="sun.boot.library.path" value="/Library/Java/JavaVirtualMachines/jdk1.7.0_75.jdk/Contents/Home/jre/lib" />
    <property name="ant.project.default-target" value="jar" />
    <property name="ant.project.name" value="compiler" />
    <property name="java.version" value="1.7.0_75" />
    <property name="user.timezone" value="" />
    <property name="sun.arch.data.model" value="64" />
    <property name="http.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16" />
    <property name="java.endorsed.dirs" value="/Library/Java/JavaVirtualMachines/jdk1.7.0_75.jdk/Contents/Home/jre/lib/endorsed" />
    <property name="sun.cpu.isalist" value="" />
    <property name="sun.jnu.encoding" value="UTF-8" />
    <property name="file.encoding.pkg" value="sun.io" />
    <property name="file.separator" value="/" />
    <property name="java.specification.name" value="Java Platform API Specification" />
    <property name="protoc.executable" value="protoc" />
    <property name="classes.dir" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/build/classes" />
    <property name="java.class.version" value="51.0" />
    <property name="testClasses.dir" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/build/test" />
    <property name="user.country" value="CN" />
    <property name="java.home" value="/Library/Java/JavaVirtualMachines/jdk1.7.0_75.jdk/Contents/Home/jre" />
    <property name="java.vm.info" value="mixed mode" />
    <property name="externs.dir" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/externs" />
    <property name="ant.file" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/build.xml" />
    <property name="os.version" value="10.9.5" />
    <property name="javac.debug" value="on" />
    <property name="path.separator" value=":" />
    <property name="java.vm.version" value="24.75-b04" />
    <property name="ant.library.dir" value="//Users/linmanna/ant/lib" />
    <property name="java.awt.printerjob" value="sun.lwawt.macosx.CPrinterJob" />
    <property name="webservice-jarfile" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/build/webservice.jar" />
    <property name="sun.io.unicode.encoding" value="UnicodeBig" />
    <property name="test.fork" value="true" />
    <property name="webservice.dir" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/src/com/google/javascript/jscomp/webservice" />
    <property name="awt.toolkit" value="sun.lwawt.macosx.LWCToolkit" />
    <property name="buildlib.dir" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/build/lib" />
    <property name="socksNonProxyHosts" value="local|*.local|169.254/16|*.169.254/16" />
    <property name="ftp.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16" />
    <property name="ant.build.javac.source" value="1.7" />
    <property name="refasterjs.dir" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/src/com/google/javascript/refactoring" />
    <property name="user.home" value="/Users/linmanna" />
    <property name="java.specification.vendor" value="Oracle Corporation" />
    <property name="test.dir" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/test" />
    <property name="java.library.path" value="/Users/linmanna/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:." />
    <property name="java.vendor.url" value="http://java.oracle.com/" />
    <property name="java.vm.vendor" value="Oracle Corporation" />
    <property name="gopherProxySet" value="false" />
    <property name="build.relVersion" value="00e3533" />
    <property name="java.runtime.name" value="Java(TM) SE Runtime Environment" />
    <property name="sun.java.command" value="org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner testsfile=/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/junittestcases4622356093930181862.properties skipNonTests=false filtertrace=true haltOnError=false haltOnFailure=false formatter=org.apache.tools.ant.taskdefs.optional.junit.SummaryJUnitResultFormatter showoutput=true outputtoformatters=true logfailedtests=true threadid=0 logtestlistenerevents=false formatter=org.apache.tools.ant.taskdefs.optional.junit.BriefJUnitResultFormatter formatter=org.apache.tools.ant.taskdefs.optional.junit.XMLJUnitResultFormatter,/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/build/testoutput/IGNORETHIS.xml crashfile=/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/junitvmwatcher882389895192408063.properties propsfile=/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/junit6374663990081372210.properties" />
    <property name="java.class.path" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/build/classes:/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/lib/ant-launcher.jar:/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/lib/ant.jar:/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/lib/args4j.jar:/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/lib/gson.jar:/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/lib/guava.jar:/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/lib/jsr305.jar:/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/lib/junit.jar:/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/lib/protobuf-java.jar:/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/lib/truth.jar:/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/build/test:/Users/linmanna/ant/lib/ant-launcher.jar:/Users/linmanna/ant/lib/ant.jar:/Users/linmanna/ant/lib/ant-junit.jar:/Users/linmanna/ant/lib/ant-junit4.jar" />
    <property name="ant.version" value="Apache Ant(TM) version 1.9.4 compiled on April 29 2014" />
    <property name="test.class" value="*Test" />
    <property name="java.vm.specification.name" value="Java Virtual Machine Specification" />
    <property name="ant.file.type" value="file" />
    <property name="java.vm.specification.version" value="1.7" />
    <property name="sun.cpu.endian" value="little" />
    <property name="sun.os.patch.level" value="unknown" />
    <property name="java.io.tmpdir" value="/var/folders/_p/3swdt4h96dn79vyt21dtny9h0000gn/T/" />
    <property name="java.vendor.url.bug" value="http://bugreport.sun.com/bugreport/" />
    <property name="java.awt.graphicsenv" value="sun.awt.CGraphicsEnvironment" />
    <property name="maven-repository-url" value="https://oss.sonatype.org/service/local/staging/deploy/maven2/" />
    <property name="os.arch" value="x86_64" />
    <property name="webservice-classes.dir" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/build/webservice-classes" />
    <property name="java.ext.dirs" value="/Users/linmanna/Library/Java/Extensions:/Library/Java/JavaVirtualMachines/jdk1.7.0_75.jdk/Contents/Home/jre/lib/ext:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java" />
    <property name="user.dir" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler" />
    <property name="ant.file.type.compiler" value="file" />
    <property name="line.separator" value="&#xa;" />
    <property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM" />
    <property name="refasterjs-classes.dir" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/build/refasterjs-classes" />
    <property name="basedir" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler" />
    <property name="ant.java.version" value="1.7" />
    <property name="ant.core.lib" value="/Users/linmanna/ant/lib/ant.jar" />
    <property name="file.encoding" value="UTF-8" />
    <property name="closure.build.dir" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/build" />
    <property name="compiler-jarfile" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/build/compiler.jar" />
    <property name="java.specification.version" value="1.7" />
    <property name="src.dir" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/src" />
    <property name="ant.project.invoked-targets" value="clean,compile,compile-tests,test" />
    <property name="javadoc.dir" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/build/javadoc" />
    <property name="tools.dir" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/tools" />
  </properties>
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testNoInlineGetpropIntoCall" time="0.005" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testDoNotInlineIncrement" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testDoNotInlineIntoLhsOfAssign" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testDoNotExitLoop" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testForIn" time="0.009" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testHoistedFunction1" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testHoistedFunction2" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testRenamePropertyFunction" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInlineGlobal" time="0.001">
    <failure message="&#xa;Expected: var z=1&#xa;Result:   &#xa;Node tree inequality:&#xa;Tree1:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;        VAR 1 [source_file: expected0]&#xa;            NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;                NUMBER 1.0 1 [source_file: expected0]&#xa;&#xa;&#xa;Tree2:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;&#xa;&#xa;Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;    VAR 1 [source_file: expected0]&#xa;        NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;            NUMBER 1.0 1 [source_file: expected0]&#xa;&#xa;&#xa;Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: var z=1
Result:   
Node tree inequality:
Tree1:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        VAR 1 [source_file: expected0]
            NAME z 1 [is_constant_name: 1] [source_file: expected0]
                NUMBER 1.0 1 [source_file: expected0]


Tree2:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]


Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
    VAR 1 [source_file: expected0]
        NAME z 1 [is_constant_name: 1] [source_file: expected0]
            NUMBER 1.0 1 [source_file: expected0]


Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineVariablesTest.testInlineGlobal(InlineVariablesTest.java:61)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testNoInlineExportedName" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testNoInlineExportedName2" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testDoNotInlineDecrement" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInlineIntoRhsOfAssign" time="0.001">
    <failure message="&#xa;Expected: var y=1&#xa;Result:   &#xa;Node tree inequality:&#xa;Tree1:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;        VAR 1 [source_file: expected0]&#xa;            NAME y 1 [is_constant_name: 1] [source_file: expected0]&#xa;                NUMBER 1.0 1 [source_file: expected0]&#xa;&#xa;&#xa;Tree2:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;&#xa;&#xa;Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;    VAR 1 [source_file: expected0]&#xa;        NAME y 1 [is_constant_name: 1] [source_file: expected0]&#xa;            NUMBER 1.0 1 [source_file: expected0]&#xa;&#xa;&#xa;Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: var y=1
Result:   
Node tree inequality:
Tree1:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        VAR 1 [source_file: expected0]
            NAME y 1 [is_constant_name: 1] [source_file: expected0]
                NUMBER 1.0 1 [source_file: expected0]


Tree2:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]


Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
    VAR 1 [source_file: expected0]
        NAME y 1 [is_constant_name: 1] [source_file: expected0]
            NUMBER 1.0 1 [source_file: expected0]


Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineVariablesTest.testInlineIntoRhsOfAssign(InlineVariablesTest.java:86)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInlineInFunction" time="0.002">
    <failure message="&#xa;Expected: function baz(){var z=1}&#xa;Result:   function baz(){}&#xa;Node tree inequality:&#xa;Tree1:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;        FUNCTION baz 1 [source_file: expected0]&#xa;            NAME baz 1 [source_file: expected0]&#xa;            PARAM_LIST 1 [source_file: expected0]&#xa;            BLOCK 1 [source_file: expected0]&#xa;                VAR 1 [source_file: expected0]&#xa;                    NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;                        NUMBER 1.0 1 [source_file: expected0]&#xa;&#xa;&#xa;Tree2:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;        FUNCTION baz 1 [source_file: testcode]&#xa;            NAME baz 1 [source_file: testcode]&#xa;            PARAM_LIST 1 [source_file: testcode]&#xa;            BLOCK 1 [source_file: testcode]&#xa;&#xa;&#xa;Subtree1: BLOCK 1 [source_file: expected0]&#xa;    VAR 1 [source_file: expected0]&#xa;        NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;            NUMBER 1.0 1 [source_file: expected0]&#xa;&#xa;&#xa;Subtree2: BLOCK 1 [source_file: testcode]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: function baz(){var z=1}
Result:   function baz(){}
Node tree inequality:
Tree1:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        FUNCTION baz 1 [source_file: expected0]
            NAME baz 1 [source_file: expected0]
            PARAM_LIST 1 [source_file: expected0]
            BLOCK 1 [source_file: expected0]
                VAR 1 [source_file: expected0]
                    NAME z 1 [is_constant_name: 1] [source_file: expected0]
                        NUMBER 1.0 1 [source_file: expected0]


Tree2:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
        FUNCTION baz 1 [source_file: testcode]
            NAME baz 1 [source_file: testcode]
            PARAM_LIST 1 [source_file: testcode]
            BLOCK 1 [source_file: testcode]


Subtree1: BLOCK 1 [source_file: expected0]
    VAR 1 [source_file: expected0]
        NAME z 1 [is_constant_name: 1] [source_file: expected0]
            NUMBER 1.0 1 [source_file: expected0]


Subtree2: BLOCK 1 [source_file: testcode]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineVariablesTest.testInlineInFunction(InlineVariablesTest.java:90)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInlineInFunction2" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInlineInFunction3" time="0.003" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInlineInFunction4" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInlineInFunction5" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInlineAcrossModules" time="0.001">
    <failure message="&#xa;Expected: var b=2&#xa;Result:   &#xa;Node tree inequality:&#xa;Tree1:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected1] [input_id: InputId: expected1]&#xa;        VAR 1 [source_file: expected1]&#xa;            NAME b 1 [is_constant_name: 1] [source_file: expected1]&#xa;                NUMBER 2.0 1 [source_file: expected1]&#xa;&#xa;&#xa;Tree2:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: i0] [input_id: InputId: i0]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: i1] [input_id: InputId: i1]&#xa;&#xa;&#xa;Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected1] [input_id: InputId: expected1]&#xa;    VAR 1 [source_file: expected1]&#xa;        NAME b 1 [is_constant_name: 1] [source_file: expected1]&#xa;            NUMBER 2.0 1 [source_file: expected1]&#xa;&#xa;&#xa;Subtree2: SCRIPT 1 [synthetic: 1] [source_file: i1] [input_id: InputId: i1]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: var b=2
Result:   
Node tree inequality:
Tree1:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
    SCRIPT 1 [synthetic: 1] [source_file: expected1] [input_id: InputId: expected1]
        VAR 1 [source_file: expected1]
            NAME b 1 [is_constant_name: 1] [source_file: expected1]
                NUMBER 2.0 1 [source_file: expected1]


Tree2:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: i0] [input_id: InputId: i0]
    SCRIPT 1 [synthetic: 1] [source_file: i1] [input_id: InputId: i1]


Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected1] [input_id: InputId: expected1]
    VAR 1 [source_file: expected1]
        NAME b 1 [is_constant_name: 1] [source_file: expected1]
            NUMBER 2.0 1 [source_file: expected1]


Subtree2: SCRIPT 1 [synthetic: 1] [source_file: i1] [input_id: InputId: i1]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:911)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:732)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:712)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:699)
	at com.google.javascript.jscomp.InlineVariablesTest.testInlineAcrossModules(InlineVariablesTest.java:132)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testDoNotExitConditional1" time="0.002">
    <failure message="&#xa;Expected: if(true)var x=1;var z=x&#xa;Result:   if(true);&#xa;Node tree inequality:&#xa;Tree1:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;        IF 1 [source_file: expected0]&#xa;            TRUE 1 [source_file: expected0]&#xa;            BLOCK 1 [source_file: expected0]&#xa;                VAR 1 [source_file: expected0]&#xa;                    NAME x 1 [is_constant_name: 1] [source_file: expected0]&#xa;                        NUMBER 1.0 1 [source_file: expected0]&#xa;        VAR 1 [source_file: expected0]&#xa;            NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;                NAME x 1 [is_constant_name: 1] [source_file: expected0]&#xa;&#xa;&#xa;Tree2:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;        IF 1 [source_file: testcode]&#xa;            TRUE 1 [source_file: testcode]&#xa;            BLOCK 1 [source_file: testcode]&#xa;&#xa;&#xa;Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;    IF 1 [source_file: expected0]&#xa;        TRUE 1 [source_file: expected0]&#xa;        BLOCK 1 [source_file: expected0]&#xa;            VAR 1 [source_file: expected0]&#xa;                NAME x 1 [is_constant_name: 1] [source_file: expected0]&#xa;                    NUMBER 1.0 1 [source_file: expected0]&#xa;    VAR 1 [source_file: expected0]&#xa;        NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;            NAME x 1 [is_constant_name: 1] [source_file: expected0]&#xa;&#xa;&#xa;Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;    IF 1 [source_file: testcode]&#xa;        TRUE 1 [source_file: testcode]&#xa;        BLOCK 1 [source_file: testcode]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: if(true)var x=1;var z=x
Result:   if(true);
Node tree inequality:
Tree1:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        IF 1 [source_file: expected0]
            TRUE 1 [source_file: expected0]
            BLOCK 1 [source_file: expected0]
                VAR 1 [source_file: expected0]
                    NAME x 1 [is_constant_name: 1] [source_file: expected0]
                        NUMBER 1.0 1 [source_file: expected0]
        VAR 1 [source_file: expected0]
            NAME z 1 [is_constant_name: 1] [source_file: expected0]
                NAME x 1 [is_constant_name: 1] [source_file: expected0]


Tree2:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
        IF 1 [source_file: testcode]
            TRUE 1 [source_file: testcode]
            BLOCK 1 [source_file: testcode]


Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
    IF 1 [source_file: expected0]
        TRUE 1 [source_file: expected0]
        BLOCK 1 [source_file: expected0]
            VAR 1 [source_file: expected0]
                NAME x 1 [is_constant_name: 1] [source_file: expected0]
                    NUMBER 1.0 1 [source_file: expected0]
    VAR 1 [source_file: expected0]
        NAME z 1 [is_constant_name: 1] [source_file: expected0]
            NAME x 1 [is_constant_name: 1] [source_file: expected0]


Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
    IF 1 [source_file: testcode]
        TRUE 1 [source_file: testcode]
        BLOCK 1 [source_file: testcode]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.CompilerTestCase.testSame(CompilerTestCase.java:741)
	at com.google.javascript.jscomp.InlineVariablesTest.testDoNotExitConditional1(InlineVariablesTest.java:137)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testDoNotExitConditional2" time="0.002">
    <failure message="&#xa;Expected: if(true)var x=1;var z=x&#xa;Result:   if(true);&#xa;Node tree inequality:&#xa;Tree1:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;        IF 1 [source_file: expected0]&#xa;            TRUE 1 [source_file: expected0]&#xa;            BLOCK 1 [added_block: 1] [source_file: expected0]&#xa;                VAR 1 [source_file: expected0]&#xa;                    NAME x 1 [is_constant_name: 1] [source_file: expected0]&#xa;                        NUMBER 1.0 1 [source_file: expected0]&#xa;        VAR 1 [source_file: expected0]&#xa;            NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;                NAME x 1 [is_constant_name: 1] [source_file: expected0]&#xa;&#xa;&#xa;Tree2:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;        IF 1 [source_file: testcode]&#xa;            TRUE 1 [source_file: testcode]&#xa;            BLOCK 1 [added_block: 1] [source_file: testcode]&#xa;&#xa;&#xa;Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;    IF 1 [source_file: expected0]&#xa;        TRUE 1 [source_file: expected0]&#xa;        BLOCK 1 [added_block: 1] [source_file: expected0]&#xa;            VAR 1 [source_file: expected0]&#xa;                NAME x 1 [is_constant_name: 1] [source_file: expected0]&#xa;                    NUMBER 1.0 1 [source_file: expected0]&#xa;    VAR 1 [source_file: expected0]&#xa;        NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;            NAME x 1 [is_constant_name: 1] [source_file: expected0]&#xa;&#xa;&#xa;Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;    IF 1 [source_file: testcode]&#xa;        TRUE 1 [source_file: testcode]&#xa;        BLOCK 1 [added_block: 1] [source_file: testcode]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: if(true)var x=1;var z=x
Result:   if(true);
Node tree inequality:
Tree1:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        IF 1 [source_file: expected0]
            TRUE 1 [source_file: expected0]
            BLOCK 1 [added_block: 1] [source_file: expected0]
                VAR 1 [source_file: expected0]
                    NAME x 1 [is_constant_name: 1] [source_file: expected0]
                        NUMBER 1.0 1 [source_file: expected0]
        VAR 1 [source_file: expected0]
            NAME z 1 [is_constant_name: 1] [source_file: expected0]
                NAME x 1 [is_constant_name: 1] [source_file: expected0]


Tree2:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
        IF 1 [source_file: testcode]
            TRUE 1 [source_file: testcode]
            BLOCK 1 [added_block: 1] [source_file: testcode]


Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
    IF 1 [source_file: expected0]
        TRUE 1 [source_file: expected0]
        BLOCK 1 [added_block: 1] [source_file: expected0]
            VAR 1 [source_file: expected0]
                NAME x 1 [is_constant_name: 1] [source_file: expected0]
                    NUMBER 1.0 1 [source_file: expected0]
    VAR 1 [source_file: expected0]
        NAME z 1 [is_constant_name: 1] [source_file: expected0]
            NAME x 1 [is_constant_name: 1] [source_file: expected0]


Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
    IF 1 [source_file: testcode]
        TRUE 1 [source_file: testcode]
        BLOCK 1 [added_block: 1] [source_file: testcode]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.CompilerTestCase.testSame(CompilerTestCase.java:741)
	at com.google.javascript.jscomp.InlineVariablesTest.testDoNotExitConditional2(InlineVariablesTest.java:141)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testDoNotExitConditional3" time="0.001">
    <failure message="&#xa;Expected: var x;if(true)x=1;var z=x&#xa;Result:   if(true)1&#xa;Node tree inequality:&#xa;Tree1:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;        VAR 1 [source_file: expected0]&#xa;            NAME x 1 [is_constant_name: 1] [source_file: expected0]&#xa;        IF 1 [source_file: expected0]&#xa;            TRUE 1 [source_file: expected0]&#xa;            BLOCK 1 [added_block: 1] [source_file: expected0]&#xa;                EXPR_RESULT 1 [source_file: expected0]&#xa;                    ASSIGN 1 [source_file: expected0]&#xa;                        NAME x 1 [is_constant_name: 1] [source_file: expected0]&#xa;                        NUMBER 1.0 1 [source_file: expected0]&#xa;        VAR 1 [source_file: expected0]&#xa;            NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;                NAME x 1 [is_constant_name: 1] [source_file: expected0]&#xa;&#xa;&#xa;Tree2:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;        IF 1 [source_file: testcode]&#xa;            TRUE 1 [source_file: testcode]&#xa;            BLOCK 1 [added_block: 1] [source_file: testcode]&#xa;                EXPR_RESULT 1 [source_file: testcode]&#xa;                    NUMBER 1.0 1 [source_file: testcode]&#xa;&#xa;&#xa;Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;    VAR 1 [source_file: expected0]&#xa;        NAME x 1 [is_constant_name: 1] [source_file: expected0]&#xa;    IF 1 [source_file: expected0]&#xa;        TRUE 1 [source_file: expected0]&#xa;        BLOCK 1 [added_block: 1] [source_file: expected0]&#xa;            EXPR_RESULT 1 [source_file: expected0]&#xa;                ASSIGN 1 [source_file: expected0]&#xa;                    NAME x 1 [is_constant_name: 1] [source_file: expected0]&#xa;                    NUMBER 1.0 1 [source_file: expected0]&#xa;    VAR 1 [source_file: expected0]&#xa;        NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;            NAME x 1 [is_constant_name: 1] [source_file: expected0]&#xa;&#xa;&#xa;Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;    IF 1 [source_file: testcode]&#xa;        TRUE 1 [source_file: testcode]&#xa;        BLOCK 1 [added_block: 1] [source_file: testcode]&#xa;            EXPR_RESULT 1 [source_file: testcode]&#xa;                NUMBER 1.0 1 [source_file: testcode]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: var x;if(true)x=1;var z=x
Result:   if(true)1
Node tree inequality:
Tree1:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        VAR 1 [source_file: expected0]
            NAME x 1 [is_constant_name: 1] [source_file: expected0]
        IF 1 [source_file: expected0]
            TRUE 1 [source_file: expected0]
            BLOCK 1 [added_block: 1] [source_file: expected0]
                EXPR_RESULT 1 [source_file: expected0]
                    ASSIGN 1 [source_file: expected0]
                        NAME x 1 [is_constant_name: 1] [source_file: expected0]
                        NUMBER 1.0 1 [source_file: expected0]
        VAR 1 [source_file: expected0]
            NAME z 1 [is_constant_name: 1] [source_file: expected0]
                NAME x 1 [is_constant_name: 1] [source_file: expected0]


Tree2:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
        IF 1 [source_file: testcode]
            TRUE 1 [source_file: testcode]
            BLOCK 1 [added_block: 1] [source_file: testcode]
                EXPR_RESULT 1 [source_file: testcode]
                    NUMBER 1.0 1 [source_file: testcode]


Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
    VAR 1 [source_file: expected0]
        NAME x 1 [is_constant_name: 1] [source_file: expected0]
    IF 1 [source_file: expected0]
        TRUE 1 [source_file: expected0]
        BLOCK 1 [added_block: 1] [source_file: expected0]
            EXPR_RESULT 1 [source_file: expected0]
                ASSIGN 1 [source_file: expected0]
                    NAME x 1 [is_constant_name: 1] [source_file: expected0]
                    NUMBER 1.0 1 [source_file: expected0]
    VAR 1 [source_file: expected0]
        NAME z 1 [is_constant_name: 1] [source_file: expected0]
            NAME x 1 [is_constant_name: 1] [source_file: expected0]


Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
    IF 1 [source_file: testcode]
        TRUE 1 [source_file: testcode]
        BLOCK 1 [added_block: 1] [source_file: testcode]
            EXPR_RESULT 1 [source_file: testcode]
                NUMBER 1.0 1 [source_file: testcode]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.CompilerTestCase.testSame(CompilerTestCase.java:741)
	at com.google.javascript.jscomp.InlineVariablesTest.testDoNotExitConditional3(InlineVariablesTest.java:146)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testDoNotExitForLoop" time="0.003" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testDoNotEnterSubscope" time="0.006" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testDoNotExitTry" time="0.001">
    <error message="Missing catch or finally for try statement.. Reference node:&#xa;TRY 1 [source_file: testcode]&#xa;    BLOCK 1 [source_file: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME x 1 [source_file: testcode]&#xa;                NAME y 1 [source_file: testcode]&#xa;    BLOCK 1 [source_file: testcode]&#xa;        CATCH 1 [source_file: testcode]&#xa;            NAME e 1 [source_file: testcode]&#xa;            BLOCK 1 [source_file: testcode]&#xa;" type="java.lang.IllegalStateException">java.lang.IllegalStateException: Missing catch or finally for try statement.. Reference node:
TRY 1 [source_file: testcode]
    BLOCK 1 [source_file: testcode]
        VAR 1 [source_file: testcode]
            NAME x 1 [source_file: testcode]
                NAME y 1 [source_file: testcode]
    BLOCK 1 [source_file: testcode]
        CATCH 1 [source_file: testcode]
            NAME e 1 [source_file: testcode]
            BLOCK 1 [source_file: testcode]

	at com.google.javascript.jscomp.AstValidator$1.handleViolation(AstValidator.java:54)
	at com.google.javascript.jscomp.AstValidator.violation(AstValidator.java:1167)
	at com.google.javascript.jscomp.AstValidator.validateTry(AstValidator.java:888)
	at com.google.javascript.jscomp.AstValidator.validateStatement(AstValidator.java:142)
	at com.google.javascript.jscomp.AstValidator.validateScript(AstValidator.java:91)
	at com.google.javascript.jscomp.AstValidator.validateCodeRoot(AstValidator.java:82)
	at com.google.javascript.jscomp.AstValidator.validateRoot(AstValidator.java:75)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:967)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.CompilerTestCase.testSame(CompilerTestCase.java:741)
	at com.google.javascript.jscomp.InlineVariablesTest.testDoNotExitTry(InlineVariablesTest.java:174)
</error>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testDoNotEnterCatch" time="0.001">
    <error message="Missing catch or finally for try statement.. Reference node:&#xa;TRY 1 [source_file: testcode]&#xa;    BLOCK 1 [source_file: testcode]&#xa;    BLOCK 1 [source_file: testcode]&#xa;        CATCH 1 [source_file: testcode]&#xa;            NAME e 1 [source_file: testcode]&#xa;            BLOCK 1 [source_file: testcode]&#xa;                VAR 1 [source_file: testcode]&#xa;                    NAME z 1 [source_file: testcode]&#xa;                        NAME e 1 [source_file: testcode]&#xa;" type="java.lang.IllegalStateException">java.lang.IllegalStateException: Missing catch or finally for try statement.. Reference node:
TRY 1 [source_file: testcode]
    BLOCK 1 [source_file: testcode]
    BLOCK 1 [source_file: testcode]
        CATCH 1 [source_file: testcode]
            NAME e 1 [source_file: testcode]
            BLOCK 1 [source_file: testcode]
                VAR 1 [source_file: testcode]
                    NAME z 1 [source_file: testcode]
                        NAME e 1 [source_file: testcode]

	at com.google.javascript.jscomp.AstValidator$1.handleViolation(AstValidator.java:54)
	at com.google.javascript.jscomp.AstValidator.violation(AstValidator.java:1167)
	at com.google.javascript.jscomp.AstValidator.validateTry(AstValidator.java:888)
	at com.google.javascript.jscomp.AstValidator.validateStatement(AstValidator.java:142)
	at com.google.javascript.jscomp.AstValidator.validateScript(AstValidator.java:91)
	at com.google.javascript.jscomp.AstValidator.validateCodeRoot(AstValidator.java:82)
	at com.google.javascript.jscomp.AstValidator.validateRoot(AstValidator.java:75)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:967)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.CompilerTestCase.testSame(CompilerTestCase.java:741)
	at com.google.javascript.jscomp.InlineVariablesTest.testDoNotEnterCatch(InlineVariablesTest.java:179)
</error>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testDoNotEnterFinally" time="0.001">
    <error message="Missing catch or finally for try statement.. Reference node:&#xa;TRY 1 [source_file: testcode]&#xa;    BLOCK 1 [source_file: testcode]&#xa;        THROW 1 [source_file: testcode]&#xa;            NAME e 1 [source_file: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME x 1 [source_file: testcode]&#xa;                NUMBER 1.0 1 [source_file: testcode]&#xa;    BLOCK 1 [source_file: testcode]&#xa;        CATCH 1 [source_file: testcode]&#xa;            NAME e 1 [source_file: testcode]&#xa;            BLOCK 1 [source_file: testcode]&#xa;    BLOCK 1 [source_file: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME z 1 [source_file: testcode]&#xa;                NAME x 1 [source_file: testcode]&#xa;" type="java.lang.IllegalStateException">java.lang.IllegalStateException: Missing catch or finally for try statement.. Reference node:
TRY 1 [source_file: testcode]
    BLOCK 1 [source_file: testcode]
        THROW 1 [source_file: testcode]
            NAME e 1 [source_file: testcode]
        VAR 1 [source_file: testcode]
            NAME x 1 [source_file: testcode]
                NUMBER 1.0 1 [source_file: testcode]
    BLOCK 1 [source_file: testcode]
        CATCH 1 [source_file: testcode]
            NAME e 1 [source_file: testcode]
            BLOCK 1 [source_file: testcode]
    BLOCK 1 [source_file: testcode]
        VAR 1 [source_file: testcode]
            NAME z 1 [source_file: testcode]
                NAME x 1 [source_file: testcode]

	at com.google.javascript.jscomp.AstValidator$1.handleViolation(AstValidator.java:54)
	at com.google.javascript.jscomp.AstValidator.violation(AstValidator.java:1167)
	at com.google.javascript.jscomp.AstValidator.validateTry(AstValidator.java:888)
	at com.google.javascript.jscomp.AstValidator.validateStatement(AstValidator.java:142)
	at com.google.javascript.jscomp.AstValidator.validateScript(AstValidator.java:91)
	at com.google.javascript.jscomp.AstValidator.validateCodeRoot(AstValidator.java:82)
	at com.google.javascript.jscomp.AstValidator.validateRoot(AstValidator.java:75)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:967)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.CompilerTestCase.testSame(CompilerTestCase.java:741)
	at com.google.javascript.jscomp.InlineVariablesTest.testDoNotEnterFinally(InlineVariablesTest.java:183)
</error>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInsideIfConditional" time="0.004" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testOnlyReadAtInitialization" time="0.011" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testImmutableWithSingleReferenceAfterInitialzation" time="0.013" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testSingleReferenceAfterInitialzation" time="0.018" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInsideIfBranch" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInsideAndConditional" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInsideAndBranch" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInsideOrBranch" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInsideHookBranch" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInsideHookConditional" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInsideOrBranchInsideIfConditional" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInsideOrBranchInsideIfConditionalWithConstant" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testCrossFunctionsAsLeftLeaves" time="0.006" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testDoCrossFunction" time="0.002">
    <failure message="&#xa;Expected: foo();var z=1&#xa;Result:   foo()&#xa;Node tree inequality:&#xa;Tree1:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;        EXPR_RESULT 1 [source_file: expected0]&#xa;            CALL 1 [free_call: 1] [source_file: expected0]&#xa;                NAME foo 1 [source_file: expected0]&#xa;        VAR 1 [source_file: expected0]&#xa;            NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;                NUMBER 1.0 1 [source_file: expected0]&#xa;&#xa;&#xa;Tree2:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            CALL 1 [free_call: 1] [source_file: testcode]&#xa;                NAME foo 1 [source_file: testcode]&#xa;&#xa;&#xa;Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;    EXPR_RESULT 1 [source_file: expected0]&#xa;        CALL 1 [free_call: 1] [source_file: expected0]&#xa;            NAME foo 1 [source_file: expected0]&#xa;    VAR 1 [source_file: expected0]&#xa;        NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;            NUMBER 1.0 1 [source_file: expected0]&#xa;&#xa;&#xa;Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;    EXPR_RESULT 1 [source_file: testcode]&#xa;        CALL 1 [free_call: 1] [source_file: testcode]&#xa;            NAME foo 1 [source_file: testcode]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: foo();var z=1
Result:   foo()
Node tree inequality:
Tree1:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        EXPR_RESULT 1 [source_file: expected0]
            CALL 1 [free_call: 1] [source_file: expected0]
                NAME foo 1 [source_file: expected0]
        VAR 1 [source_file: expected0]
            NAME z 1 [is_constant_name: 1] [source_file: expected0]
                NUMBER 1.0 1 [source_file: expected0]


Tree2:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            CALL 1 [free_call: 1] [source_file: testcode]
                NAME foo 1 [source_file: testcode]


Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
    EXPR_RESULT 1 [source_file: expected0]
        CALL 1 [free_call: 1] [source_file: expected0]
            NAME foo 1 [source_file: expected0]
    VAR 1 [source_file: expected0]
        NAME z 1 [is_constant_name: 1] [source_file: expected0]
            NUMBER 1.0 1 [source_file: expected0]


Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
    EXPR_RESULT 1 [source_file: testcode]
        CALL 1 [free_call: 1] [source_file: testcode]
            NAME foo 1 [source_file: testcode]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineVariablesTest.testDoCrossFunction(InlineVariablesTest.java:306)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testDoNotCrossReferencingFunction" time="0.002">
    <failure message="&#xa;Expected: var f=function(){var z$$1=x};var x=1;f();var z=x;f()&#xa;Result:   var f=function(){};f();f()&#xa;Node tree inequality:&#xa;Tree1:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;        VAR 1 [source_file: expected0]&#xa;            NAME f 1 [is_constant_name: 1] [source_file: expected0]&#xa;                FUNCTION  1 [source_file: expected0]&#xa;                    NAME  1 [is_constant_name: 1] [source_file: expected0]&#xa;                    PARAM_LIST 1 [source_file: expected0]&#xa;                    BLOCK 1 [source_file: expected0]&#xa;                        VAR 1 [source_file: expected0]&#xa;                            NAME z$$1 1 [is_constant_name: 1] [source_file: expected0]&#xa;                                NAME x 1 [is_constant_name: 1] [source_file: expected0]&#xa;        VAR 1 [source_file: expected0]&#xa;            NAME x 1 [is_constant_name: 1] [source_file: expected0]&#xa;                NUMBER 1.0 1 [source_file: expected0]&#xa;        EXPR_RESULT 1 [source_file: expected0]&#xa;            CALL 1 [free_call: 1] [source_file: expected0]&#xa;                NAME f 1 [is_constant_name: 1] [source_file: expected0]&#xa;        VAR 1 [source_file: expected0]&#xa;            NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;                NAME x 1 [is_constant_name: 1] [source_file: expected0]&#xa;        EXPR_RESULT 1 [source_file: expected0]&#xa;            CALL 1 [free_call: 1] [source_file: expected0]&#xa;                NAME f 1 [is_constant_name: 1] [source_file: expected0]&#xa;&#xa;&#xa;Tree2:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME f 1 [is_constant_name: 1] [source_file: testcode]&#xa;                FUNCTION  1 [source_file: testcode]&#xa;                    NAME  1 [is_constant_name: 1] [source_file: testcode]&#xa;                    PARAM_LIST 1 [source_file: testcode]&#xa;                    BLOCK 1 [source_file: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            CALL 1 [free_call: 1] [source_file: testcode]&#xa;                NAME f 1 [is_constant_name: 1] [source_file: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            CALL 1 [free_call: 1] [source_file: testcode]&#xa;                NAME f 1 [is_constant_name: 1] [source_file: testcode]&#xa;&#xa;&#xa;Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;    VAR 1 [source_file: expected0]&#xa;        NAME f 1 [is_constant_name: 1] [source_file: expected0]&#xa;            FUNCTION  1 [source_file: expected0]&#xa;                NAME  1 [is_constant_name: 1] [source_file: expected0]&#xa;                PARAM_LIST 1 [source_file: expected0]&#xa;                BLOCK 1 [source_file: expected0]&#xa;                    VAR 1 [source_file: expected0]&#xa;                        NAME z$$1 1 [is_constant_name: 1] [source_file: expected0]&#xa;                            NAME x 1 [is_constant_name: 1] [source_file: expected0]&#xa;    VAR 1 [source_file: expected0]&#xa;        NAME x 1 [is_constant_name: 1] [source_file: expected0]&#xa;            NUMBER 1.0 1 [source_file: expected0]&#xa;    EXPR_RESULT 1 [source_file: expected0]&#xa;        CALL 1 [free_call: 1] [source_file: expected0]&#xa;            NAME f 1 [is_constant_name: 1] [source_file: expected0]&#xa;    VAR 1 [source_file: expected0]&#xa;        NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;            NAME x 1 [is_constant_name: 1] [source_file: expected0]&#xa;    EXPR_RESULT 1 [source_file: expected0]&#xa;        CALL 1 [free_call: 1] [source_file: expected0]&#xa;            NAME f 1 [is_constant_name: 1] [source_file: expected0]&#xa;&#xa;&#xa;Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME f 1 [is_constant_name: 1] [source_file: testcode]&#xa;            FUNCTION  1 [source_file: testcode]&#xa;                NAME  1 [is_constant_name: 1] [source_file: testcode]&#xa;                PARAM_LIST 1 [source_file: testcode]&#xa;                BLOCK 1 [source_file: testcode]&#xa;    EXPR_RESULT 1 [source_file: testcode]&#xa;        CALL 1 [free_call: 1] [source_file: testcode]&#xa;            NAME f 1 [is_constant_name: 1] [source_file: testcode]&#xa;    EXPR_RESULT 1 [source_file: testcode]&#xa;        CALL 1 [free_call: 1] [source_file: testcode]&#xa;            NAME f 1 [is_constant_name: 1] [source_file: testcode]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: var f=function(){var z$$1=x};var x=1;f();var z=x;f()
Result:   var f=function(){};f();f()
Node tree inequality:
Tree1:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        VAR 1 [source_file: expected0]
            NAME f 1 [is_constant_name: 1] [source_file: expected0]
                FUNCTION  1 [source_file: expected0]
                    NAME  1 [is_constant_name: 1] [source_file: expected0]
                    PARAM_LIST 1 [source_file: expected0]
                    BLOCK 1 [source_file: expected0]
                        VAR 1 [source_file: expected0]
                            NAME z$$1 1 [is_constant_name: 1] [source_file: expected0]
                                NAME x 1 [is_constant_name: 1] [source_file: expected0]
        VAR 1 [source_file: expected0]
            NAME x 1 [is_constant_name: 1] [source_file: expected0]
                NUMBER 1.0 1 [source_file: expected0]
        EXPR_RESULT 1 [source_file: expected0]
            CALL 1 [free_call: 1] [source_file: expected0]
                NAME f 1 [is_constant_name: 1] [source_file: expected0]
        VAR 1 [source_file: expected0]
            NAME z 1 [is_constant_name: 1] [source_file: expected0]
                NAME x 1 [is_constant_name: 1] [source_file: expected0]
        EXPR_RESULT 1 [source_file: expected0]
            CALL 1 [free_call: 1] [source_file: expected0]
                NAME f 1 [is_constant_name: 1] [source_file: expected0]


Tree2:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
        VAR 1 [source_file: testcode]
            NAME f 1 [is_constant_name: 1] [source_file: testcode]
                FUNCTION  1 [source_file: testcode]
                    NAME  1 [is_constant_name: 1] [source_file: testcode]
                    PARAM_LIST 1 [source_file: testcode]
                    BLOCK 1 [source_file: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            CALL 1 [free_call: 1] [source_file: testcode]
                NAME f 1 [is_constant_name: 1] [source_file: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            CALL 1 [free_call: 1] [source_file: testcode]
                NAME f 1 [is_constant_name: 1] [source_file: testcode]


Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
    VAR 1 [source_file: expected0]
        NAME f 1 [is_constant_name: 1] [source_file: expected0]
            FUNCTION  1 [source_file: expected0]
                NAME  1 [is_constant_name: 1] [source_file: expected0]
                PARAM_LIST 1 [source_file: expected0]
                BLOCK 1 [source_file: expected0]
                    VAR 1 [source_file: expected0]
                        NAME z$$1 1 [is_constant_name: 1] [source_file: expected0]
                            NAME x 1 [is_constant_name: 1] [source_file: expected0]
    VAR 1 [source_file: expected0]
        NAME x 1 [is_constant_name: 1] [source_file: expected0]
            NUMBER 1.0 1 [source_file: expected0]
    EXPR_RESULT 1 [source_file: expected0]
        CALL 1 [free_call: 1] [source_file: expected0]
            NAME f 1 [is_constant_name: 1] [source_file: expected0]
    VAR 1 [source_file: expected0]
        NAME z 1 [is_constant_name: 1] [source_file: expected0]
            NAME x 1 [is_constant_name: 1] [source_file: expected0]
    EXPR_RESULT 1 [source_file: expected0]
        CALL 1 [free_call: 1] [source_file: expected0]
            NAME f 1 [is_constant_name: 1] [source_file: expected0]


Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
    VAR 1 [source_file: testcode]
        NAME f 1 [is_constant_name: 1] [source_file: testcode]
            FUNCTION  1 [source_file: testcode]
                NAME  1 [is_constant_name: 1] [source_file: testcode]
                PARAM_LIST 1 [source_file: testcode]
                BLOCK 1 [source_file: testcode]
    EXPR_RESULT 1 [source_file: testcode]
        CALL 1 [free_call: 1] [source_file: testcode]
            NAME f 1 [is_constant_name: 1] [source_file: testcode]
    EXPR_RESULT 1 [source_file: testcode]
        CALL 1 [free_call: 1] [source_file: testcode]
            NAME f 1 [is_constant_name: 1] [source_file: testcode]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.CompilerTestCase.testSame(CompilerTestCase.java:741)
	at com.google.javascript.jscomp.InlineVariablesTest.testDoNotCrossReferencingFunction(InlineVariablesTest.java:310)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testChainedAssignment" time="0.001">
    <failure message="&#xa;Expected: var a=2;var c=2&#xa;Result:   &#xa;Node tree inequality:&#xa;Tree1:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;        VAR 1 [source_file: expected0]&#xa;            NAME a 1 [is_constant_name: 1] [source_file: expected0]&#xa;                NUMBER 2.0 1 [source_file: expected0]&#xa;        VAR 1 [source_file: expected0]&#xa;            NAME c 1 [is_constant_name: 1] [source_file: expected0]&#xa;                NUMBER 2.0 1 [source_file: expected0]&#xa;&#xa;&#xa;Tree2:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;&#xa;&#xa;Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;    VAR 1 [source_file: expected0]&#xa;        NAME a 1 [is_constant_name: 1] [source_file: expected0]&#xa;            NUMBER 2.0 1 [source_file: expected0]&#xa;    VAR 1 [source_file: expected0]&#xa;        NAME c 1 [is_constant_name: 1] [source_file: expected0]&#xa;            NUMBER 2.0 1 [source_file: expected0]&#xa;&#xa;&#xa;Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: var a=2;var c=2
Result:   
Node tree inequality:
Tree1:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        VAR 1 [source_file: expected0]
            NAME a 1 [is_constant_name: 1] [source_file: expected0]
                NUMBER 2.0 1 [source_file: expected0]
        VAR 1 [source_file: expected0]
            NAME c 1 [is_constant_name: 1] [source_file: expected0]
                NUMBER 2.0 1 [source_file: expected0]


Tree2:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]


Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
    VAR 1 [source_file: expected0]
        NAME a 1 [is_constant_name: 1] [source_file: expected0]
            NUMBER 2.0 1 [source_file: expected0]
    VAR 1 [source_file: expected0]
        NAME c 1 [is_constant_name: 1] [source_file: expected0]
            NUMBER 2.0 1 [source_file: expected0]


Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineVariablesTest.testChainedAssignment(InlineVariablesTest.java:322)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testDoCrossNewVariables" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testDoNotCrossFunctionCalls" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testDoNotCrossAssignment" time="0.005" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testDoNotCrossDelete" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testDoNotCrossAssignmentPlus" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testDoNotCrossIncrement" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testDoNotCrossConstructor" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testDoCrossVar" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testOverlappingInlines" time="0.003" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testOverlappingInlineFunctions" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInlineIntoLoops" time="0.005" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInlineIntoFunction" time="0.003" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testNoInlineIntoNamedFunction" time="0.002">
    <failure message="&#xa;Expected: f();var x=false;function f(){alert(x)}&#xa;Result:   f();function f(){alert(false)}&#xa;Node tree inequality:&#xa;Tree1:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;        EXPR_RESULT 1 [source_file: expected0]&#xa;            CALL 1 [free_call: 1] [source_file: expected0]&#xa;                NAME f 1 [is_constant_name: 1] [source_file: expected0]&#xa;        VAR 1 [source_file: expected0]&#xa;            NAME x 1 [is_constant_name: 1] [source_file: expected0]&#xa;                FALSE 1 [source_file: expected0]&#xa;        FUNCTION f 1 [source_file: expected0]&#xa;            NAME f 1 [is_constant_name: 1] [source_file: expected0]&#xa;            PARAM_LIST 1 [source_file: expected0]&#xa;            BLOCK 1 [source_file: expected0]&#xa;                EXPR_RESULT 1 [source_file: expected0]&#xa;                    CALL 1 [free_call: 1] [source_file: expected0]&#xa;                        NAME alert 1 [source_file: expected0]&#xa;                        NAME x 1 [is_constant_name: 1] [source_file: expected0]&#xa;        EMPTY 1 [source_file: expected0]&#xa;&#xa;&#xa;Tree2:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            CALL 1 [free_call: 1] [source_file: testcode]&#xa;                NAME f 1 [is_constant_name: 1] [source_file: testcode]&#xa;        FUNCTION f 1 [source_file: testcode]&#xa;            NAME f 1 [is_constant_name: 1] [source_file: testcode]&#xa;            PARAM_LIST 1 [source_file: testcode]&#xa;            BLOCK 1 [source_file: testcode]&#xa;                EXPR_RESULT 1 [source_file: testcode]&#xa;                    CALL 1 [free_call: 1] [source_file: testcode]&#xa;                        NAME alert 1 [source_file: testcode]&#xa;                        FALSE 1 [source_file: testcode]&#xa;        EMPTY 1 [source_file: testcode]&#xa;&#xa;&#xa;Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;    EXPR_RESULT 1 [source_file: expected0]&#xa;        CALL 1 [free_call: 1] [source_file: expected0]&#xa;            NAME f 1 [is_constant_name: 1] [source_file: expected0]&#xa;    VAR 1 [source_file: expected0]&#xa;        NAME x 1 [is_constant_name: 1] [source_file: expected0]&#xa;            FALSE 1 [source_file: expected0]&#xa;    FUNCTION f 1 [source_file: expected0]&#xa;        NAME f 1 [is_constant_name: 1] [source_file: expected0]&#xa;        PARAM_LIST 1 [source_file: expected0]&#xa;        BLOCK 1 [source_file: expected0]&#xa;            EXPR_RESULT 1 [source_file: expected0]&#xa;                CALL 1 [free_call: 1] [source_file: expected0]&#xa;                    NAME alert 1 [source_file: expected0]&#xa;                    NAME x 1 [is_constant_name: 1] [source_file: expected0]&#xa;    EMPTY 1 [source_file: expected0]&#xa;&#xa;&#xa;Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;    EXPR_RESULT 1 [source_file: testcode]&#xa;        CALL 1 [free_call: 1] [source_file: testcode]&#xa;            NAME f 1 [is_constant_name: 1] [source_file: testcode]&#xa;    FUNCTION f 1 [source_file: testcode]&#xa;        NAME f 1 [is_constant_name: 1] [source_file: testcode]&#xa;        PARAM_LIST 1 [source_file: testcode]&#xa;        BLOCK 1 [source_file: testcode]&#xa;            EXPR_RESULT 1 [source_file: testcode]&#xa;                CALL 1 [free_call: 1] [source_file: testcode]&#xa;                    NAME alert 1 [source_file: testcode]&#xa;                    FALSE 1 [source_file: testcode]&#xa;    EMPTY 1 [source_file: testcode]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: f();var x=false;function f(){alert(x)}
Result:   f();function f(){alert(false)}
Node tree inequality:
Tree1:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        EXPR_RESULT 1 [source_file: expected0]
            CALL 1 [free_call: 1] [source_file: expected0]
                NAME f 1 [is_constant_name: 1] [source_file: expected0]
        VAR 1 [source_file: expected0]
            NAME x 1 [is_constant_name: 1] [source_file: expected0]
                FALSE 1 [source_file: expected0]
        FUNCTION f 1 [source_file: expected0]
            NAME f 1 [is_constant_name: 1] [source_file: expected0]
            PARAM_LIST 1 [source_file: expected0]
            BLOCK 1 [source_file: expected0]
                EXPR_RESULT 1 [source_file: expected0]
                    CALL 1 [free_call: 1] [source_file: expected0]
                        NAME alert 1 [source_file: expected0]
                        NAME x 1 [is_constant_name: 1] [source_file: expected0]
        EMPTY 1 [source_file: expected0]


Tree2:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            CALL 1 [free_call: 1] [source_file: testcode]
                NAME f 1 [is_constant_name: 1] [source_file: testcode]
        FUNCTION f 1 [source_file: testcode]
            NAME f 1 [is_constant_name: 1] [source_file: testcode]
            PARAM_LIST 1 [source_file: testcode]
            BLOCK 1 [source_file: testcode]
                EXPR_RESULT 1 [source_file: testcode]
                    CALL 1 [free_call: 1] [source_file: testcode]
                        NAME alert 1 [source_file: testcode]
                        FALSE 1 [source_file: testcode]
        EMPTY 1 [source_file: testcode]


Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
    EXPR_RESULT 1 [source_file: expected0]
        CALL 1 [free_call: 1] [source_file: expected0]
            NAME f 1 [is_constant_name: 1] [source_file: expected0]
    VAR 1 [source_file: expected0]
        NAME x 1 [is_constant_name: 1] [source_file: expected0]
            FALSE 1 [source_file: expected0]
    FUNCTION f 1 [source_file: expected0]
        NAME f 1 [is_constant_name: 1] [source_file: expected0]
        PARAM_LIST 1 [source_file: expected0]
        BLOCK 1 [source_file: expected0]
            EXPR_RESULT 1 [source_file: expected0]
                CALL 1 [free_call: 1] [source_file: expected0]
                    NAME alert 1 [source_file: expected0]
                    NAME x 1 [is_constant_name: 1] [source_file: expected0]
    EMPTY 1 [source_file: expected0]


Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
    EXPR_RESULT 1 [source_file: testcode]
        CALL 1 [free_call: 1] [source_file: testcode]
            NAME f 1 [is_constant_name: 1] [source_file: testcode]
    FUNCTION f 1 [source_file: testcode]
        NAME f 1 [is_constant_name: 1] [source_file: testcode]
        PARAM_LIST 1 [source_file: testcode]
        BLOCK 1 [source_file: testcode]
            EXPR_RESULT 1 [source_file: testcode]
                CALL 1 [free_call: 1] [source_file: testcode]
                    NAME alert 1 [source_file: testcode]
                    FALSE 1 [source_file: testcode]
    EMPTY 1 [source_file: testcode]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.CompilerTestCase.testSame(CompilerTestCase.java:741)
	at com.google.javascript.jscomp.InlineVariablesTest.testNoInlineIntoNamedFunction(InlineVariablesTest.java:427)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInlineIntoNestedNonHoistedNamedFunctions" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testNoInlineIntoNestedNamedFunctions" time="0.002">
    <failure message="&#xa;Expected: f();var x=false;function f(){if(false)alert(x)}&#xa;Result:   f();function f(){if(false)alert(false)}&#xa;Node tree inequality:&#xa;Tree1:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;        EXPR_RESULT 1 [source_file: expected0]&#xa;            CALL 1 [free_call: 1] [source_file: expected0]&#xa;                NAME f 1 [is_constant_name: 1] [source_file: expected0]&#xa;        VAR 1 [source_file: expected0]&#xa;            NAME x 1 [is_constant_name: 1] [source_file: expected0]&#xa;                FALSE 1 [source_file: expected0]&#xa;        FUNCTION f 1 [source_file: expected0]&#xa;            NAME f 1 [is_constant_name: 1] [source_file: expected0]&#xa;            PARAM_LIST 1 [source_file: expected0]&#xa;            BLOCK 1 [source_file: expected0]&#xa;                IF 1 [source_file: expected0]&#xa;                    FALSE 1 [source_file: expected0]&#xa;                    BLOCK 1 [source_file: expected0]&#xa;                        EXPR_RESULT 1 [source_file: expected0]&#xa;                            CALL 1 [free_call: 1] [source_file: expected0]&#xa;                                NAME alert 1 [source_file: expected0]&#xa;                                NAME x 1 [is_constant_name: 1] [source_file: expected0]&#xa;        EMPTY 1 [source_file: expected0]&#xa;&#xa;&#xa;Tree2:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            CALL 1 [free_call: 1] [source_file: testcode]&#xa;                NAME f 1 [is_constant_name: 1] [source_file: testcode]&#xa;        FUNCTION f 1 [source_file: testcode]&#xa;            NAME f 1 [is_constant_name: 1] [source_file: testcode]&#xa;            PARAM_LIST 1 [source_file: testcode]&#xa;            BLOCK 1 [source_file: testcode]&#xa;                IF 1 [source_file: testcode]&#xa;                    FALSE 1 [source_file: testcode]&#xa;                    BLOCK 1 [source_file: testcode]&#xa;                        EXPR_RESULT 1 [source_file: testcode]&#xa;                            CALL 1 [free_call: 1] [source_file: testcode]&#xa;                                NAME alert 1 [source_file: testcode]&#xa;                                FALSE 1 [source_file: testcode]&#xa;        EMPTY 1 [source_file: testcode]&#xa;&#xa;&#xa;Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;    EXPR_RESULT 1 [source_file: expected0]&#xa;        CALL 1 [free_call: 1] [source_file: expected0]&#xa;            NAME f 1 [is_constant_name: 1] [source_file: expected0]&#xa;    VAR 1 [source_file: expected0]&#xa;        NAME x 1 [is_constant_name: 1] [source_file: expected0]&#xa;            FALSE 1 [source_file: expected0]&#xa;    FUNCTION f 1 [source_file: expected0]&#xa;        NAME f 1 [is_constant_name: 1] [source_file: expected0]&#xa;        PARAM_LIST 1 [source_file: expected0]&#xa;        BLOCK 1 [source_file: expected0]&#xa;            IF 1 [source_file: expected0]&#xa;                FALSE 1 [source_file: expected0]&#xa;                BLOCK 1 [source_file: expected0]&#xa;                    EXPR_RESULT 1 [source_file: expected0]&#xa;                        CALL 1 [free_call: 1] [source_file: expected0]&#xa;                            NAME alert 1 [source_file: expected0]&#xa;                            NAME x 1 [is_constant_name: 1] [source_file: expected0]&#xa;    EMPTY 1 [source_file: expected0]&#xa;&#xa;&#xa;Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;    EXPR_RESULT 1 [source_file: testcode]&#xa;        CALL 1 [free_call: 1] [source_file: testcode]&#xa;            NAME f 1 [is_constant_name: 1] [source_file: testcode]&#xa;    FUNCTION f 1 [source_file: testcode]&#xa;        NAME f 1 [is_constant_name: 1] [source_file: testcode]&#xa;        PARAM_LIST 1 [source_file: testcode]&#xa;        BLOCK 1 [source_file: testcode]&#xa;            IF 1 [source_file: testcode]&#xa;                FALSE 1 [source_file: testcode]&#xa;                BLOCK 1 [source_file: testcode]&#xa;                    EXPR_RESULT 1 [source_file: testcode]&#xa;                        CALL 1 [free_call: 1] [source_file: testcode]&#xa;                            NAME alert 1 [source_file: testcode]&#xa;                            FALSE 1 [source_file: testcode]&#xa;    EMPTY 1 [source_file: testcode]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: f();var x=false;function f(){if(false)alert(x)}
Result:   f();function f(){if(false)alert(false)}
Node tree inequality:
Tree1:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        EXPR_RESULT 1 [source_file: expected0]
            CALL 1 [free_call: 1] [source_file: expected0]
                NAME f 1 [is_constant_name: 1] [source_file: expected0]
        VAR 1 [source_file: expected0]
            NAME x 1 [is_constant_name: 1] [source_file: expected0]
                FALSE 1 [source_file: expected0]
        FUNCTION f 1 [source_file: expected0]
            NAME f 1 [is_constant_name: 1] [source_file: expected0]
            PARAM_LIST 1 [source_file: expected0]
            BLOCK 1 [source_file: expected0]
                IF 1 [source_file: expected0]
                    FALSE 1 [source_file: expected0]
                    BLOCK 1 [source_file: expected0]
                        EXPR_RESULT 1 [source_file: expected0]
                            CALL 1 [free_call: 1] [source_file: expected0]
                                NAME alert 1 [source_file: expected0]
                                NAME x 1 [is_constant_name: 1] [source_file: expected0]
        EMPTY 1 [source_file: expected0]


Tree2:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            CALL 1 [free_call: 1] [source_file: testcode]
                NAME f 1 [is_constant_name: 1] [source_file: testcode]
        FUNCTION f 1 [source_file: testcode]
            NAME f 1 [is_constant_name: 1] [source_file: testcode]
            PARAM_LIST 1 [source_file: testcode]
            BLOCK 1 [source_file: testcode]
                IF 1 [source_file: testcode]
                    FALSE 1 [source_file: testcode]
                    BLOCK 1 [source_file: testcode]
                        EXPR_RESULT 1 [source_file: testcode]
                            CALL 1 [free_call: 1] [source_file: testcode]
                                NAME alert 1 [source_file: testcode]
                                FALSE 1 [source_file: testcode]
        EMPTY 1 [source_file: testcode]


Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
    EXPR_RESULT 1 [source_file: expected0]
        CALL 1 [free_call: 1] [source_file: expected0]
            NAME f 1 [is_constant_name: 1] [source_file: expected0]
    VAR 1 [source_file: expected0]
        NAME x 1 [is_constant_name: 1] [source_file: expected0]
            FALSE 1 [source_file: expected0]
    FUNCTION f 1 [source_file: expected0]
        NAME f 1 [is_constant_name: 1] [source_file: expected0]
        PARAM_LIST 1 [source_file: expected0]
        BLOCK 1 [source_file: expected0]
            IF 1 [source_file: expected0]
                FALSE 1 [source_file: expected0]
                BLOCK 1 [source_file: expected0]
                    EXPR_RESULT 1 [source_file: expected0]
                        CALL 1 [free_call: 1] [source_file: expected0]
                            NAME alert 1 [source_file: expected0]
                            NAME x 1 [is_constant_name: 1] [source_file: expected0]
    EMPTY 1 [source_file: expected0]


Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
    EXPR_RESULT 1 [source_file: testcode]
        CALL 1 [free_call: 1] [source_file: testcode]
            NAME f 1 [is_constant_name: 1] [source_file: testcode]
    FUNCTION f 1 [source_file: testcode]
        NAME f 1 [is_constant_name: 1] [source_file: testcode]
        PARAM_LIST 1 [source_file: testcode]
        BLOCK 1 [source_file: testcode]
            IF 1 [source_file: testcode]
                FALSE 1 [source_file: testcode]
                BLOCK 1 [source_file: testcode]
                    EXPR_RESULT 1 [source_file: testcode]
                        CALL 1 [free_call: 1] [source_file: testcode]
                            NAME alert 1 [source_file: testcode]
                            FALSE 1 [source_file: testcode]
    EMPTY 1 [source_file: testcode]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.CompilerTestCase.testSame(CompilerTestCase.java:741)
	at com.google.javascript.jscomp.InlineVariablesTest.testNoInlineIntoNestedNamedFunctions(InlineVariablesTest.java:436)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testNoInlineMutatedVariable" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInlineImmutableMultipleTimes" time="0.002">
    <failure message="&#xa;Expected: var y=null;var z=null&#xa;Result:   &#xa;Node tree inequality:&#xa;Tree1:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;        VAR 1 [source_file: expected0]&#xa;            NAME y 1 [is_constant_name: 1] [source_file: expected0]&#xa;                NULL 1 [source_file: expected0]&#xa;        VAR 1 [source_file: expected0]&#xa;            NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;                NULL 1 [source_file: expected0]&#xa;&#xa;&#xa;Tree2:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;&#xa;&#xa;Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;    VAR 1 [source_file: expected0]&#xa;        NAME y 1 [is_constant_name: 1] [source_file: expected0]&#xa;            NULL 1 [source_file: expected0]&#xa;    VAR 1 [source_file: expected0]&#xa;        NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;            NULL 1 [source_file: expected0]&#xa;&#xa;&#xa;Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: var y=null;var z=null
Result:   
Node tree inequality:
Tree1:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        VAR 1 [source_file: expected0]
            NAME y 1 [is_constant_name: 1] [source_file: expected0]
                NULL 1 [source_file: expected0]
        VAR 1 [source_file: expected0]
            NAME z 1 [is_constant_name: 1] [source_file: expected0]
                NULL 1 [source_file: expected0]


Tree2:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]


Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
    VAR 1 [source_file: expected0]
        NAME y 1 [is_constant_name: 1] [source_file: expected0]
            NULL 1 [source_file: expected0]
    VAR 1 [source_file: expected0]
        NAME z 1 [is_constant_name: 1] [source_file: expected0]
            NULL 1 [source_file: expected0]


Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineVariablesTest.testInlineImmutableMultipleTimes(InlineVariablesTest.java:444)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testNoInlineStringMultipleTimesIfNotWorthwhile" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInlineStringMultipleTimesWhenAliasingAllStrings" time="0.001">
    <failure message="&#xa;Expected: var y=&quot;abcdefghijklmnopqrstuvwxyz&quot;;var z=&quot;abcdefghijklmnopqrstuvwxyz&quot;&#xa;Result:   &#xa;Node tree inequality:&#xa;Tree1:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;        VAR 1 [source_file: expected0]&#xa;            NAME y 1 [is_constant_name: 1] [source_file: expected0]&#xa;                STRING abcdefghijklmnopqrstuvwxyz 1 [source_file: expected0]&#xa;        VAR 1 [source_file: expected0]&#xa;            NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;                STRING abcdefghijklmnopqrstuvwxyz 1 [source_file: expected0]&#xa;&#xa;&#xa;Tree2:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;&#xa;&#xa;Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;    VAR 1 [source_file: expected0]&#xa;        NAME y 1 [is_constant_name: 1] [source_file: expected0]&#xa;            STRING abcdefghijklmnopqrstuvwxyz 1 [source_file: expected0]&#xa;    VAR 1 [source_file: expected0]&#xa;        NAME z 1 [is_constant_name: 1] [source_file: expected0]&#xa;            STRING abcdefghijklmnopqrstuvwxyz 1 [source_file: expected0]&#xa;&#xa;&#xa;Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: var y=&quot;abcdefghijklmnopqrstuvwxyz&quot;;var z=&quot;abcdefghijklmnopqrstuvwxyz&quot;
Result:   
Node tree inequality:
Tree1:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        VAR 1 [source_file: expected0]
            NAME y 1 [is_constant_name: 1] [source_file: expected0]
                STRING abcdefghijklmnopqrstuvwxyz 1 [source_file: expected0]
        VAR 1 [source_file: expected0]
            NAME z 1 [is_constant_name: 1] [source_file: expected0]
                STRING abcdefghijklmnopqrstuvwxyz 1 [source_file: expected0]


Tree2:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]


Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
    VAR 1 [source_file: expected0]
        NAME y 1 [is_constant_name: 1] [source_file: expected0]
            STRING abcdefghijklmnopqrstuvwxyz 1 [source_file: expected0]
    VAR 1 [source_file: expected0]
        NAME z 1 [is_constant_name: 1] [source_file: expected0]
            STRING abcdefghijklmnopqrstuvwxyz 1 [source_file: expected0]


Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineVariablesTest.testInlineStringMultipleTimesWhenAliasingAllStrings(InlineVariablesTest.java:456)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testNoInlineBackwards" time="0.002">
    <failure message="&#xa;Expected: var y=x;var x=null&#xa;Result:   &#xa;Node tree inequality:&#xa;Tree1:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;        VAR 1 [source_file: expected0]&#xa;            NAME y 1 [is_constant_name: 1] [source_file: expected0]&#xa;                NAME x 1 [is_constant_name: 1] [source_file: expected0]&#xa;        VAR 1 [source_file: expected0]&#xa;            NAME x 1 [is_constant_name: 1] [source_file: expected0]&#xa;                NULL 1 [source_file: expected0]&#xa;&#xa;&#xa;Tree2:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;&#xa;&#xa;Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;    VAR 1 [source_file: expected0]&#xa;        NAME y 1 [is_constant_name: 1] [source_file: expected0]&#xa;            NAME x 1 [is_constant_name: 1] [source_file: expected0]&#xa;    VAR 1 [source_file: expected0]&#xa;        NAME x 1 [is_constant_name: 1] [source_file: expected0]&#xa;            NULL 1 [source_file: expected0]&#xa;&#xa;&#xa;Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: var y=x;var x=null
Result:   
Node tree inequality:
Tree1:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        VAR 1 [source_file: expected0]
            NAME y 1 [is_constant_name: 1] [source_file: expected0]
                NAME x 1 [is_constant_name: 1] [source_file: expected0]
        VAR 1 [source_file: expected0]
            NAME x 1 [is_constant_name: 1] [source_file: expected0]
                NULL 1 [source_file: expected0]


Tree2:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]


Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
    VAR 1 [source_file: expected0]
        NAME y 1 [is_constant_name: 1] [source_file: expected0]
            NAME x 1 [is_constant_name: 1] [source_file: expected0]
    VAR 1 [source_file: expected0]
        NAME x 1 [is_constant_name: 1] [source_file: expected0]
            NULL 1 [source_file: expected0]


Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.CompilerTestCase.testSame(CompilerTestCase.java:741)
	at com.google.javascript.jscomp.InlineVariablesTest.testNoInlineBackwards(InlineVariablesTest.java:462)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testNoInlineOutOfBranch" time="0.002">
    <failure message="&#xa;Expected: if(true)var x=null;var y=x&#xa;Result:   if(true);&#xa;Node tree inequality:&#xa;Tree1:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;        IF 1 [source_file: expected0]&#xa;            TRUE 1 [source_file: expected0]&#xa;            BLOCK 1 [added_block: 1] [source_file: expected0]&#xa;                VAR 1 [source_file: expected0]&#xa;                    NAME x 1 [is_constant_name: 1] [source_file: expected0]&#xa;                        NULL 1 [source_file: expected0]&#xa;        VAR 1 [source_file: expected0]&#xa;            NAME y 1 [is_constant_name: 1] [source_file: expected0]&#xa;                NAME x 1 [is_constant_name: 1] [source_file: expected0]&#xa;&#xa;&#xa;Tree2:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;        IF 1 [source_file: testcode]&#xa;            TRUE 1 [source_file: testcode]&#xa;            BLOCK 1 [added_block: 1] [source_file: testcode]&#xa;&#xa;&#xa;Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;    IF 1 [source_file: expected0]&#xa;        TRUE 1 [source_file: expected0]&#xa;        BLOCK 1 [added_block: 1] [source_file: expected0]&#xa;            VAR 1 [source_file: expected0]&#xa;                NAME x 1 [is_constant_name: 1] [source_file: expected0]&#xa;                    NULL 1 [source_file: expected0]&#xa;    VAR 1 [source_file: expected0]&#xa;        NAME y 1 [is_constant_name: 1] [source_file: expected0]&#xa;            NAME x 1 [is_constant_name: 1] [source_file: expected0]&#xa;&#xa;&#xa;Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;    IF 1 [source_file: testcode]&#xa;        TRUE 1 [source_file: testcode]&#xa;        BLOCK 1 [added_block: 1] [source_file: testcode]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: if(true)var x=null;var y=x
Result:   if(true);
Node tree inequality:
Tree1:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        IF 1 [source_file: expected0]
            TRUE 1 [source_file: expected0]
            BLOCK 1 [added_block: 1] [source_file: expected0]
                VAR 1 [source_file: expected0]
                    NAME x 1 [is_constant_name: 1] [source_file: expected0]
                        NULL 1 [source_file: expected0]
        VAR 1 [source_file: expected0]
            NAME y 1 [is_constant_name: 1] [source_file: expected0]
                NAME x 1 [is_constant_name: 1] [source_file: expected0]


Tree2:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
        IF 1 [source_file: testcode]
            TRUE 1 [source_file: testcode]
            BLOCK 1 [added_block: 1] [source_file: testcode]


Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
    IF 1 [source_file: expected0]
        TRUE 1 [source_file: expected0]
        BLOCK 1 [added_block: 1] [source_file: expected0]
            VAR 1 [source_file: expected0]
                NAME x 1 [is_constant_name: 1] [source_file: expected0]
                    NULL 1 [source_file: expected0]
    VAR 1 [source_file: expected0]
        NAME y 1 [is_constant_name: 1] [source_file: expected0]
            NAME x 1 [is_constant_name: 1] [source_file: expected0]


Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
    IF 1 [source_file: testcode]
        TRUE 1 [source_file: testcode]
        BLOCK 1 [added_block: 1] [source_file: testcode]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.CompilerTestCase.testSame(CompilerTestCase.java:741)
	at com.google.javascript.jscomp.InlineVariablesTest.testNoInlineOutOfBranch(InlineVariablesTest.java:466)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInterferingInlines" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInlineIntoTryCatch" time="0.001">
    <error message="Missing catch or finally for try statement.. Reference node:&#xa;TRY 1 [source_file: testcode]&#xa;    BLOCK 1 [source_file: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME b 1 [source_file: testcode]&#xa;                NAME a 1 [source_file: testcode]&#xa;    BLOCK 1 [source_file: testcode]&#xa;        CATCH 1 [source_file: testcode]&#xa;            NAME e 1 [source_file: testcode]&#xa;            BLOCK 1 [source_file: testcode]&#xa;                VAR 1 [source_file: testcode]&#xa;                    NAME c 1 [source_file: testcode]&#xa;                        ADD 1 [source_file: testcode]&#xa;                            NAME a 1 [source_file: testcode]&#xa;                            NAME b 1 [source_file: testcode]&#xa;                VAR 1 [source_file: testcode]&#xa;                    NAME d 1 [source_file: testcode]&#xa;                        TRUE 1 [source_file: testcode]&#xa;    BLOCK 1 [source_file: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME f 1 [source_file: testcode]&#xa;                ADD 1 [source_file: testcode]&#xa;                    ADD 1 [source_file: testcode]&#xa;                        ADD 1 [source_file: testcode]&#xa;                            NAME a 1 [source_file: testcode]&#xa;                            NAME b 1 [source_file: testcode]&#xa;                        NAME c 1 [source_file: testcode]&#xa;                    NAME d 1 [source_file: testcode]&#xa;" type="java.lang.IllegalStateException">java.lang.IllegalStateException: Missing catch or finally for try statement.. Reference node:
TRY 1 [source_file: testcode]
    BLOCK 1 [source_file: testcode]
        VAR 1 [source_file: testcode]
            NAME b 1 [source_file: testcode]
                NAME a 1 [source_file: testcode]
    BLOCK 1 [source_file: testcode]
        CATCH 1 [source_file: testcode]
            NAME e 1 [source_file: testcode]
            BLOCK 1 [source_file: testcode]
                VAR 1 [source_file: testcode]
                    NAME c 1 [source_file: testcode]
                        ADD 1 [source_file: testcode]
                            NAME a 1 [source_file: testcode]
                            NAME b 1 [source_file: testcode]
                VAR 1 [source_file: testcode]
                    NAME d 1 [source_file: testcode]
                        TRUE 1 [source_file: testcode]
    BLOCK 1 [source_file: testcode]
        VAR 1 [source_file: testcode]
            NAME f 1 [source_file: testcode]
                ADD 1 [source_file: testcode]
                    ADD 1 [source_file: testcode]
                        ADD 1 [source_file: testcode]
                            NAME a 1 [source_file: testcode]
                            NAME b 1 [source_file: testcode]
                        NAME c 1 [source_file: testcode]
                    NAME d 1 [source_file: testcode]

	at com.google.javascript.jscomp.AstValidator$1.handleViolation(AstValidator.java:54)
	at com.google.javascript.jscomp.AstValidator.violation(AstValidator.java:1167)
	at com.google.javascript.jscomp.AstValidator.validateTry(AstValidator.java:888)
	at com.google.javascript.jscomp.AstValidator.validateStatement(AstValidator.java:142)
	at com.google.javascript.jscomp.AstValidator.validateScript(AstValidator.java:91)
	at com.google.javascript.jscomp.AstValidator.validateCodeRoot(AstValidator.java:82)
	at com.google.javascript.jscomp.AstValidator.validateRoot(AstValidator.java:75)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:967)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineVariablesTest.testInlineIntoTryCatch(InlineVariablesTest.java:475)
</error>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInlineConstants" time="0.005" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInlineStringWhenWorthwhile" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInlineConstantAlias" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInlineConstantAliasWithAnnotation" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInlineConstantAliasWithNonConstant" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testCascadingInlines" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInlineFunctionDeclaration" time="0.009" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="test2388531" time="0.004" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testRecursiveFunction1" time="0.002">
    <failure message="&#xa;Expected: var x=0;(function x$$1(){return x$$1?x$$1():3})()&#xa;Result:   (function x$$1(){return x$$1?x$$1():3})()&#xa;Node tree inequality:&#xa;Tree1:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;        VAR 1 [source_file: expected0]&#xa;            NAME x 1 [is_constant_name: 1] [source_file: expected0]&#xa;                NUMBER 0.0 1 [source_file: expected0]&#xa;        EXPR_RESULT 1 [source_file: expected0]&#xa;            CALL 1 [free_call: 1] [source_file: expected0]&#xa;                FUNCTION x$$1 1 [source_file: expected0]&#xa;                    NAME x$$1 1 [is_constant_name: 1] [source_file: expected0]&#xa;                    PARAM_LIST 1 [source_file: expected0]&#xa;                    BLOCK 1 [source_file: expected0]&#xa;                        RETURN 1 [source_file: expected0]&#xa;                            HOOK 1 [source_file: expected0]&#xa;                                NAME x$$1 1 [is_constant_name: 1] [source_file: expected0]&#xa;                                CALL 1 [free_call: 1] [source_file: expected0]&#xa;                                    NAME x$$1 1 [is_constant_name: 1] [source_file: expected0]&#xa;                                NUMBER 3.0 1 [source_file: expected0]&#xa;&#xa;&#xa;Tree2:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            CALL 1 [free_call: 1] [source_file: testcode]&#xa;                FUNCTION x$$1 1 [source_file: testcode]&#xa;                    NAME x$$1 1 [is_constant_name: 1] [source_file: testcode]&#xa;                    PARAM_LIST 1 [source_file: testcode]&#xa;                    BLOCK 1 [source_file: testcode]&#xa;                        RETURN 1 [source_file: testcode]&#xa;                            HOOK 1 [source_file: testcode]&#xa;                                NAME x$$1 1 [is_constant_name: 1] [source_file: testcode]&#xa;                                CALL 1 [free_call: 1] [source_file: testcode]&#xa;                                    NAME x$$1 1 [is_constant_name: 1] [source_file: testcode]&#xa;                                NUMBER 3.0 1 [source_file: testcode]&#xa;&#xa;&#xa;Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;    VAR 1 [source_file: expected0]&#xa;        NAME x 1 [is_constant_name: 1] [source_file: expected0]&#xa;            NUMBER 0.0 1 [source_file: expected0]&#xa;    EXPR_RESULT 1 [source_file: expected0]&#xa;        CALL 1 [free_call: 1] [source_file: expected0]&#xa;            FUNCTION x$$1 1 [source_file: expected0]&#xa;                NAME x$$1 1 [is_constant_name: 1] [source_file: expected0]&#xa;                PARAM_LIST 1 [source_file: expected0]&#xa;                BLOCK 1 [source_file: expected0]&#xa;                    RETURN 1 [source_file: expected0]&#xa;                        HOOK 1 [source_file: expected0]&#xa;                            NAME x$$1 1 [is_constant_name: 1] [source_file: expected0]&#xa;                            CALL 1 [free_call: 1] [source_file: expected0]&#xa;                                NAME x$$1 1 [is_constant_name: 1] [source_file: expected0]&#xa;                            NUMBER 3.0 1 [source_file: expected0]&#xa;&#xa;&#xa;Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;    EXPR_RESULT 1 [source_file: testcode]&#xa;        CALL 1 [free_call: 1] [source_file: testcode]&#xa;            FUNCTION x$$1 1 [source_file: testcode]&#xa;                NAME x$$1 1 [is_constant_name: 1] [source_file: testcode]&#xa;                PARAM_LIST 1 [source_file: testcode]&#xa;                BLOCK 1 [source_file: testcode]&#xa;                    RETURN 1 [source_file: testcode]&#xa;                        HOOK 1 [source_file: testcode]&#xa;                            NAME x$$1 1 [is_constant_name: 1] [source_file: testcode]&#xa;                            CALL 1 [free_call: 1] [source_file: testcode]&#xa;                                NAME x$$1 1 [is_constant_name: 1] [source_file: testcode]&#xa;                            NUMBER 3.0 1 [source_file: testcode]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: var x=0;(function x$$1(){return x$$1?x$$1():3})()
Result:   (function x$$1(){return x$$1?x$$1():3})()
Node tree inequality:
Tree1:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        VAR 1 [source_file: expected0]
            NAME x 1 [is_constant_name: 1] [source_file: expected0]
                NUMBER 0.0 1 [source_file: expected0]
        EXPR_RESULT 1 [source_file: expected0]
            CALL 1 [free_call: 1] [source_file: expected0]
                FUNCTION x$$1 1 [source_file: expected0]
                    NAME x$$1 1 [is_constant_name: 1] [source_file: expected0]
                    PARAM_LIST 1 [source_file: expected0]
                    BLOCK 1 [source_file: expected0]
                        RETURN 1 [source_file: expected0]
                            HOOK 1 [source_file: expected0]
                                NAME x$$1 1 [is_constant_name: 1] [source_file: expected0]
                                CALL 1 [free_call: 1] [source_file: expected0]
                                    NAME x$$1 1 [is_constant_name: 1] [source_file: expected0]
                                NUMBER 3.0 1 [source_file: expected0]


Tree2:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            CALL 1 [free_call: 1] [source_file: testcode]
                FUNCTION x$$1 1 [source_file: testcode]
                    NAME x$$1 1 [is_constant_name: 1] [source_file: testcode]
                    PARAM_LIST 1 [source_file: testcode]
                    BLOCK 1 [source_file: testcode]
                        RETURN 1 [source_file: testcode]
                            HOOK 1 [source_file: testcode]
                                NAME x$$1 1 [is_constant_name: 1] [source_file: testcode]
                                CALL 1 [free_call: 1] [source_file: testcode]
                                    NAME x$$1 1 [is_constant_name: 1] [source_file: testcode]
                                NUMBER 3.0 1 [source_file: testcode]


Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
    VAR 1 [source_file: expected0]
        NAME x 1 [is_constant_name: 1] [source_file: expected0]
            NUMBER 0.0 1 [source_file: expected0]
    EXPR_RESULT 1 [source_file: expected0]
        CALL 1 [free_call: 1] [source_file: expected0]
            FUNCTION x$$1 1 [source_file: expected0]
                NAME x$$1 1 [is_constant_name: 1] [source_file: expected0]
                PARAM_LIST 1 [source_file: expected0]
                BLOCK 1 [source_file: expected0]
                    RETURN 1 [source_file: expected0]
                        HOOK 1 [source_file: expected0]
                            NAME x$$1 1 [is_constant_name: 1] [source_file: expected0]
                            CALL 1 [free_call: 1] [source_file: expected0]
                                NAME x$$1 1 [is_constant_name: 1] [source_file: expected0]
                            NUMBER 3.0 1 [source_file: expected0]


Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
    EXPR_RESULT 1 [source_file: testcode]
        CALL 1 [free_call: 1] [source_file: testcode]
            FUNCTION x$$1 1 [source_file: testcode]
                NAME x$$1 1 [is_constant_name: 1] [source_file: testcode]
                PARAM_LIST 1 [source_file: testcode]
                BLOCK 1 [source_file: testcode]
                    RETURN 1 [source_file: testcode]
                        HOOK 1 [source_file: testcode]
                            NAME x$$1 1 [is_constant_name: 1] [source_file: testcode]
                            CALL 1 [free_call: 1] [source_file: testcode]
                                NAME x$$1 1 [is_constant_name: 1] [source_file: testcode]
                            NUMBER 3.0 1 [source_file: testcode]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.CompilerTestCase.testSame(CompilerTestCase.java:741)
	at com.google.javascript.jscomp.InlineVariablesTest.testRecursiveFunction1(InlineVariablesTest.java:544)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testRecursiveFunction2" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testUnreferencedBleedingFunction" time="0.003" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testReferencedBleedingFunction" time="0.004" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInlineAliases1" time="0.003" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInlineAliases1b" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInlineAliases1c" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInlineAliases1d" time="0.003" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInlineAliases2" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInlineAliases2b" time="0.01" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInlineAliases2c" time="0.005" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInlineAliases2d" time="0.003" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInlineAliasesInLoop" time="0.003" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testNoInlineAliasesInLoop" time="0.058" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testNoInlineAliases1" time="0.008" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testNoInlineAliases1b" time="0.005" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testNoInlineAliases2" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testNoInlineAliases2b" time="0.003" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testNoInlineAliases3" time="0.004" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testNoInlineAliases3b" time="0.005" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testNoInlineAliases4" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testNoInlineAliases4b" time="0.007" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testNoInlineAliases5" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testNoInlineAliases5b" time="0.003" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testNoInlineAliases6" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testNoInlineAliases6b" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testNoInlineAliases7" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testNoInlineAliases7b" time="0.004" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testNoInlineAliases8" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testNoInlineAliases8b" time="0.006" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testSideEffectOrder" time="0.006" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInlineParameterAlias1" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInlineParameterAlias2" time="0.003" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInlineFunctionAlias1a" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInlineFunctionAlias1b" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInlineFunctionAlias2a" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInlineFunctionAlias2b" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInlineCatchAlias1" time="0.001">
    <error message="Missing catch or finally for try statement.. Reference node:&#xa;TRY 1 [source_file: testcode]&#xa;    BLOCK 1 [source_file: testcode]&#xa;    BLOCK 1 [source_file: testcode]&#xa;        CATCH 1 [source_file: testcode]&#xa;            NAME e 1 [source_file: testcode]&#xa;            BLOCK 1 [source_file: testcode]&#xa;                VAR 1 [source_file: testcode]&#xa;                    NAME y 1 [source_file: testcode]&#xa;                        NAME e 1 [source_file: testcode]&#xa;                EXPR_RESULT 1 [source_file: testcode]&#xa;                    CALL 1 [free_call: 1] [source_file: testcode]&#xa;                        NAME g 1 [source_file: testcode]&#xa;                EXPR_RESULT 1 [source_file: testcode]&#xa;                    NAME y 1 [source_file: testcode]&#xa;                EXPR_RESULT 1 [source_file: testcode]&#xa;                    NAME y 1 [source_file: testcode]&#xa;" type="java.lang.IllegalStateException">java.lang.IllegalStateException: Missing catch or finally for try statement.. Reference node:
TRY 1 [source_file: testcode]
    BLOCK 1 [source_file: testcode]
    BLOCK 1 [source_file: testcode]
        CATCH 1 [source_file: testcode]
            NAME e 1 [source_file: testcode]
            BLOCK 1 [source_file: testcode]
                VAR 1 [source_file: testcode]
                    NAME y 1 [source_file: testcode]
                        NAME e 1 [source_file: testcode]
                EXPR_RESULT 1 [source_file: testcode]
                    CALL 1 [free_call: 1] [source_file: testcode]
                        NAME g 1 [source_file: testcode]
                EXPR_RESULT 1 [source_file: testcode]
                    NAME y 1 [source_file: testcode]
                EXPR_RESULT 1 [source_file: testcode]
                    NAME y 1 [source_file: testcode]

	at com.google.javascript.jscomp.AstValidator$1.handleViolation(AstValidator.java:54)
	at com.google.javascript.jscomp.AstValidator.violation(AstValidator.java:1167)
	at com.google.javascript.jscomp.AstValidator.validateTry(AstValidator.java:888)
	at com.google.javascript.jscomp.AstValidator.validateStatement(AstValidator.java:142)
	at com.google.javascript.jscomp.AstValidator.validateScript(AstValidator.java:91)
	at com.google.javascript.jscomp.AstValidator.validateCodeRoot(AstValidator.java:82)
	at com.google.javascript.jscomp.AstValidator.validateRoot(AstValidator.java:75)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:967)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineVariablesTest.testInlineCatchAlias1(InlineVariablesTest.java:818)
</error>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInlineCatchAlias2" time="0.003">
    <error message="Missing catch or finally for try statement.. Reference node:&#xa;TRY 1 [source_file: testcode]&#xa;    BLOCK 1 [source_file: testcode]&#xa;    BLOCK 1 [source_file: testcode]&#xa;        CATCH 1 [source_file: testcode]&#xa;            NAME e 1 [source_file: testcode]&#xa;            BLOCK 1 [source_file: testcode]&#xa;                VAR 1 [source_file: testcode]&#xa;                    NAME y 1 [source_file: testcode]&#xa;                EXPR_RESULT 1 [source_file: testcode]&#xa;                    ASSIGN 1 [source_file: testcode]&#xa;                        NAME y 1 [source_file: testcode]&#xa;                        NAME e 1 [source_file: testcode]&#xa;                EXPR_RESULT 1 [source_file: testcode]&#xa;                    CALL 1 [free_call: 1] [source_file: testcode]&#xa;                        NAME g 1 [source_file: testcode]&#xa;                EXPR_RESULT 1 [source_file: testcode]&#xa;                    NAME y 1 [source_file: testcode]&#xa;                EXPR_RESULT 1 [source_file: testcode]&#xa;                    NAME y 1 [source_file: testcode]&#xa;" type="java.lang.IllegalStateException">java.lang.IllegalStateException: Missing catch or finally for try statement.. Reference node:
TRY 1 [source_file: testcode]
    BLOCK 1 [source_file: testcode]
    BLOCK 1 [source_file: testcode]
        CATCH 1 [source_file: testcode]
            NAME e 1 [source_file: testcode]
            BLOCK 1 [source_file: testcode]
                VAR 1 [source_file: testcode]
                    NAME y 1 [source_file: testcode]
                EXPR_RESULT 1 [source_file: testcode]
                    ASSIGN 1 [source_file: testcode]
                        NAME y 1 [source_file: testcode]
                        NAME e 1 [source_file: testcode]
                EXPR_RESULT 1 [source_file: testcode]
                    CALL 1 [free_call: 1] [source_file: testcode]
                        NAME g 1 [source_file: testcode]
                EXPR_RESULT 1 [source_file: testcode]
                    NAME y 1 [source_file: testcode]
                EXPR_RESULT 1 [source_file: testcode]
                    NAME y 1 [source_file: testcode]

	at com.google.javascript.jscomp.AstValidator$1.handleViolation(AstValidator.java:54)
	at com.google.javascript.jscomp.AstValidator.violation(AstValidator.java:1167)
	at com.google.javascript.jscomp.AstValidator.validateTry(AstValidator.java:888)
	at com.google.javascript.jscomp.AstValidator.validateStatement(AstValidator.java:142)
	at com.google.javascript.jscomp.AstValidator.validateScript(AstValidator.java:91)
	at com.google.javascript.jscomp.AstValidator.validateCodeRoot(AstValidator.java:82)
	at com.google.javascript.jscomp.AstValidator.validateRoot(AstValidator.java:75)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:967)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineVariablesTest.testInlineCatchAlias2(InlineVariablesTest.java:834)
</error>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testLocalsOnly1" time="0.006" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testLocalsOnly2" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInlineUndefined1" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInlineUndefined2" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInlineUndefined3" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInlineUndefined4" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInlineUndefined5" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testIssue90" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testThisAlias" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testThisEscapedAlias" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInlineNamedFunction" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testIssue378ModifiedArguments1" time="0.006" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testIssue378ModifiedArguments2" time="0.003" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testIssue378EscapedArguments1" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testIssue378EscapedArguments2" time="0.003" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testIssue378EscapedArguments3" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testIssue378EscapedArguments4" time="0.003" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testIssue378ArgumentsRead1" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testIssue378ArgumentsRead2" time="0.003" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testArgumentsModifiedInOuterFunction" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testArgumentsModifiedInInnerFunction" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testNoInlineRedeclaredExterns" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testBug6598844" time="0.003" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testExternalIssue1053" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testHoistedFunction3" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testHoistedFunction4" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testHoistedFunction5" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testHoistedFunction6" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testIssue354" time="0.003" />
  <system-out><![CDATA[]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
