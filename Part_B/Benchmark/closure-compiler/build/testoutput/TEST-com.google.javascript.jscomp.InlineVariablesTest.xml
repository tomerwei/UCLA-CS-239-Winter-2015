<?xml version="1.0" encoding="UTF-8" ?>
<testsuite errors="0" failures="49" hostname="cs-210-206.cs.ucla.edu" name="com.google.javascript.jscomp.InlineVariablesTest" skipped="0" tests="142" time="0.259" timestamp="2015-03-08T21:49:16">
  <properties>
    <property name="java.vendor" value="Oracle Corporation" />
    <property name="lib.dir" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/lib" />
    <property name="refasterjs-jarfile" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/build/refasterjs.jar" />
    <property name="sun.java.launcher" value="SUN_STANDARD" />
    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers" />
    <property name="os.name" value="Mac OS X" />
    <property name="sun.boot.class.path" value="/Library/Java/JavaVirtualMachines/jdk1.7.0_75.jdk/Contents/Home/jre/lib/resources.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_75.jdk/Contents/Home/jre/lib/rt.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_75.jdk/Contents/Home/jre/lib/sunrsasign.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_75.jdk/Contents/Home/jre/lib/jsse.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_75.jdk/Contents/Home/jre/lib/jce.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_75.jdk/Contents/Home/jre/lib/charsets.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_75.jdk/Contents/Home/jre/lib/jfr.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_75.jdk/Contents/Home/jre/classes" />
    <property name="maven-repository-id" value="sonatype-nexus-staging" />
    <property name="java.vm.specification.vendor" value="Oracle Corporation" />
    <property name="ant.home" value="//Users/linmanna/ant" />
    <property name="java.runtime.version" value="1.7.0_75-b13" />
    <property name="gen.dir" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/gen" />
    <property name="user.name" value="linmanna" />
    <property name="ant.file.compiler" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/build.xml" />
    <property name="build.dir" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/build" />
    <property name="ant.build.javac.target" value="1.7" />
    <property name="user.language" value="zh" />
    <property name="test.method" value="" />
    <property name="sun.boot.library.path" value="/Library/Java/JavaVirtualMachines/jdk1.7.0_75.jdk/Contents/Home/jre/lib" />
    <property name="ant.project.default-target" value="jar" />
    <property name="ant.project.name" value="compiler" />
    <property name="java.version" value="1.7.0_75" />
    <property name="user.timezone" value="" />
    <property name="sun.arch.data.model" value="64" />
    <property name="http.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16" />
    <property name="java.endorsed.dirs" value="/Library/Java/JavaVirtualMachines/jdk1.7.0_75.jdk/Contents/Home/jre/lib/endorsed" />
    <property name="sun.cpu.isalist" value="" />
    <property name="sun.jnu.encoding" value="UTF-8" />
    <property name="file.encoding.pkg" value="sun.io" />
    <property name="file.separator" value="/" />
    <property name="java.specification.name" value="Java Platform API Specification" />
    <property name="protoc.executable" value="protoc" />
    <property name="classes.dir" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/build/classes" />
    <property name="java.class.version" value="51.0" />
    <property name="testClasses.dir" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/build/test" />
    <property name="user.country" value="CN" />
    <property name="java.home" value="/Library/Java/JavaVirtualMachines/jdk1.7.0_75.jdk/Contents/Home/jre" />
    <property name="java.vm.info" value="mixed mode" />
    <property name="externs.dir" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/externs" />
    <property name="ant.file" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/build.xml" />
    <property name="os.version" value="10.9.5" />
    <property name="javac.debug" value="on" />
    <property name="path.separator" value=":" />
    <property name="java.vm.version" value="24.75-b04" />
    <property name="ant.library.dir" value="//Users/linmanna/ant/lib" />
    <property name="java.awt.printerjob" value="sun.lwawt.macosx.CPrinterJob" />
    <property name="webservice-jarfile" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/build/webservice.jar" />
    <property name="sun.io.unicode.encoding" value="UnicodeBig" />
    <property name="test.fork" value="true" />
    <property name="webservice.dir" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/src/com/google/javascript/jscomp/webservice" />
    <property name="awt.toolkit" value="sun.lwawt.macosx.LWCToolkit" />
    <property name="buildlib.dir" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/build/lib" />
    <property name="socksNonProxyHosts" value="local|*.local|169.254/16|*.169.254/16" />
    <property name="ftp.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16" />
    <property name="ant.build.javac.source" value="1.7" />
    <property name="refasterjs.dir" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/src/com/google/javascript/refactoring" />
    <property name="user.home" value="/Users/linmanna" />
    <property name="java.specification.vendor" value="Oracle Corporation" />
    <property name="test.dir" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/test" />
    <property name="java.library.path" value="/Users/linmanna/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:." />
    <property name="java.vendor.url" value="http://java.oracle.com/" />
    <property name="java.vm.vendor" value="Oracle Corporation" />
    <property name="gopherProxySet" value="false" />
    <property name="build.relVersion" value="5107abc" />
    <property name="java.runtime.name" value="Java(TM) SE Runtime Environment" />
    <property name="sun.java.command" value="org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner testsfile=/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/junittestcases5949901879760027472.properties skipNonTests=false filtertrace=true haltOnError=false haltOnFailure=false formatter=org.apache.tools.ant.taskdefs.optional.junit.SummaryJUnitResultFormatter showoutput=true outputtoformatters=true logfailedtests=true threadid=0 logtestlistenerevents=false formatter=org.apache.tools.ant.taskdefs.optional.junit.BriefJUnitResultFormatter formatter=org.apache.tools.ant.taskdefs.optional.junit.XMLJUnitResultFormatter,/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/build/testoutput/IGNORETHIS.xml crashfile=/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/junitvmwatcher5896012663290099626.properties propsfile=/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/junit3382148267101857145.properties" />
    <property name="java.class.path" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/build/classes:/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/lib/ant-launcher.jar:/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/lib/ant.jar:/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/lib/args4j.jar:/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/lib/gson.jar:/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/lib/guava.jar:/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/lib/jsr305.jar:/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/lib/junit.jar:/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/lib/protobuf-java.jar:/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/lib/truth.jar:/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/build/test:/Users/linmanna/ant/lib/ant-launcher.jar:/Users/linmanna/ant/lib/ant.jar:/Users/linmanna/ant/lib/ant-junit.jar:/Users/linmanna/ant/lib/ant-junit4.jar" />
    <property name="ant.version" value="Apache Ant(TM) version 1.9.4 compiled on April 29 2014" />
    <property name="test.class" value="*Test" />
    <property name="java.vm.specification.name" value="Java Virtual Machine Specification" />
    <property name="ant.file.type" value="file" />
    <property name="java.vm.specification.version" value="1.7" />
    <property name="sun.cpu.endian" value="little" />
    <property name="sun.os.patch.level" value="unknown" />
    <property name="java.io.tmpdir" value="/var/folders/_p/3swdt4h96dn79vyt21dtny9h0000gn/T/" />
    <property name="java.vendor.url.bug" value="http://bugreport.sun.com/bugreport/" />
    <property name="java.awt.graphicsenv" value="sun.awt.CGraphicsEnvironment" />
    <property name="maven-repository-url" value="https://oss.sonatype.org/service/local/staging/deploy/maven2/" />
    <property name="os.arch" value="x86_64" />
    <property name="webservice-classes.dir" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/build/webservice-classes" />
    <property name="java.ext.dirs" value="/Users/linmanna/Library/Java/Extensions:/Library/Java/JavaVirtualMachines/jdk1.7.0_75.jdk/Contents/Home/jre/lib/ext:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java" />
    <property name="user.dir" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler" />
    <property name="ant.file.type.compiler" value="file" />
    <property name="line.separator" value="&#xa;" />
    <property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM" />
    <property name="refasterjs-classes.dir" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/build/refasterjs-classes" />
    <property name="basedir" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler" />
    <property name="ant.java.version" value="1.7" />
    <property name="ant.core.lib" value="/Users/linmanna/ant/lib/ant.jar" />
    <property name="file.encoding" value="UTF-8" />
    <property name="closure.build.dir" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/build" />
    <property name="compiler-jarfile" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/build/compiler.jar" />
    <property name="java.specification.version" value="1.7" />
    <property name="src.dir" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/src" />
    <property name="ant.project.invoked-targets" value="clean,compile,compile-tests,test" />
    <property name="javadoc.dir" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/build/javadoc" />
    <property name="tools.dir" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/tools" />
  </properties>
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInlineGlobal" time="0.002">
    <failure message="&#xa;Expected: var z=1&#xa;Result:   var x=1;var z=x&#xa;Node tree inequality:&#xa;Tree1:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;        VAR 1 [source_file: expected0]&#xa;            NAME z 1 [source_file: expected0]&#xa;                NUMBER 1.0 1 [source_file: expected0]&#xa;&#xa;&#xa;Tree2:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME x 1 [source_file: testcode]&#xa;                NUMBER 1.0 1 [source_file: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME z 1 [source_file: testcode]&#xa;                NAME x 1 [source_file: testcode]&#xa;&#xa;&#xa;Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;    VAR 1 [source_file: expected0]&#xa;        NAME z 1 [source_file: expected0]&#xa;            NUMBER 1.0 1 [source_file: expected0]&#xa;&#xa;&#xa;Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME x 1 [source_file: testcode]&#xa;            NUMBER 1.0 1 [source_file: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME z 1 [source_file: testcode]&#xa;            NAME x 1 [source_file: testcode]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: var z=1
Result:   var x=1;var z=x
Node tree inequality:
Tree1:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        VAR 1 [source_file: expected0]
            NAME z 1 [source_file: expected0]
                NUMBER 1.0 1 [source_file: expected0]


Tree2:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
        VAR 1 [source_file: testcode]
            NAME x 1 [source_file: testcode]
                NUMBER 1.0 1 [source_file: testcode]
        VAR 1 [source_file: testcode]
            NAME z 1 [source_file: testcode]
                NAME x 1 [source_file: testcode]


Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
    VAR 1 [source_file: expected0]
        NAME z 1 [source_file: expected0]
            NUMBER 1.0 1 [source_file: expected0]


Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
    VAR 1 [source_file: testcode]
        NAME x 1 [source_file: testcode]
            NUMBER 1.0 1 [source_file: testcode]
    VAR 1 [source_file: testcode]
        NAME z 1 [source_file: testcode]
            NAME x 1 [source_file: testcode]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineVariablesTest.testInlineGlobal(InlineVariablesTest.java:61)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testNoInlineExportedName" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testNoInlineExportedName2" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testDoNotInlineDecrement" time="0.0" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInlineIntoRhsOfAssign" time="0.001">
    <failure message="&#xa;Expected: var y=1&#xa;Result:   var x=1;var y=x&#xa;Node tree inequality:&#xa;Tree1:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;        VAR 1 [source_file: expected0]&#xa;            NAME y 1 [source_file: expected0]&#xa;                NUMBER 1.0 1 [source_file: expected0]&#xa;&#xa;&#xa;Tree2:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME x 1 [source_file: testcode]&#xa;                NUMBER 1.0 1 [source_file: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME y 1 [source_file: testcode]&#xa;                NAME x 1 [source_file: testcode]&#xa;&#xa;&#xa;Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;    VAR 1 [source_file: expected0]&#xa;        NAME y 1 [source_file: expected0]&#xa;            NUMBER 1.0 1 [source_file: expected0]&#xa;&#xa;&#xa;Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME x 1 [source_file: testcode]&#xa;            NUMBER 1.0 1 [source_file: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME y 1 [source_file: testcode]&#xa;            NAME x 1 [source_file: testcode]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: var y=1
Result:   var x=1;var y=x
Node tree inequality:
Tree1:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        VAR 1 [source_file: expected0]
            NAME y 1 [source_file: expected0]
                NUMBER 1.0 1 [source_file: expected0]


Tree2:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
        VAR 1 [source_file: testcode]
            NAME x 1 [source_file: testcode]
                NUMBER 1.0 1 [source_file: testcode]
        VAR 1 [source_file: testcode]
            NAME y 1 [source_file: testcode]
                NAME x 1 [source_file: testcode]


Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
    VAR 1 [source_file: expected0]
        NAME y 1 [source_file: expected0]
            NUMBER 1.0 1 [source_file: expected0]


Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
    VAR 1 [source_file: testcode]
        NAME x 1 [source_file: testcode]
            NUMBER 1.0 1 [source_file: testcode]
    VAR 1 [source_file: testcode]
        NAME y 1 [source_file: testcode]
            NAME x 1 [source_file: testcode]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineVariablesTest.testInlineIntoRhsOfAssign(InlineVariablesTest.java:86)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInlineInFunction" time="0.006" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInlineInFunction2" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInlineInFunction3" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInlineInFunction4" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInlineInFunction5" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInlineAcrossModules" time="0.001">
    <failure message="&#xa;Expected: var b=2&#xa;Result:   var a=2;var b=a&#xa;Node tree inequality:&#xa;Tree1:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected1] [input_id: InputId: expected1]&#xa;        VAR 1 [source_file: expected1]&#xa;            NAME b 1 [source_file: expected1]&#xa;                NUMBER 2.0 1 [source_file: expected1]&#xa;&#xa;&#xa;Tree2:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: i0] [input_id: InputId: i0]&#xa;        VAR 1 [source_file: i0]&#xa;            NAME a 1 [source_file: i0]&#xa;                NUMBER 2.0 1 [source_file: i0]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: i1] [input_id: InputId: i1]&#xa;        VAR 1 [source_file: i1]&#xa;            NAME b 1 [source_file: i1]&#xa;                NAME a 1 [source_file: i1]&#xa;&#xa;&#xa;Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;&#xa;&#xa;Subtree2: SCRIPT 1 [synthetic: 1] [source_file: i0] [input_id: InputId: i0]&#xa;    VAR 1 [source_file: i0]&#xa;        NAME a 1 [source_file: i0]&#xa;            NUMBER 2.0 1 [source_file: i0]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: var b=2
Result:   var a=2;var b=a
Node tree inequality:
Tree1:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
    SCRIPT 1 [synthetic: 1] [source_file: expected1] [input_id: InputId: expected1]
        VAR 1 [source_file: expected1]
            NAME b 1 [source_file: expected1]
                NUMBER 2.0 1 [source_file: expected1]


Tree2:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: i0] [input_id: InputId: i0]
        VAR 1 [source_file: i0]
            NAME a 1 [source_file: i0]
                NUMBER 2.0 1 [source_file: i0]
    SCRIPT 1 [synthetic: 1] [source_file: i1] [input_id: InputId: i1]
        VAR 1 [source_file: i1]
            NAME b 1 [source_file: i1]
                NAME a 1 [source_file: i1]


Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]


Subtree2: SCRIPT 1 [synthetic: 1] [source_file: i0] [input_id: InputId: i0]
    VAR 1 [source_file: i0]
        NAME a 1 [source_file: i0]
            NUMBER 2.0 1 [source_file: i0]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:911)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:732)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:712)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:699)
	at com.google.javascript.jscomp.InlineVariablesTest.testInlineAcrossModules(InlineVariablesTest.java:132)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testDoNotExitConditional1" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testDoNotExitConditional2" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testDoNotExitConditional3" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testDoNotExitForLoop" time="0.002">
    <failure message="&#xa;Expected: for(;false;false)var z=1&#xa;Result:   var i=1;for(;false;false)var z=i&#xa;Node tree inequality:&#xa;Tree1:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;        FOR 1 [source_file: expected0]&#xa;            EMPTY 1 [source_file: expected0]&#xa;            FALSE 1 [source_file: expected0]&#xa;            FALSE 1 [source_file: expected0]&#xa;            BLOCK 1 [added_block: 1] [source_file: expected0]&#xa;                VAR 1 [source_file: expected0]&#xa;                    NAME z 1 [source_file: expected0]&#xa;                        NUMBER 1.0 1 [source_file: expected0]&#xa;&#xa;&#xa;Tree2:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME i 1 [source_file: testcode]&#xa;                NUMBER 1.0 1 [source_file: testcode]&#xa;        FOR 1 [source_file: testcode]&#xa;            EMPTY 1 [source_file: testcode]&#xa;            FALSE 1 [source_file: testcode]&#xa;            FALSE 1 [source_file: testcode]&#xa;            BLOCK 1 [added_block: 1] [source_file: testcode]&#xa;                VAR 1 [source_file: testcode]&#xa;                    NAME z 1 [source_file: testcode]&#xa;                        NAME i 1 [source_file: testcode]&#xa;&#xa;&#xa;Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;    FOR 1 [source_file: expected0]&#xa;        EMPTY 1 [source_file: expected0]&#xa;        FALSE 1 [source_file: expected0]&#xa;        FALSE 1 [source_file: expected0]&#xa;        BLOCK 1 [added_block: 1] [source_file: expected0]&#xa;            VAR 1 [source_file: expected0]&#xa;                NAME z 1 [source_file: expected0]&#xa;                    NUMBER 1.0 1 [source_file: expected0]&#xa;&#xa;&#xa;Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME i 1 [source_file: testcode]&#xa;            NUMBER 1.0 1 [source_file: testcode]&#xa;    FOR 1 [source_file: testcode]&#xa;        EMPTY 1 [source_file: testcode]&#xa;        FALSE 1 [source_file: testcode]&#xa;        FALSE 1 [source_file: testcode]&#xa;        BLOCK 1 [added_block: 1] [source_file: testcode]&#xa;            VAR 1 [source_file: testcode]&#xa;                NAME z 1 [source_file: testcode]&#xa;                    NAME i 1 [source_file: testcode]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: for(;false;false)var z=1
Result:   var i=1;for(;false;false)var z=i
Node tree inequality:
Tree1:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        FOR 1 [source_file: expected0]
            EMPTY 1 [source_file: expected0]
            FALSE 1 [source_file: expected0]
            FALSE 1 [source_file: expected0]
            BLOCK 1 [added_block: 1] [source_file: expected0]
                VAR 1 [source_file: expected0]
                    NAME z 1 [source_file: expected0]
                        NUMBER 1.0 1 [source_file: expected0]


Tree2:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
        VAR 1 [source_file: testcode]
            NAME i 1 [source_file: testcode]
                NUMBER 1.0 1 [source_file: testcode]
        FOR 1 [source_file: testcode]
            EMPTY 1 [source_file: testcode]
            FALSE 1 [source_file: testcode]
            FALSE 1 [source_file: testcode]
            BLOCK 1 [added_block: 1] [source_file: testcode]
                VAR 1 [source_file: testcode]
                    NAME z 1 [source_file: testcode]
                        NAME i 1 [source_file: testcode]


Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
    FOR 1 [source_file: expected0]
        EMPTY 1 [source_file: expected0]
        FALSE 1 [source_file: expected0]
        FALSE 1 [source_file: expected0]
        BLOCK 1 [added_block: 1] [source_file: expected0]
            VAR 1 [source_file: expected0]
                NAME z 1 [source_file: expected0]
                    NUMBER 1.0 1 [source_file: expected0]


Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
    VAR 1 [source_file: testcode]
        NAME i 1 [source_file: testcode]
            NUMBER 1.0 1 [source_file: testcode]
    FOR 1 [source_file: testcode]
        EMPTY 1 [source_file: testcode]
        FALSE 1 [source_file: testcode]
        FALSE 1 [source_file: testcode]
        BLOCK 1 [added_block: 1] [source_file: testcode]
            VAR 1 [source_file: testcode]
                NAME z 1 [source_file: testcode]
                    NAME i 1 [source_file: testcode]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineVariablesTest.testDoNotExitForLoop(InlineVariablesTest.java:154)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testDoNotEnterSubscope" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testDoNotExitTry" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testDoNotEnterCatch" time="0.0" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testDoNotEnterFinally" time="0.0" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInsideIfConditional" time="0.001">
    <failure message="&#xa;Expected: if(foo())alert(3)&#xa;Result:   var a=foo();if(a)alert(3)&#xa;Node tree inequality:&#xa;Tree1:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;        IF 1 [source_file: expected0]&#xa;            CALL 1 [free_call: 1] [source_file: expected0]&#xa;                NAME foo 1 [source_file: expected0]&#xa;            BLOCK 1 [source_file: expected0]&#xa;                EXPR_RESULT 1 [source_file: expected0]&#xa;                    CALL 1 [free_call: 1] [source_file: expected0]&#xa;                        NAME alert 1 [source_file: expected0]&#xa;                        NUMBER 3.0 1 [source_file: expected0]&#xa;&#xa;&#xa;Tree2:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME a 1 [source_file: testcode]&#xa;                CALL 1 [free_call: 1] [source_file: testcode]&#xa;                    NAME foo 1 [source_file: testcode]&#xa;        IF 1 [source_file: testcode]&#xa;            NAME a 1 [source_file: testcode]&#xa;            BLOCK 1 [source_file: testcode]&#xa;                EXPR_RESULT 1 [source_file: testcode]&#xa;                    CALL 1 [free_call: 1] [source_file: testcode]&#xa;                        NAME alert 1 [source_file: testcode]&#xa;                        NUMBER 3.0 1 [source_file: testcode]&#xa;&#xa;&#xa;Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;    IF 1 [source_file: expected0]&#xa;        CALL 1 [free_call: 1] [source_file: expected0]&#xa;            NAME foo 1 [source_file: expected0]&#xa;        BLOCK 1 [source_file: expected0]&#xa;            EXPR_RESULT 1 [source_file: expected0]&#xa;                CALL 1 [free_call: 1] [source_file: expected0]&#xa;                    NAME alert 1 [source_file: expected0]&#xa;                    NUMBER 3.0 1 [source_file: expected0]&#xa;&#xa;&#xa;Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME a 1 [source_file: testcode]&#xa;            CALL 1 [free_call: 1] [source_file: testcode]&#xa;                NAME foo 1 [source_file: testcode]&#xa;    IF 1 [source_file: testcode]&#xa;        NAME a 1 [source_file: testcode]&#xa;        BLOCK 1 [source_file: testcode]&#xa;            EXPR_RESULT 1 [source_file: testcode]&#xa;                CALL 1 [free_call: 1] [source_file: testcode]&#xa;                    NAME alert 1 [source_file: testcode]&#xa;                    NUMBER 3.0 1 [source_file: testcode]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: if(foo())alert(3)
Result:   var a=foo();if(a)alert(3)
Node tree inequality:
Tree1:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        IF 1 [source_file: expected0]
            CALL 1 [free_call: 1] [source_file: expected0]
                NAME foo 1 [source_file: expected0]
            BLOCK 1 [source_file: expected0]
                EXPR_RESULT 1 [source_file: expected0]
                    CALL 1 [free_call: 1] [source_file: expected0]
                        NAME alert 1 [source_file: expected0]
                        NUMBER 3.0 1 [source_file: expected0]


Tree2:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
        VAR 1 [source_file: testcode]
            NAME a 1 [source_file: testcode]
                CALL 1 [free_call: 1] [source_file: testcode]
                    NAME foo 1 [source_file: testcode]
        IF 1 [source_file: testcode]
            NAME a 1 [source_file: testcode]
            BLOCK 1 [source_file: testcode]
                EXPR_RESULT 1 [source_file: testcode]
                    CALL 1 [free_call: 1] [source_file: testcode]
                        NAME alert 1 [source_file: testcode]
                        NUMBER 3.0 1 [source_file: testcode]


Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
    IF 1 [source_file: expected0]
        CALL 1 [free_call: 1] [source_file: expected0]
            NAME foo 1 [source_file: expected0]
        BLOCK 1 [source_file: expected0]
            EXPR_RESULT 1 [source_file: expected0]
                CALL 1 [free_call: 1] [source_file: expected0]
                    NAME alert 1 [source_file: expected0]
                    NUMBER 3.0 1 [source_file: expected0]


Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
    VAR 1 [source_file: testcode]
        NAME a 1 [source_file: testcode]
            CALL 1 [free_call: 1] [source_file: testcode]
                NAME foo 1 [source_file: testcode]
    IF 1 [source_file: testcode]
        NAME a 1 [source_file: testcode]
        BLOCK 1 [source_file: testcode]
            EXPR_RESULT 1 [source_file: testcode]
                CALL 1 [free_call: 1] [source_file: testcode]
                    NAME alert 1 [source_file: testcode]
                    NUMBER 3.0 1 [source_file: testcode]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineVariablesTest.testInsideIfConditional(InlineVariablesTest.java:188)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testOnlyReadAtInitialization" time="0.001">
    <failure message="&#xa;Expected: foo()&#xa;Result:   var a;a=foo()&#xa;Node tree inequality:&#xa;Tree1:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;        EXPR_RESULT 1 [source_file: expected0]&#xa;            CALL 1 [free_call: 1] [source_file: expected0]&#xa;                NAME foo 1 [source_file: expected0]&#xa;&#xa;&#xa;Tree2:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME a 1 [source_file: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            ASSIGN 1 [source_file: testcode]&#xa;                NAME a 1 [source_file: testcode]&#xa;                CALL 1 [free_call: 1] [source_file: testcode]&#xa;                    NAME foo 1 [source_file: testcode]&#xa;&#xa;&#xa;Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;    EXPR_RESULT 1 [source_file: expected0]&#xa;        CALL 1 [free_call: 1] [source_file: expected0]&#xa;            NAME foo 1 [source_file: expected0]&#xa;&#xa;&#xa;Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME a 1 [source_file: testcode]&#xa;    EXPR_RESULT 1 [source_file: testcode]&#xa;        ASSIGN 1 [source_file: testcode]&#xa;            NAME a 1 [source_file: testcode]&#xa;            CALL 1 [free_call: 1] [source_file: testcode]&#xa;                NAME foo 1 [source_file: testcode]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: foo()
Result:   var a;a=foo()
Node tree inequality:
Tree1:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        EXPR_RESULT 1 [source_file: expected0]
            CALL 1 [free_call: 1] [source_file: expected0]
                NAME foo 1 [source_file: expected0]


Tree2:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
        VAR 1 [source_file: testcode]
            NAME a 1 [source_file: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            ASSIGN 1 [source_file: testcode]
                NAME a 1 [source_file: testcode]
                CALL 1 [free_call: 1] [source_file: testcode]
                    NAME foo 1 [source_file: testcode]


Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
    EXPR_RESULT 1 [source_file: expected0]
        CALL 1 [free_call: 1] [source_file: expected0]
            NAME foo 1 [source_file: expected0]


Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
    VAR 1 [source_file: testcode]
        NAME a 1 [source_file: testcode]
    EXPR_RESULT 1 [source_file: testcode]
        ASSIGN 1 [source_file: testcode]
            NAME a 1 [source_file: testcode]
            CALL 1 [free_call: 1] [source_file: testcode]
                NAME foo 1 [source_file: testcode]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineVariablesTest.testOnlyReadAtInitialization(InlineVariablesTest.java:193)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testImmutableWithSingleReferenceAfterInitialzation" time="0.003">
    <failure message="&#xa;Expected: 1&#xa;Result:   var a;a=1&#xa;Node tree inequality:&#xa;Tree1:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;        EXPR_RESULT 1 [source_file: expected0]&#xa;            NUMBER 1.0 1 [source_file: expected0]&#xa;&#xa;&#xa;Tree2:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME a 1 [source_file: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            ASSIGN 1 [source_file: testcode]&#xa;                NAME a 1 [source_file: testcode]&#xa;                NUMBER 1.0 1 [source_file: testcode]&#xa;&#xa;&#xa;Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;    EXPR_RESULT 1 [source_file: expected0]&#xa;        NUMBER 1.0 1 [source_file: expected0]&#xa;&#xa;&#xa;Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME a 1 [source_file: testcode]&#xa;    EXPR_RESULT 1 [source_file: testcode]&#xa;        ASSIGN 1 [source_file: testcode]&#xa;            NAME a 1 [source_file: testcode]&#xa;            NUMBER 1.0 1 [source_file: testcode]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: 1
Result:   var a;a=1
Node tree inequality:
Tree1:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        EXPR_RESULT 1 [source_file: expected0]
            NUMBER 1.0 1 [source_file: expected0]


Tree2:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
        VAR 1 [source_file: testcode]
            NAME a 1 [source_file: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            ASSIGN 1 [source_file: testcode]
                NAME a 1 [source_file: testcode]
                NUMBER 1.0 1 [source_file: testcode]


Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
    EXPR_RESULT 1 [source_file: expected0]
        NUMBER 1.0 1 [source_file: expected0]


Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
    VAR 1 [source_file: testcode]
        NAME a 1 [source_file: testcode]
    EXPR_RESULT 1 [source_file: testcode]
        ASSIGN 1 [source_file: testcode]
            NAME a 1 [source_file: testcode]
            NUMBER 1.0 1 [source_file: testcode]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineVariablesTest.testImmutableWithSingleReferenceAfterInitialzation(InlineVariablesTest.java:212)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testSingleReferenceAfterInitialzation" time="0.001">
    <failure message="&#xa;Expected: foo()&#xa;Result:   var a;a=foo();a&#xa;Node tree inequality:&#xa;Tree1:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;        EXPR_RESULT 1 [source_file: expected0]&#xa;            CALL 1 [free_call: 1] [source_file: expected0]&#xa;                NAME foo 1 [source_file: expected0]&#xa;&#xa;&#xa;Tree2:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME a 1 [source_file: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            ASSIGN 1 [source_file: testcode]&#xa;                NAME a 1 [source_file: testcode]&#xa;                CALL 1 [free_call: 1] [source_file: testcode]&#xa;                    NAME foo 1 [source_file: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            NAME a 1 [source_file: testcode]&#xa;&#xa;&#xa;Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;    EXPR_RESULT 1 [source_file: expected0]&#xa;        CALL 1 [free_call: 1] [source_file: expected0]&#xa;            NAME foo 1 [source_file: expected0]&#xa;&#xa;&#xa;Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME a 1 [source_file: testcode]&#xa;    EXPR_RESULT 1 [source_file: testcode]&#xa;        ASSIGN 1 [source_file: testcode]&#xa;            NAME a 1 [source_file: testcode]&#xa;            CALL 1 [free_call: 1] [source_file: testcode]&#xa;                NAME foo 1 [source_file: testcode]&#xa;    EXPR_RESULT 1 [source_file: testcode]&#xa;        NAME a 1 [source_file: testcode]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: foo()
Result:   var a;a=foo();a
Node tree inequality:
Tree1:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        EXPR_RESULT 1 [source_file: expected0]
            CALL 1 [free_call: 1] [source_file: expected0]
                NAME foo 1 [source_file: expected0]


Tree2:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
        VAR 1 [source_file: testcode]
            NAME a 1 [source_file: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            ASSIGN 1 [source_file: testcode]
                NAME a 1 [source_file: testcode]
                CALL 1 [free_call: 1] [source_file: testcode]
                    NAME foo 1 [source_file: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            NAME a 1 [source_file: testcode]


Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
    EXPR_RESULT 1 [source_file: expected0]
        CALL 1 [free_call: 1] [source_file: expected0]
            NAME foo 1 [source_file: expected0]


Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
    VAR 1 [source_file: testcode]
        NAME a 1 [source_file: testcode]
    EXPR_RESULT 1 [source_file: testcode]
        ASSIGN 1 [source_file: testcode]
            NAME a 1 [source_file: testcode]
            CALL 1 [free_call: 1] [source_file: testcode]
                NAME foo 1 [source_file: testcode]
    EXPR_RESULT 1 [source_file: testcode]
        NAME a 1 [source_file: testcode]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineVariablesTest.testSingleReferenceAfterInitialzation(InlineVariablesTest.java:231)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInsideIfBranch" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInsideAndConditional" time="0.002">
    <failure message="&#xa;Expected: foo()&amp;&amp;alert(3)&#xa;Result:   var a=foo();a&amp;&amp;alert(3)&#xa;Node tree inequality:&#xa;Tree1:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;        EXPR_RESULT 1 [source_file: expected0]&#xa;            AND 1 [source_file: expected0]&#xa;                CALL 1 [free_call: 1] [source_file: expected0]&#xa;                    NAME foo 1 [source_file: expected0]&#xa;                CALL 1 [free_call: 1] [source_file: expected0]&#xa;                    NAME alert 1 [source_file: expected0]&#xa;                    NUMBER 3.0 1 [source_file: expected0]&#xa;&#xa;&#xa;Tree2:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME a 1 [source_file: testcode]&#xa;                CALL 1 [free_call: 1] [source_file: testcode]&#xa;                    NAME foo 1 [source_file: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            AND 1 [source_file: testcode]&#xa;                NAME a 1 [source_file: testcode]&#xa;                CALL 1 [free_call: 1] [source_file: testcode]&#xa;                    NAME alert 1 [source_file: testcode]&#xa;                    NUMBER 3.0 1 [source_file: testcode]&#xa;&#xa;&#xa;Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;    EXPR_RESULT 1 [source_file: expected0]&#xa;        AND 1 [source_file: expected0]&#xa;            CALL 1 [free_call: 1] [source_file: expected0]&#xa;                NAME foo 1 [source_file: expected0]&#xa;            CALL 1 [free_call: 1] [source_file: expected0]&#xa;                NAME alert 1 [source_file: expected0]&#xa;                NUMBER 3.0 1 [source_file: expected0]&#xa;&#xa;&#xa;Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME a 1 [source_file: testcode]&#xa;            CALL 1 [free_call: 1] [source_file: testcode]&#xa;                NAME foo 1 [source_file: testcode]&#xa;    EXPR_RESULT 1 [source_file: testcode]&#xa;        AND 1 [source_file: testcode]&#xa;            NAME a 1 [source_file: testcode]&#xa;            CALL 1 [free_call: 1] [source_file: testcode]&#xa;                NAME alert 1 [source_file: testcode]&#xa;                NUMBER 3.0 1 [source_file: testcode]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: foo()&amp;&amp;alert(3)
Result:   var a=foo();a&amp;&amp;alert(3)
Node tree inequality:
Tree1:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        EXPR_RESULT 1 [source_file: expected0]
            AND 1 [source_file: expected0]
                CALL 1 [free_call: 1] [source_file: expected0]
                    NAME foo 1 [source_file: expected0]
                CALL 1 [free_call: 1] [source_file: expected0]
                    NAME alert 1 [source_file: expected0]
                    NUMBER 3.0 1 [source_file: expected0]


Tree2:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
        VAR 1 [source_file: testcode]
            NAME a 1 [source_file: testcode]
                CALL 1 [free_call: 1] [source_file: testcode]
                    NAME foo 1 [source_file: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            AND 1 [source_file: testcode]
                NAME a 1 [source_file: testcode]
                CALL 1 [free_call: 1] [source_file: testcode]
                    NAME alert 1 [source_file: testcode]
                    NUMBER 3.0 1 [source_file: testcode]


Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
    EXPR_RESULT 1 [source_file: expected0]
        AND 1 [source_file: expected0]
            CALL 1 [free_call: 1] [source_file: expected0]
                NAME foo 1 [source_file: expected0]
            CALL 1 [free_call: 1] [source_file: expected0]
                NAME alert 1 [source_file: expected0]
                NUMBER 3.0 1 [source_file: expected0]


Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
    VAR 1 [source_file: testcode]
        NAME a 1 [source_file: testcode]
            CALL 1 [free_call: 1] [source_file: testcode]
                NAME foo 1 [source_file: testcode]
    EXPR_RESULT 1 [source_file: testcode]
        AND 1 [source_file: testcode]
            NAME a 1 [source_file: testcode]
            CALL 1 [free_call: 1] [source_file: testcode]
                NAME alert 1 [source_file: testcode]
                NUMBER 3.0 1 [source_file: testcode]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineVariablesTest.testInsideAndConditional(InlineVariablesTest.java:248)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInsideAndBranch" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInsideOrBranch" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInsideHookBranch" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInsideHookConditional" time="0.002">
    <failure message="&#xa;Expected: foo()?alert(1):alert(3)&#xa;Result:   var a=foo();a?alert(1):alert(3)&#xa;Node tree inequality:&#xa;Tree1:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;        EXPR_RESULT 1 [source_file: expected0]&#xa;            HOOK 1 [source_file: expected0]&#xa;                CALL 1 [free_call: 1] [source_file: expected0]&#xa;                    NAME foo 1 [source_file: expected0]&#xa;                CALL 1 [free_call: 1] [source_file: expected0]&#xa;                    NAME alert 1 [source_file: expected0]&#xa;                    NUMBER 1.0 1 [source_file: expected0]&#xa;                CALL 1 [free_call: 1] [source_file: expected0]&#xa;                    NAME alert 1 [source_file: expected0]&#xa;                    NUMBER 3.0 1 [source_file: expected0]&#xa;&#xa;&#xa;Tree2:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME a 1 [source_file: testcode]&#xa;                CALL 1 [free_call: 1] [source_file: testcode]&#xa;                    NAME foo 1 [source_file: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            HOOK 1 [source_file: testcode]&#xa;                NAME a 1 [source_file: testcode]&#xa;                CALL 1 [free_call: 1] [source_file: testcode]&#xa;                    NAME alert 1 [source_file: testcode]&#xa;                    NUMBER 1.0 1 [source_file: testcode]&#xa;                CALL 1 [free_call: 1] [source_file: testcode]&#xa;                    NAME alert 1 [source_file: testcode]&#xa;                    NUMBER 3.0 1 [source_file: testcode]&#xa;&#xa;&#xa;Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;    EXPR_RESULT 1 [source_file: expected0]&#xa;        HOOK 1 [source_file: expected0]&#xa;            CALL 1 [free_call: 1] [source_file: expected0]&#xa;                NAME foo 1 [source_file: expected0]&#xa;            CALL 1 [free_call: 1] [source_file: expected0]&#xa;                NAME alert 1 [source_file: expected0]&#xa;                NUMBER 1.0 1 [source_file: expected0]&#xa;            CALL 1 [free_call: 1] [source_file: expected0]&#xa;                NAME alert 1 [source_file: expected0]&#xa;                NUMBER 3.0 1 [source_file: expected0]&#xa;&#xa;&#xa;Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME a 1 [source_file: testcode]&#xa;            CALL 1 [free_call: 1] [source_file: testcode]&#xa;                NAME foo 1 [source_file: testcode]&#xa;    EXPR_RESULT 1 [source_file: testcode]&#xa;        HOOK 1 [source_file: testcode]&#xa;            NAME a 1 [source_file: testcode]&#xa;            CALL 1 [free_call: 1] [source_file: testcode]&#xa;                NAME alert 1 [source_file: testcode]&#xa;                NUMBER 1.0 1 [source_file: testcode]&#xa;            CALL 1 [free_call: 1] [source_file: testcode]&#xa;                NAME alert 1 [source_file: testcode]&#xa;                NUMBER 3.0 1 [source_file: testcode]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: foo()?alert(1):alert(3)
Result:   var a=foo();a?alert(1):alert(3)
Node tree inequality:
Tree1:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        EXPR_RESULT 1 [source_file: expected0]
            HOOK 1 [source_file: expected0]
                CALL 1 [free_call: 1] [source_file: expected0]
                    NAME foo 1 [source_file: expected0]
                CALL 1 [free_call: 1] [source_file: expected0]
                    NAME alert 1 [source_file: expected0]
                    NUMBER 1.0 1 [source_file: expected0]
                CALL 1 [free_call: 1] [source_file: expected0]
                    NAME alert 1 [source_file: expected0]
                    NUMBER 3.0 1 [source_file: expected0]


Tree2:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
        VAR 1 [source_file: testcode]
            NAME a 1 [source_file: testcode]
                CALL 1 [free_call: 1] [source_file: testcode]
                    NAME foo 1 [source_file: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            HOOK 1 [source_file: testcode]
                NAME a 1 [source_file: testcode]
                CALL 1 [free_call: 1] [source_file: testcode]
                    NAME alert 1 [source_file: testcode]
                    NUMBER 1.0 1 [source_file: testcode]
                CALL 1 [free_call: 1] [source_file: testcode]
                    NAME alert 1 [source_file: testcode]
                    NUMBER 3.0 1 [source_file: testcode]


Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
    EXPR_RESULT 1 [source_file: expected0]
        HOOK 1 [source_file: expected0]
            CALL 1 [free_call: 1] [source_file: expected0]
                NAME foo 1 [source_file: expected0]
            CALL 1 [free_call: 1] [source_file: expected0]
                NAME alert 1 [source_file: expected0]
                NUMBER 1.0 1 [source_file: expected0]
            CALL 1 [free_call: 1] [source_file: expected0]
                NAME alert 1 [source_file: expected0]
                NUMBER 3.0 1 [source_file: expected0]


Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
    VAR 1 [source_file: testcode]
        NAME a 1 [source_file: testcode]
            CALL 1 [free_call: 1] [source_file: testcode]
                NAME foo 1 [source_file: testcode]
    EXPR_RESULT 1 [source_file: testcode]
        HOOK 1 [source_file: testcode]
            NAME a 1 [source_file: testcode]
            CALL 1 [free_call: 1] [source_file: testcode]
                NAME alert 1 [source_file: testcode]
                NUMBER 1.0 1 [source_file: testcode]
            CALL 1 [free_call: 1] [source_file: testcode]
                NAME alert 1 [source_file: testcode]
                NUMBER 3.0 1 [source_file: testcode]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineVariablesTest.testInsideHookConditional(InlineVariablesTest.java:264)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInsideOrBranchInsideIfConditional" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInsideOrBranchInsideIfConditionalWithConstant" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testCrossFunctionsAsLeftLeaves" time="0.002">
    <failure message="&#xa;Expected: function cow(){}var z=function(){}&#xa;Result:   var x=function(){};function cow(){}var z=x&#xa;Node tree inequality:&#xa;Tree1:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected1] [input_id: InputId: expected1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected2] [input_id: InputId: expected2]&#xa;        FUNCTION cow 1 [source_file: expected2]&#xa;            NAME cow 1 [source_file: expected2]&#xa;            PARAM_LIST 1 [source_file: expected2]&#xa;            BLOCK 1 [source_file: expected2]&#xa;        VAR 1 [source_file: expected2]&#xa;            NAME z 1 [source_file: expected2]&#xa;                FUNCTION  1 [source_file: expected2]&#xa;                    NAME  1 [source_file: expected2]&#xa;                    PARAM_LIST 1 [source_file: expected2]&#xa;                    BLOCK 1 [source_file: expected2]&#xa;&#xa;&#xa;Tree2:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: input0] [input_id: InputId: input0]&#xa;        VAR 1 [source_file: input0]&#xa;            NAME x 1 [source_file: input0]&#xa;                FUNCTION  1 [source_file: input0]&#xa;                    NAME  1 [source_file: input0]&#xa;                    PARAM_LIST 1 [source_file: input0]&#xa;                    BLOCK 1 [source_file: input0]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: input1] [input_id: InputId: input1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: input2] [input_id: InputId: input2]&#xa;        FUNCTION cow 1 [source_file: input2]&#xa;            NAME cow 1 [source_file: input2]&#xa;            PARAM_LIST 1 [source_file: input2]&#xa;            BLOCK 1 [source_file: input2]&#xa;        VAR 1 [source_file: input2]&#xa;            NAME z 1 [source_file: input2]&#xa;                NAME x 1 [source_file: input2]&#xa;&#xa;&#xa;Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;&#xa;&#xa;Subtree2: SCRIPT 1 [synthetic: 1] [source_file: input0] [input_id: InputId: input0]&#xa;    VAR 1 [source_file: input0]&#xa;        NAME x 1 [source_file: input0]&#xa;            FUNCTION  1 [source_file: input0]&#xa;                NAME  1 [source_file: input0]&#xa;                PARAM_LIST 1 [source_file: input0]&#xa;                BLOCK 1 [source_file: input0]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: function cow(){}var z=function(){}
Result:   var x=function(){};function cow(){}var z=x
Node tree inequality:
Tree1:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
    SCRIPT 1 [synthetic: 1] [source_file: expected1] [input_id: InputId: expected1]
    SCRIPT 1 [synthetic: 1] [source_file: expected2] [input_id: InputId: expected2]
        FUNCTION cow 1 [source_file: expected2]
            NAME cow 1 [source_file: expected2]
            PARAM_LIST 1 [source_file: expected2]
            BLOCK 1 [source_file: expected2]
        VAR 1 [source_file: expected2]
            NAME z 1 [source_file: expected2]
                FUNCTION  1 [source_file: expected2]
                    NAME  1 [source_file: expected2]
                    PARAM_LIST 1 [source_file: expected2]
                    BLOCK 1 [source_file: expected2]


Tree2:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: input0] [input_id: InputId: input0]
        VAR 1 [source_file: input0]
            NAME x 1 [source_file: input0]
                FUNCTION  1 [source_file: input0]
                    NAME  1 [source_file: input0]
                    PARAM_LIST 1 [source_file: input0]
                    BLOCK 1 [source_file: input0]
    SCRIPT 1 [synthetic: 1] [source_file: input1] [input_id: InputId: input1]
    SCRIPT 1 [synthetic: 1] [source_file: input2] [input_id: InputId: input2]
        FUNCTION cow 1 [source_file: input2]
            NAME cow 1 [source_file: input2]
            PARAM_LIST 1 [source_file: input2]
            BLOCK 1 [source_file: input2]
        VAR 1 [source_file: input2]
            NAME z 1 [source_file: input2]
                NAME x 1 [source_file: input2]


Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]


Subtree2: SCRIPT 1 [synthetic: 1] [source_file: input0] [input_id: InputId: input0]
    VAR 1 [source_file: input0]
        NAME x 1 [source_file: input0]
            FUNCTION  1 [source_file: input0]
                NAME  1 [source_file: input0]
                PARAM_LIST 1 [source_file: input0]
                BLOCK 1 [source_file: input0]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:689)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:647)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:610)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:583)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:560)
	at com.google.javascript.jscomp.InlineVariablesTest.testCrossFunctionsAsLeftLeaves(InlineVariablesTest.java:279)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testDoCrossFunction" time="0.002">
    <failure message="&#xa;Expected: foo();var z=1&#xa;Result:   var x=1;foo();var z=x&#xa;Node tree inequality:&#xa;Tree1:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;        EXPR_RESULT 1 [source_file: expected0]&#xa;            CALL 1 [free_call: 1] [source_file: expected0]&#xa;                NAME foo 1 [source_file: expected0]&#xa;        VAR 1 [source_file: expected0]&#xa;            NAME z 1 [source_file: expected0]&#xa;                NUMBER 1.0 1 [source_file: expected0]&#xa;&#xa;&#xa;Tree2:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME x 1 [source_file: testcode]&#xa;                NUMBER 1.0 1 [source_file: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            CALL 1 [free_call: 1] [source_file: testcode]&#xa;                NAME foo 1 [source_file: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME z 1 [source_file: testcode]&#xa;                NAME x 1 [source_file: testcode]&#xa;&#xa;&#xa;Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;    EXPR_RESULT 1 [source_file: expected0]&#xa;        CALL 1 [free_call: 1] [source_file: expected0]&#xa;            NAME foo 1 [source_file: expected0]&#xa;    VAR 1 [source_file: expected0]&#xa;        NAME z 1 [source_file: expected0]&#xa;            NUMBER 1.0 1 [source_file: expected0]&#xa;&#xa;&#xa;Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME x 1 [source_file: testcode]&#xa;            NUMBER 1.0 1 [source_file: testcode]&#xa;    EXPR_RESULT 1 [source_file: testcode]&#xa;        CALL 1 [free_call: 1] [source_file: testcode]&#xa;            NAME foo 1 [source_file: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME z 1 [source_file: testcode]&#xa;            NAME x 1 [source_file: testcode]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: foo();var z=1
Result:   var x=1;foo();var z=x
Node tree inequality:
Tree1:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        EXPR_RESULT 1 [source_file: expected0]
            CALL 1 [free_call: 1] [source_file: expected0]
                NAME foo 1 [source_file: expected0]
        VAR 1 [source_file: expected0]
            NAME z 1 [source_file: expected0]
                NUMBER 1.0 1 [source_file: expected0]


Tree2:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
        VAR 1 [source_file: testcode]
            NAME x 1 [source_file: testcode]
                NUMBER 1.0 1 [source_file: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            CALL 1 [free_call: 1] [source_file: testcode]
                NAME foo 1 [source_file: testcode]
        VAR 1 [source_file: testcode]
            NAME z 1 [source_file: testcode]
                NAME x 1 [source_file: testcode]


Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
    EXPR_RESULT 1 [source_file: expected0]
        CALL 1 [free_call: 1] [source_file: expected0]
            NAME foo 1 [source_file: expected0]
    VAR 1 [source_file: expected0]
        NAME z 1 [source_file: expected0]
            NUMBER 1.0 1 [source_file: expected0]


Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
    VAR 1 [source_file: testcode]
        NAME x 1 [source_file: testcode]
            NUMBER 1.0 1 [source_file: testcode]
    EXPR_RESULT 1 [source_file: testcode]
        CALL 1 [free_call: 1] [source_file: testcode]
            NAME foo 1 [source_file: testcode]
    VAR 1 [source_file: testcode]
        NAME z 1 [source_file: testcode]
            NAME x 1 [source_file: testcode]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineVariablesTest.testDoCrossFunction(InlineVariablesTest.java:306)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testDoNotCrossReferencingFunction" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testChainedAssignment" time="0.002">
    <failure message="&#xa;Expected: var a=2;var c=2&#xa;Result:   var a=2;var b=2;var c=b&#xa;Node tree inequality:&#xa;Tree1:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;        VAR 1 [source_file: expected0]&#xa;            NAME a 1 [source_file: expected0]&#xa;                NUMBER 2.0 1 [source_file: expected0]&#xa;        VAR 1 [source_file: expected0]&#xa;            NAME c 1 [source_file: expected0]&#xa;                NUMBER 2.0 1 [source_file: expected0]&#xa;&#xa;&#xa;Tree2:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME a 1 [source_file: testcode]&#xa;                NUMBER 2.0 1 [source_file: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME b 1 [source_file: testcode]&#xa;                NUMBER 2.0 1 [source_file: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME c 1 [source_file: testcode]&#xa;                NAME b 1 [source_file: testcode]&#xa;&#xa;&#xa;Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;    VAR 1 [source_file: expected0]&#xa;        NAME a 1 [source_file: expected0]&#xa;            NUMBER 2.0 1 [source_file: expected0]&#xa;    VAR 1 [source_file: expected0]&#xa;        NAME c 1 [source_file: expected0]&#xa;            NUMBER 2.0 1 [source_file: expected0]&#xa;&#xa;&#xa;Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME a 1 [source_file: testcode]&#xa;            NUMBER 2.0 1 [source_file: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME b 1 [source_file: testcode]&#xa;            NUMBER 2.0 1 [source_file: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME c 1 [source_file: testcode]&#xa;            NAME b 1 [source_file: testcode]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: var a=2;var c=2
Result:   var a=2;var b=2;var c=b
Node tree inequality:
Tree1:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        VAR 1 [source_file: expected0]
            NAME a 1 [source_file: expected0]
                NUMBER 2.0 1 [source_file: expected0]
        VAR 1 [source_file: expected0]
            NAME c 1 [source_file: expected0]
                NUMBER 2.0 1 [source_file: expected0]


Tree2:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
        VAR 1 [source_file: testcode]
            NAME a 1 [source_file: testcode]
                NUMBER 2.0 1 [source_file: testcode]
        VAR 1 [source_file: testcode]
            NAME b 1 [source_file: testcode]
                NUMBER 2.0 1 [source_file: testcode]
        VAR 1 [source_file: testcode]
            NAME c 1 [source_file: testcode]
                NAME b 1 [source_file: testcode]


Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
    VAR 1 [source_file: expected0]
        NAME a 1 [source_file: expected0]
            NUMBER 2.0 1 [source_file: expected0]
    VAR 1 [source_file: expected0]
        NAME c 1 [source_file: expected0]
            NUMBER 2.0 1 [source_file: expected0]


Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
    VAR 1 [source_file: testcode]
        NAME a 1 [source_file: testcode]
            NUMBER 2.0 1 [source_file: testcode]
    VAR 1 [source_file: testcode]
        NAME b 1 [source_file: testcode]
            NUMBER 2.0 1 [source_file: testcode]
    VAR 1 [source_file: testcode]
        NAME c 1 [source_file: testcode]
            NAME b 1 [source_file: testcode]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineVariablesTest.testChainedAssignment(InlineVariablesTest.java:322)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testDoCrossNewVariables" time="0.001">
    <failure message="&#xa;Expected: var z=foo()&#xa;Result:   var x=foo();var z=x&#xa;Node tree inequality:&#xa;Tree1:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;        VAR 1 [source_file: expected0]&#xa;            NAME z 1 [source_file: expected0]&#xa;                CALL 1 [free_call: 1] [source_file: expected0]&#xa;                    NAME foo 1 [source_file: expected0]&#xa;&#xa;&#xa;Tree2:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME x 1 [source_file: testcode]&#xa;                CALL 1 [free_call: 1] [source_file: testcode]&#xa;                    NAME foo 1 [source_file: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME z 1 [source_file: testcode]&#xa;                NAME x 1 [source_file: testcode]&#xa;&#xa;&#xa;Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;    VAR 1 [source_file: expected0]&#xa;        NAME z 1 [source_file: expected0]&#xa;            CALL 1 [free_call: 1] [source_file: expected0]&#xa;                NAME foo 1 [source_file: expected0]&#xa;&#xa;&#xa;Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME x 1 [source_file: testcode]&#xa;            CALL 1 [free_call: 1] [source_file: testcode]&#xa;                NAME foo 1 [source_file: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME z 1 [source_file: testcode]&#xa;            NAME x 1 [source_file: testcode]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: var z=foo()
Result:   var x=foo();var z=x
Node tree inequality:
Tree1:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        VAR 1 [source_file: expected0]
            NAME z 1 [source_file: expected0]
                CALL 1 [free_call: 1] [source_file: expected0]
                    NAME foo 1 [source_file: expected0]


Tree2:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
        VAR 1 [source_file: testcode]
            NAME x 1 [source_file: testcode]
                CALL 1 [free_call: 1] [source_file: testcode]
                    NAME foo 1 [source_file: testcode]
        VAR 1 [source_file: testcode]
            NAME z 1 [source_file: testcode]
                NAME x 1 [source_file: testcode]


Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
    VAR 1 [source_file: expected0]
        NAME z 1 [source_file: expected0]
            CALL 1 [free_call: 1] [source_file: expected0]
                NAME foo 1 [source_file: expected0]


Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
    VAR 1 [source_file: testcode]
        NAME x 1 [source_file: testcode]
            CALL 1 [free_call: 1] [source_file: testcode]
                NAME foo 1 [source_file: testcode]
    VAR 1 [source_file: testcode]
        NAME z 1 [source_file: testcode]
            NAME x 1 [source_file: testcode]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineVariablesTest.testDoCrossNewVariables(InlineVariablesTest.java:339)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testDoNotCrossFunctionCalls" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testDoNotCrossAssignment" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testDoNotCrossDelete" time="0.0" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testDoNotCrossAssignmentPlus" time="0.0" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testDoNotCrossIncrement" time="0.0" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testDoNotCrossConstructor" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testDoCrossVar" time="0.001">
    <failure message="&#xa;Expected: alert(3)&#xa;Result:   var a=b;var b=3;alert(a)&#xa;Node tree inequality:&#xa;Tree1:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;        EXPR_RESULT 1 [source_file: expected0]&#xa;            CALL 1 [free_call: 1] [source_file: expected0]&#xa;                NAME alert 1 [source_file: expected0]&#xa;                NUMBER 3.0 1 [source_file: expected0]&#xa;&#xa;&#xa;Tree2:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME a 1 [source_file: testcode]&#xa;                NAME b 1 [source_file: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME b 1 [source_file: testcode]&#xa;                NUMBER 3.0 1 [source_file: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            CALL 1 [free_call: 1] [source_file: testcode]&#xa;                NAME alert 1 [source_file: testcode]&#xa;                NAME a 1 [source_file: testcode]&#xa;&#xa;&#xa;Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;    EXPR_RESULT 1 [source_file: expected0]&#xa;        CALL 1 [free_call: 1] [source_file: expected0]&#xa;            NAME alert 1 [source_file: expected0]&#xa;            NUMBER 3.0 1 [source_file: expected0]&#xa;&#xa;&#xa;Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME a 1 [source_file: testcode]&#xa;            NAME b 1 [source_file: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME b 1 [source_file: testcode]&#xa;            NUMBER 3.0 1 [source_file: testcode]&#xa;    EXPR_RESULT 1 [source_file: testcode]&#xa;        CALL 1 [free_call: 1] [source_file: testcode]&#xa;            NAME alert 1 [source_file: testcode]&#xa;            NAME a 1 [source_file: testcode]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: alert(3)
Result:   var a=b;var b=3;alert(a)
Node tree inequality:
Tree1:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        EXPR_RESULT 1 [source_file: expected0]
            CALL 1 [free_call: 1] [source_file: expected0]
                NAME alert 1 [source_file: expected0]
                NUMBER 3.0 1 [source_file: expected0]


Tree2:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
        VAR 1 [source_file: testcode]
            NAME a 1 [source_file: testcode]
                NAME b 1 [source_file: testcode]
        VAR 1 [source_file: testcode]
            NAME b 1 [source_file: testcode]
                NUMBER 3.0 1 [source_file: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            CALL 1 [free_call: 1] [source_file: testcode]
                NAME alert 1 [source_file: testcode]
                NAME a 1 [source_file: testcode]


Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
    EXPR_RESULT 1 [source_file: expected0]
        CALL 1 [free_call: 1] [source_file: expected0]
            NAME alert 1 [source_file: expected0]
            NUMBER 3.0 1 [source_file: expected0]


Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
    VAR 1 [source_file: testcode]
        NAME a 1 [source_file: testcode]
            NAME b 1 [source_file: testcode]
    VAR 1 [source_file: testcode]
        NAME b 1 [source_file: testcode]
            NUMBER 3.0 1 [source_file: testcode]
    EXPR_RESULT 1 [source_file: testcode]
        CALL 1 [free_call: 1] [source_file: testcode]
            NAME alert 1 [source_file: testcode]
            NAME a 1 [source_file: testcode]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineVariablesTest.testDoCrossVar(InlineVariablesTest.java:372)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testOverlappingInlines" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testOverlappingInlineFunctions" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInlineIntoLoops" time="0.001">
    <failure message="&#xa;Expected: for(;true;)alert(true)&#xa;Result:   var x=true;for(;true;)alert(x)&#xa;Node tree inequality:&#xa;Tree1:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;        FOR 1 [source_file: expected0]&#xa;            EMPTY 1 [source_file: expected0]&#xa;            TRUE 1 [source_file: expected0]&#xa;            EMPTY 1 [source_file: expected0]&#xa;            BLOCK 1 [added_block: 1] [source_file: expected0]&#xa;                EXPR_RESULT 1 [source_file: expected0]&#xa;                    CALL 1 [free_call: 1] [source_file: expected0]&#xa;                        NAME alert 1 [source_file: expected0]&#xa;                        TRUE 1 [source_file: expected0]&#xa;&#xa;&#xa;Tree2:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME x 1 [source_file: testcode]&#xa;                TRUE 1 [source_file: testcode]&#xa;        FOR 1 [source_file: testcode]&#xa;            EMPTY 1 [source_file: testcode]&#xa;            TRUE 1 [source_file: testcode]&#xa;            EMPTY 1 [source_file: testcode]&#xa;            BLOCK 1 [added_block: 1] [source_file: testcode]&#xa;                EXPR_RESULT 1 [source_file: testcode]&#xa;                    CALL 1 [free_call: 1] [source_file: testcode]&#xa;                        NAME alert 1 [source_file: testcode]&#xa;                        NAME x 1 [source_file: testcode]&#xa;&#xa;&#xa;Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;    FOR 1 [source_file: expected0]&#xa;        EMPTY 1 [source_file: expected0]&#xa;        TRUE 1 [source_file: expected0]&#xa;        EMPTY 1 [source_file: expected0]&#xa;        BLOCK 1 [added_block: 1] [source_file: expected0]&#xa;            EXPR_RESULT 1 [source_file: expected0]&#xa;                CALL 1 [free_call: 1] [source_file: expected0]&#xa;                    NAME alert 1 [source_file: expected0]&#xa;                    TRUE 1 [source_file: expected0]&#xa;&#xa;&#xa;Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME x 1 [source_file: testcode]&#xa;            TRUE 1 [source_file: testcode]&#xa;    FOR 1 [source_file: testcode]&#xa;        EMPTY 1 [source_file: testcode]&#xa;        TRUE 1 [source_file: testcode]&#xa;        EMPTY 1 [source_file: testcode]&#xa;        BLOCK 1 [added_block: 1] [source_file: testcode]&#xa;            EXPR_RESULT 1 [source_file: testcode]&#xa;                CALL 1 [free_call: 1] [source_file: testcode]&#xa;                    NAME alert 1 [source_file: testcode]&#xa;                    NAME x 1 [source_file: testcode]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: for(;true;)alert(true)
Result:   var x=true;for(;true;)alert(x)
Node tree inequality:
Tree1:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        FOR 1 [source_file: expected0]
            EMPTY 1 [source_file: expected0]
            TRUE 1 [source_file: expected0]
            EMPTY 1 [source_file: expected0]
            BLOCK 1 [added_block: 1] [source_file: expected0]
                EXPR_RESULT 1 [source_file: expected0]
                    CALL 1 [free_call: 1] [source_file: expected0]
                        NAME alert 1 [source_file: expected0]
                        TRUE 1 [source_file: expected0]


Tree2:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
        VAR 1 [source_file: testcode]
            NAME x 1 [source_file: testcode]
                TRUE 1 [source_file: testcode]
        FOR 1 [source_file: testcode]
            EMPTY 1 [source_file: testcode]
            TRUE 1 [source_file: testcode]
            EMPTY 1 [source_file: testcode]
            BLOCK 1 [added_block: 1] [source_file: testcode]
                EXPR_RESULT 1 [source_file: testcode]
                    CALL 1 [free_call: 1] [source_file: testcode]
                        NAME alert 1 [source_file: testcode]
                        NAME x 1 [source_file: testcode]


Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
    FOR 1 [source_file: expected0]
        EMPTY 1 [source_file: expected0]
        TRUE 1 [source_file: expected0]
        EMPTY 1 [source_file: expected0]
        BLOCK 1 [added_block: 1] [source_file: expected0]
            EXPR_RESULT 1 [source_file: expected0]
                CALL 1 [free_call: 1] [source_file: expected0]
                    NAME alert 1 [source_file: expected0]
                    TRUE 1 [source_file: expected0]


Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
    VAR 1 [source_file: testcode]
        NAME x 1 [source_file: testcode]
            TRUE 1 [source_file: testcode]
    FOR 1 [source_file: testcode]
        EMPTY 1 [source_file: testcode]
        TRUE 1 [source_file: testcode]
        EMPTY 1 [source_file: testcode]
        BLOCK 1 [added_block: 1] [source_file: testcode]
            EXPR_RESULT 1 [source_file: testcode]
                CALL 1 [free_call: 1] [source_file: testcode]
                    NAME alert 1 [source_file: testcode]
                    NAME x 1 [source_file: testcode]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineVariablesTest.testInlineIntoLoops(InlineVariablesTest.java:413)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInlineIntoFunction" time="0.001">
    <failure message="&#xa;Expected: var f=function(){alert(false)}&#xa;Result:   var x=false;var f=function(){alert(x)}&#xa;Node tree inequality:&#xa;Tree1:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;        VAR 1 [source_file: expected0]&#xa;            NAME f 1 [source_file: expected0]&#xa;                FUNCTION  1 [source_file: expected0]&#xa;                    NAME  1 [source_file: expected0]&#xa;                    PARAM_LIST 1 [source_file: expected0]&#xa;                    BLOCK 1 [source_file: expected0]&#xa;                        EXPR_RESULT 1 [source_file: expected0]&#xa;                            CALL 1 [free_call: 1] [source_file: expected0]&#xa;                                NAME alert 1 [source_file: expected0]&#xa;                                FALSE 1 [source_file: expected0]&#xa;&#xa;&#xa;Tree2:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME x 1 [source_file: testcode]&#xa;                FALSE 1 [source_file: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME f 1 [source_file: testcode]&#xa;                FUNCTION  1 [source_file: testcode]&#xa;                    NAME  1 [source_file: testcode]&#xa;                    PARAM_LIST 1 [source_file: testcode]&#xa;                    BLOCK 1 [source_file: testcode]&#xa;                        EXPR_RESULT 1 [source_file: testcode]&#xa;                            CALL 1 [free_call: 1] [source_file: testcode]&#xa;                                NAME alert 1 [source_file: testcode]&#xa;                                NAME x 1 [source_file: testcode]&#xa;&#xa;&#xa;Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;    VAR 1 [source_file: expected0]&#xa;        NAME f 1 [source_file: expected0]&#xa;            FUNCTION  1 [source_file: expected0]&#xa;                NAME  1 [source_file: expected0]&#xa;                PARAM_LIST 1 [source_file: expected0]&#xa;                BLOCK 1 [source_file: expected0]&#xa;                    EXPR_RESULT 1 [source_file: expected0]&#xa;                        CALL 1 [free_call: 1] [source_file: expected0]&#xa;                            NAME alert 1 [source_file: expected0]&#xa;                            FALSE 1 [source_file: expected0]&#xa;&#xa;&#xa;Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME x 1 [source_file: testcode]&#xa;            FALSE 1 [source_file: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME f 1 [source_file: testcode]&#xa;            FUNCTION  1 [source_file: testcode]&#xa;                NAME  1 [source_file: testcode]&#xa;                PARAM_LIST 1 [source_file: testcode]&#xa;                BLOCK 1 [source_file: testcode]&#xa;                    EXPR_RESULT 1 [source_file: testcode]&#xa;                        CALL 1 [free_call: 1] [source_file: testcode]&#xa;                            NAME alert 1 [source_file: testcode]&#xa;                            NAME x 1 [source_file: testcode]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: var f=function(){alert(false)}
Result:   var x=false;var f=function(){alert(x)}
Node tree inequality:
Tree1:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        VAR 1 [source_file: expected0]
            NAME f 1 [source_file: expected0]
                FUNCTION  1 [source_file: expected0]
                    NAME  1 [source_file: expected0]
                    PARAM_LIST 1 [source_file: expected0]
                    BLOCK 1 [source_file: expected0]
                        EXPR_RESULT 1 [source_file: expected0]
                            CALL 1 [free_call: 1] [source_file: expected0]
                                NAME alert 1 [source_file: expected0]
                                FALSE 1 [source_file: expected0]


Tree2:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
        VAR 1 [source_file: testcode]
            NAME x 1 [source_file: testcode]
                FALSE 1 [source_file: testcode]
        VAR 1 [source_file: testcode]
            NAME f 1 [source_file: testcode]
                FUNCTION  1 [source_file: testcode]
                    NAME  1 [source_file: testcode]
                    PARAM_LIST 1 [source_file: testcode]
                    BLOCK 1 [source_file: testcode]
                        EXPR_RESULT 1 [source_file: testcode]
                            CALL 1 [free_call: 1] [source_file: testcode]
                                NAME alert 1 [source_file: testcode]
                                NAME x 1 [source_file: testcode]


Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
    VAR 1 [source_file: expected0]
        NAME f 1 [source_file: expected0]
            FUNCTION  1 [source_file: expected0]
                NAME  1 [source_file: expected0]
                PARAM_LIST 1 [source_file: expected0]
                BLOCK 1 [source_file: expected0]
                    EXPR_RESULT 1 [source_file: expected0]
                        CALL 1 [free_call: 1] [source_file: expected0]
                            NAME alert 1 [source_file: expected0]
                            FALSE 1 [source_file: expected0]


Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
    VAR 1 [source_file: testcode]
        NAME x 1 [source_file: testcode]
            FALSE 1 [source_file: testcode]
    VAR 1 [source_file: testcode]
        NAME f 1 [source_file: testcode]
            FUNCTION  1 [source_file: testcode]
                NAME  1 [source_file: testcode]
                PARAM_LIST 1 [source_file: testcode]
                BLOCK 1 [source_file: testcode]
                    EXPR_RESULT 1 [source_file: testcode]
                        CALL 1 [free_call: 1] [source_file: testcode]
                            NAME alert 1 [source_file: testcode]
                            NAME x 1 [source_file: testcode]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineVariablesTest.testInlineIntoFunction(InlineVariablesTest.java:421)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testNoInlineIntoNamedFunction" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInlineIntoNestedNonHoistedNamedFunctions" time="0.002">
    <failure message="&#xa;Expected: f();if(false)var f=function(){alert(false)}&#xa;Result:   f();var x=false;if(false)var f=function(){alert(x)}&#xa;Node tree inequality:&#xa;Tree1:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;        EXPR_RESULT 1 [source_file: expected0]&#xa;            CALL 1 [free_call: 1] [source_file: expected0]&#xa;                NAME f 1 [source_file: expected0]&#xa;        IF 1 [source_file: expected0]&#xa;            FALSE 1 [source_file: expected0]&#xa;            BLOCK 1 [added_block: 1] [source_file: expected0]&#xa;                VAR 1 [source_file: expected0]&#xa;                    NAME f 1 [source_file: expected0]&#xa;                        FUNCTION  1 [source_file: expected0]&#xa;                            NAME  1 [source_file: expected0]&#xa;                            PARAM_LIST 1 [source_file: expected0]&#xa;                            BLOCK 1 [source_file: expected0]&#xa;                                EXPR_RESULT 1 [source_file: expected0]&#xa;                                    CALL 1 [free_call: 1] [source_file: expected0]&#xa;                                        NAME alert 1 [source_file: expected0]&#xa;                                        FALSE 1 [source_file: expected0]&#xa;        EMPTY 1 [source_file: expected0]&#xa;&#xa;&#xa;Tree2:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            CALL 1 [free_call: 1] [source_file: testcode]&#xa;                NAME f 1 [source_file: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME x 1 [source_file: testcode]&#xa;                FALSE 1 [source_file: testcode]&#xa;        IF 1 [source_file: testcode]&#xa;            FALSE 1 [source_file: testcode]&#xa;            BLOCK 1 [added_block: 1] [source_file: testcode]&#xa;                VAR 1 [source_file: testcode]&#xa;                    NAME f 1 [source_file: testcode]&#xa;                        FUNCTION  1 [source_file: testcode]&#xa;                            NAME  1 [source_file: testcode]&#xa;                            PARAM_LIST 1 [source_file: testcode]&#xa;                            BLOCK 1 [source_file: testcode]&#xa;                                EXPR_RESULT 1 [source_file: testcode]&#xa;                                    CALL 1 [free_call: 1] [source_file: testcode]&#xa;                                        NAME alert 1 [source_file: testcode]&#xa;                                        NAME x 1 [source_file: testcode]&#xa;        EMPTY 1 [source_file: testcode]&#xa;&#xa;&#xa;Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;    EXPR_RESULT 1 [source_file: expected0]&#xa;        CALL 1 [free_call: 1] [source_file: expected0]&#xa;            NAME f 1 [source_file: expected0]&#xa;    IF 1 [source_file: expected0]&#xa;        FALSE 1 [source_file: expected0]&#xa;        BLOCK 1 [added_block: 1] [source_file: expected0]&#xa;            VAR 1 [source_file: expected0]&#xa;                NAME f 1 [source_file: expected0]&#xa;                    FUNCTION  1 [source_file: expected0]&#xa;                        NAME  1 [source_file: expected0]&#xa;                        PARAM_LIST 1 [source_file: expected0]&#xa;                        BLOCK 1 [source_file: expected0]&#xa;                            EXPR_RESULT 1 [source_file: expected0]&#xa;                                CALL 1 [free_call: 1] [source_file: expected0]&#xa;                                    NAME alert 1 [source_file: expected0]&#xa;                                    FALSE 1 [source_file: expected0]&#xa;    EMPTY 1 [source_file: expected0]&#xa;&#xa;&#xa;Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;    EXPR_RESULT 1 [source_file: testcode]&#xa;        CALL 1 [free_call: 1] [source_file: testcode]&#xa;            NAME f 1 [source_file: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME x 1 [source_file: testcode]&#xa;            FALSE 1 [source_file: testcode]&#xa;    IF 1 [source_file: testcode]&#xa;        FALSE 1 [source_file: testcode]&#xa;        BLOCK 1 [added_block: 1] [source_file: testcode]&#xa;            VAR 1 [source_file: testcode]&#xa;                NAME f 1 [source_file: testcode]&#xa;                    FUNCTION  1 [source_file: testcode]&#xa;                        NAME  1 [source_file: testcode]&#xa;                        PARAM_LIST 1 [source_file: testcode]&#xa;                        BLOCK 1 [source_file: testcode]&#xa;                            EXPR_RESULT 1 [source_file: testcode]&#xa;                                CALL 1 [free_call: 1] [source_file: testcode]&#xa;                                    NAME alert 1 [source_file: testcode]&#xa;                                    NAME x 1 [source_file: testcode]&#xa;    EMPTY 1 [source_file: testcode]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: f();if(false)var f=function(){alert(false)}
Result:   f();var x=false;if(false)var f=function(){alert(x)}
Node tree inequality:
Tree1:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        EXPR_RESULT 1 [source_file: expected0]
            CALL 1 [free_call: 1] [source_file: expected0]
                NAME f 1 [source_file: expected0]
        IF 1 [source_file: expected0]
            FALSE 1 [source_file: expected0]
            BLOCK 1 [added_block: 1] [source_file: expected0]
                VAR 1 [source_file: expected0]
                    NAME f 1 [source_file: expected0]
                        FUNCTION  1 [source_file: expected0]
                            NAME  1 [source_file: expected0]
                            PARAM_LIST 1 [source_file: expected0]
                            BLOCK 1 [source_file: expected0]
                                EXPR_RESULT 1 [source_file: expected0]
                                    CALL 1 [free_call: 1] [source_file: expected0]
                                        NAME alert 1 [source_file: expected0]
                                        FALSE 1 [source_file: expected0]
        EMPTY 1 [source_file: expected0]


Tree2:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            CALL 1 [free_call: 1] [source_file: testcode]
                NAME f 1 [source_file: testcode]
        VAR 1 [source_file: testcode]
            NAME x 1 [source_file: testcode]
                FALSE 1 [source_file: testcode]
        IF 1 [source_file: testcode]
            FALSE 1 [source_file: testcode]
            BLOCK 1 [added_block: 1] [source_file: testcode]
                VAR 1 [source_file: testcode]
                    NAME f 1 [source_file: testcode]
                        FUNCTION  1 [source_file: testcode]
                            NAME  1 [source_file: testcode]
                            PARAM_LIST 1 [source_file: testcode]
                            BLOCK 1 [source_file: testcode]
                                EXPR_RESULT 1 [source_file: testcode]
                                    CALL 1 [free_call: 1] [source_file: testcode]
                                        NAME alert 1 [source_file: testcode]
                                        NAME x 1 [source_file: testcode]
        EMPTY 1 [source_file: testcode]


Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
    EXPR_RESULT 1 [source_file: expected0]
        CALL 1 [free_call: 1] [source_file: expected0]
            NAME f 1 [source_file: expected0]
    IF 1 [source_file: expected0]
        FALSE 1 [source_file: expected0]
        BLOCK 1 [added_block: 1] [source_file: expected0]
            VAR 1 [source_file: expected0]
                NAME f 1 [source_file: expected0]
                    FUNCTION  1 [source_file: expected0]
                        NAME  1 [source_file: expected0]
                        PARAM_LIST 1 [source_file: expected0]
                        BLOCK 1 [source_file: expected0]
                            EXPR_RESULT 1 [source_file: expected0]
                                CALL 1 [free_call: 1] [source_file: expected0]
                                    NAME alert 1 [source_file: expected0]
                                    FALSE 1 [source_file: expected0]
    EMPTY 1 [source_file: expected0]


Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
    EXPR_RESULT 1 [source_file: testcode]
        CALL 1 [free_call: 1] [source_file: testcode]
            NAME f 1 [source_file: testcode]
    VAR 1 [source_file: testcode]
        NAME x 1 [source_file: testcode]
            FALSE 1 [source_file: testcode]
    IF 1 [source_file: testcode]
        FALSE 1 [source_file: testcode]
        BLOCK 1 [added_block: 1] [source_file: testcode]
            VAR 1 [source_file: testcode]
                NAME f 1 [source_file: testcode]
                    FUNCTION  1 [source_file: testcode]
                        NAME  1 [source_file: testcode]
                        PARAM_LIST 1 [source_file: testcode]
                        BLOCK 1 [source_file: testcode]
                            EXPR_RESULT 1 [source_file: testcode]
                                CALL 1 [free_call: 1] [source_file: testcode]
                                    NAME alert 1 [source_file: testcode]
                                    NAME x 1 [source_file: testcode]
    EMPTY 1 [source_file: testcode]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineVariablesTest.testInlineIntoNestedNonHoistedNamedFunctions(InlineVariablesTest.java:431)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testNoInlineIntoNestedNamedFunctions" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testNoInlineMutatedVariable" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInlineImmutableMultipleTimes" time="0.001">
    <failure message="&#xa;Expected: var y=null;var z=null&#xa;Result:   var x=null;var y=x;var z=x&#xa;Node tree inequality:&#xa;Tree1:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;        VAR 1 [source_file: expected0]&#xa;            NAME y 1 [source_file: expected0]&#xa;                NULL 1 [source_file: expected0]&#xa;        VAR 1 [source_file: expected0]&#xa;            NAME z 1 [source_file: expected0]&#xa;                NULL 1 [source_file: expected0]&#xa;&#xa;&#xa;Tree2:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME x 1 [source_file: testcode]&#xa;                NULL 1 [source_file: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME y 1 [source_file: testcode]&#xa;                NAME x 1 [source_file: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME z 1 [source_file: testcode]&#xa;                NAME x 1 [source_file: testcode]&#xa;&#xa;&#xa;Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;    VAR 1 [source_file: expected0]&#xa;        NAME y 1 [source_file: expected0]&#xa;            NULL 1 [source_file: expected0]&#xa;    VAR 1 [source_file: expected0]&#xa;        NAME z 1 [source_file: expected0]&#xa;            NULL 1 [source_file: expected0]&#xa;&#xa;&#xa;Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME x 1 [source_file: testcode]&#xa;            NULL 1 [source_file: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME y 1 [source_file: testcode]&#xa;            NAME x 1 [source_file: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME z 1 [source_file: testcode]&#xa;            NAME x 1 [source_file: testcode]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: var y=null;var z=null
Result:   var x=null;var y=x;var z=x
Node tree inequality:
Tree1:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        VAR 1 [source_file: expected0]
            NAME y 1 [source_file: expected0]
                NULL 1 [source_file: expected0]
        VAR 1 [source_file: expected0]
            NAME z 1 [source_file: expected0]
                NULL 1 [source_file: expected0]


Tree2:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
        VAR 1 [source_file: testcode]
            NAME x 1 [source_file: testcode]
                NULL 1 [source_file: testcode]
        VAR 1 [source_file: testcode]
            NAME y 1 [source_file: testcode]
                NAME x 1 [source_file: testcode]
        VAR 1 [source_file: testcode]
            NAME z 1 [source_file: testcode]
                NAME x 1 [source_file: testcode]


Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
    VAR 1 [source_file: expected0]
        NAME y 1 [source_file: expected0]
            NULL 1 [source_file: expected0]
    VAR 1 [source_file: expected0]
        NAME z 1 [source_file: expected0]
            NULL 1 [source_file: expected0]


Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
    VAR 1 [source_file: testcode]
        NAME x 1 [source_file: testcode]
            NULL 1 [source_file: testcode]
    VAR 1 [source_file: testcode]
        NAME y 1 [source_file: testcode]
            NAME x 1 [source_file: testcode]
    VAR 1 [source_file: testcode]
        NAME z 1 [source_file: testcode]
            NAME x 1 [source_file: testcode]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineVariablesTest.testInlineImmutableMultipleTimes(InlineVariablesTest.java:444)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testNoInlineStringMultipleTimesIfNotWorthwhile" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInlineStringMultipleTimesWhenAliasingAllStrings" time="0.002">
    <failure message="&#xa;Expected: var y=&quot;abcdefghijklmnopqrstuvwxyz&quot;;var z=&quot;abcdefghijklmnopqrstuvwxyz&quot;&#xa;Result:   var x=&quot;abcdefghijklmnopqrstuvwxyz&quot;;var y=x;var z=x&#xa;Node tree inequality:&#xa;Tree1:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;        VAR 1 [source_file: expected0]&#xa;            NAME y 1 [source_file: expected0]&#xa;                STRING abcdefghijklmnopqrstuvwxyz 1 [source_file: expected0]&#xa;        VAR 1 [source_file: expected0]&#xa;            NAME z 1 [source_file: expected0]&#xa;                STRING abcdefghijklmnopqrstuvwxyz 1 [source_file: expected0]&#xa;&#xa;&#xa;Tree2:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME x 1 [source_file: testcode]&#xa;                STRING abcdefghijklmnopqrstuvwxyz 1 [source_file: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME y 1 [source_file: testcode]&#xa;                NAME x 1 [source_file: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME z 1 [source_file: testcode]&#xa;                NAME x 1 [source_file: testcode]&#xa;&#xa;&#xa;Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;    VAR 1 [source_file: expected0]&#xa;        NAME y 1 [source_file: expected0]&#xa;            STRING abcdefghijklmnopqrstuvwxyz 1 [source_file: expected0]&#xa;    VAR 1 [source_file: expected0]&#xa;        NAME z 1 [source_file: expected0]&#xa;            STRING abcdefghijklmnopqrstuvwxyz 1 [source_file: expected0]&#xa;&#xa;&#xa;Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME x 1 [source_file: testcode]&#xa;            STRING abcdefghijklmnopqrstuvwxyz 1 [source_file: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME y 1 [source_file: testcode]&#xa;            NAME x 1 [source_file: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME z 1 [source_file: testcode]&#xa;            NAME x 1 [source_file: testcode]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: var y=&quot;abcdefghijklmnopqrstuvwxyz&quot;;var z=&quot;abcdefghijklmnopqrstuvwxyz&quot;
Result:   var x=&quot;abcdefghijklmnopqrstuvwxyz&quot;;var y=x;var z=x
Node tree inequality:
Tree1:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        VAR 1 [source_file: expected0]
            NAME y 1 [source_file: expected0]
                STRING abcdefghijklmnopqrstuvwxyz 1 [source_file: expected0]
        VAR 1 [source_file: expected0]
            NAME z 1 [source_file: expected0]
                STRING abcdefghijklmnopqrstuvwxyz 1 [source_file: expected0]


Tree2:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
        VAR 1 [source_file: testcode]
            NAME x 1 [source_file: testcode]
                STRING abcdefghijklmnopqrstuvwxyz 1 [source_file: testcode]
        VAR 1 [source_file: testcode]
            NAME y 1 [source_file: testcode]
                NAME x 1 [source_file: testcode]
        VAR 1 [source_file: testcode]
            NAME z 1 [source_file: testcode]
                NAME x 1 [source_file: testcode]


Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
    VAR 1 [source_file: expected0]
        NAME y 1 [source_file: expected0]
            STRING abcdefghijklmnopqrstuvwxyz 1 [source_file: expected0]
    VAR 1 [source_file: expected0]
        NAME z 1 [source_file: expected0]
            STRING abcdefghijklmnopqrstuvwxyz 1 [source_file: expected0]


Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
    VAR 1 [source_file: testcode]
        NAME x 1 [source_file: testcode]
            STRING abcdefghijklmnopqrstuvwxyz 1 [source_file: testcode]
    VAR 1 [source_file: testcode]
        NAME y 1 [source_file: testcode]
            NAME x 1 [source_file: testcode]
    VAR 1 [source_file: testcode]
        NAME z 1 [source_file: testcode]
            NAME x 1 [source_file: testcode]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineVariablesTest.testInlineStringMultipleTimesWhenAliasingAllStrings(InlineVariablesTest.java:456)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testNoInlineBackwards" time="0.0" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testNoInlineOutOfBranch" time="0.0" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInterferingInlines" time="0.002">
    <failure message="&#xa;Expected: var f=function(){alert(3)}&#xa;Result:   var a=3;var f=function(){alert(a)}&#xa;Node tree inequality:&#xa;Tree1:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;        VAR 1 [source_file: expected0]&#xa;            NAME f 1 [source_file: expected0]&#xa;                FUNCTION  1 [source_file: expected0]&#xa;                    NAME  1 [source_file: expected0]&#xa;                    PARAM_LIST 1 [source_file: expected0]&#xa;                    BLOCK 1 [source_file: expected0]&#xa;                        EXPR_RESULT 1 [source_file: expected0]&#xa;                            CALL 1 [free_call: 1] [source_file: expected0]&#xa;                                NAME alert 1 [source_file: expected0]&#xa;                                NUMBER 3.0 1 [source_file: expected0]&#xa;&#xa;&#xa;Tree2:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME a 1 [source_file: testcode]&#xa;                NUMBER 3.0 1 [source_file: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME f 1 [source_file: testcode]&#xa;                FUNCTION  1 [source_file: testcode]&#xa;                    NAME  1 [source_file: testcode]&#xa;                    PARAM_LIST 1 [source_file: testcode]&#xa;                    BLOCK 1 [source_file: testcode]&#xa;                        EXPR_RESULT 1 [source_file: testcode]&#xa;                            CALL 1 [free_call: 1] [source_file: testcode]&#xa;                                NAME alert 1 [source_file: testcode]&#xa;                                NAME a 1 [source_file: testcode]&#xa;&#xa;&#xa;Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;    VAR 1 [source_file: expected0]&#xa;        NAME f 1 [source_file: expected0]&#xa;            FUNCTION  1 [source_file: expected0]&#xa;                NAME  1 [source_file: expected0]&#xa;                PARAM_LIST 1 [source_file: expected0]&#xa;                BLOCK 1 [source_file: expected0]&#xa;                    EXPR_RESULT 1 [source_file: expected0]&#xa;                        CALL 1 [free_call: 1] [source_file: expected0]&#xa;                            NAME alert 1 [source_file: expected0]&#xa;                            NUMBER 3.0 1 [source_file: expected0]&#xa;&#xa;&#xa;Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME a 1 [source_file: testcode]&#xa;            NUMBER 3.0 1 [source_file: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME f 1 [source_file: testcode]&#xa;            FUNCTION  1 [source_file: testcode]&#xa;                NAME  1 [source_file: testcode]&#xa;                PARAM_LIST 1 [source_file: testcode]&#xa;                BLOCK 1 [source_file: testcode]&#xa;                    EXPR_RESULT 1 [source_file: testcode]&#xa;                        CALL 1 [free_call: 1] [source_file: testcode]&#xa;                            NAME alert 1 [source_file: testcode]&#xa;                            NAME a 1 [source_file: testcode]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: var f=function(){alert(3)}
Result:   var a=3;var f=function(){alert(a)}
Node tree inequality:
Tree1:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        VAR 1 [source_file: expected0]
            NAME f 1 [source_file: expected0]
                FUNCTION  1 [source_file: expected0]
                    NAME  1 [source_file: expected0]
                    PARAM_LIST 1 [source_file: expected0]
                    BLOCK 1 [source_file: expected0]
                        EXPR_RESULT 1 [source_file: expected0]
                            CALL 1 [free_call: 1] [source_file: expected0]
                                NAME alert 1 [source_file: expected0]
                                NUMBER 3.0 1 [source_file: expected0]


Tree2:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
        VAR 1 [source_file: testcode]
            NAME a 1 [source_file: testcode]
                NUMBER 3.0 1 [source_file: testcode]
        VAR 1 [source_file: testcode]
            NAME f 1 [source_file: testcode]
                FUNCTION  1 [source_file: testcode]
                    NAME  1 [source_file: testcode]
                    PARAM_LIST 1 [source_file: testcode]
                    BLOCK 1 [source_file: testcode]
                        EXPR_RESULT 1 [source_file: testcode]
                            CALL 1 [free_call: 1] [source_file: testcode]
                                NAME alert 1 [source_file: testcode]
                                NAME a 1 [source_file: testcode]


Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
    VAR 1 [source_file: expected0]
        NAME f 1 [source_file: expected0]
            FUNCTION  1 [source_file: expected0]
                NAME  1 [source_file: expected0]
                PARAM_LIST 1 [source_file: expected0]
                BLOCK 1 [source_file: expected0]
                    EXPR_RESULT 1 [source_file: expected0]
                        CALL 1 [free_call: 1] [source_file: expected0]
                            NAME alert 1 [source_file: expected0]
                            NUMBER 3.0 1 [source_file: expected0]


Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
    VAR 1 [source_file: testcode]
        NAME a 1 [source_file: testcode]
            NUMBER 3.0 1 [source_file: testcode]
    VAR 1 [source_file: testcode]
        NAME f 1 [source_file: testcode]
            FUNCTION  1 [source_file: testcode]
                NAME  1 [source_file: testcode]
                PARAM_LIST 1 [source_file: testcode]
                BLOCK 1 [source_file: testcode]
                    EXPR_RESULT 1 [source_file: testcode]
                        CALL 1 [free_call: 1] [source_file: testcode]
                            NAME alert 1 [source_file: testcode]
                            NAME a 1 [source_file: testcode]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineVariablesTest.testInterferingInlines(InlineVariablesTest.java:470)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInlineIntoTryCatch" time="0.001">
    <failure message="&#xa;Expected: try{var b=true}catch(e){var c=true+b;var d=true}finally{var f=true+b+c+d}&#xa;Result:   var a=true;try{var b=a}catch(e){var c=a+b;var d=true}finally{var f=a+b+c+d}&#xa;Node tree inequality:&#xa;Tree1:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;        TRY 1 [source_file: expected0]&#xa;            BLOCK 1 [source_file: expected0]&#xa;                VAR 1 [source_file: expected0]&#xa;                    NAME b 1 [source_file: expected0]&#xa;                        TRUE 1 [source_file: expected0]&#xa;            BLOCK 1 [source_file: expected0]&#xa;                CATCH 1 [source_file: expected0]&#xa;                    NAME e 1 [source_file: expected0]&#xa;                    BLOCK 1 [source_file: expected0]&#xa;                        VAR 1 [source_file: expected0]&#xa;                            NAME c 1 [source_file: expected0]&#xa;                                ADD 1 [source_file: expected0]&#xa;                                    TRUE 1 [source_file: expected0]&#xa;                                    NAME b 1 [source_file: expected0]&#xa;                        VAR 1 [source_file: expected0]&#xa;                            NAME d 1 [source_file: expected0]&#xa;                                TRUE 1 [source_file: expected0]&#xa;            BLOCK 1 [source_file: expected0]&#xa;                VAR 1 [source_file: expected0]&#xa;                    NAME f 1 [source_file: expected0]&#xa;                        ADD 1 [source_file: expected0]&#xa;                            ADD 1 [source_file: expected0]&#xa;                                ADD 1 [source_file: expected0]&#xa;                                    TRUE 1 [source_file: expected0]&#xa;                                    NAME b 1 [source_file: expected0]&#xa;                                NAME c 1 [source_file: expected0]&#xa;                            NAME d 1 [source_file: expected0]&#xa;&#xa;&#xa;Tree2:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME a 1 [source_file: testcode]&#xa;                TRUE 1 [source_file: testcode]&#xa;        TRY 1 [source_file: testcode]&#xa;            BLOCK 1 [source_file: testcode]&#xa;                VAR 1 [source_file: testcode]&#xa;                    NAME b 1 [source_file: testcode]&#xa;                        NAME a 1 [source_file: testcode]&#xa;            BLOCK 1 [source_file: testcode]&#xa;                CATCH 1 [source_file: testcode]&#xa;                    NAME e 1 [source_file: testcode]&#xa;                    BLOCK 1 [source_file: testcode]&#xa;                        VAR 1 [source_file: testcode]&#xa;                            NAME c 1 [source_file: testcode]&#xa;                                ADD 1 [source_file: testcode]&#xa;                                    NAME a 1 [source_file: testcode]&#xa;                                    NAME b 1 [source_file: testcode]&#xa;                        VAR 1 [source_file: testcode]&#xa;                            NAME d 1 [source_file: testcode]&#xa;                                TRUE 1 [source_file: testcode]&#xa;            BLOCK 1 [source_file: testcode]&#xa;                VAR 1 [source_file: testcode]&#xa;                    NAME f 1 [source_file: testcode]&#xa;                        ADD 1 [source_file: testcode]&#xa;                            ADD 1 [source_file: testcode]&#xa;                                ADD 1 [source_file: testcode]&#xa;                                    NAME a 1 [source_file: testcode]&#xa;                                    NAME b 1 [source_file: testcode]&#xa;                                NAME c 1 [source_file: testcode]&#xa;                            NAME d 1 [source_file: testcode]&#xa;&#xa;&#xa;Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;    TRY 1 [source_file: expected0]&#xa;        BLOCK 1 [source_file: expected0]&#xa;            VAR 1 [source_file: expected0]&#xa;                NAME b 1 [source_file: expected0]&#xa;                    TRUE 1 [source_file: expected0]&#xa;        BLOCK 1 [source_file: expected0]&#xa;            CATCH 1 [source_file: expected0]&#xa;                NAME e 1 [source_file: expected0]&#xa;                BLOCK 1 [source_file: expected0]&#xa;                    VAR 1 [source_file: expected0]&#xa;                        NAME c 1 [source_file: expected0]&#xa;                            ADD 1 [source_file: expected0]&#xa;                                TRUE 1 [source_file: expected0]&#xa;                                NAME b 1 [source_file: expected0]&#xa;                    VAR 1 [source_file: expected0]&#xa;                        NAME d 1 [source_file: expected0]&#xa;                            TRUE 1 [source_file: expected0]&#xa;        BLOCK 1 [source_file: expected0]&#xa;            VAR 1 [source_file: expected0]&#xa;                NAME f 1 [source_file: expected0]&#xa;                    ADD 1 [source_file: expected0]&#xa;                        ADD 1 [source_file: expected0]&#xa;                            ADD 1 [source_file: expected0]&#xa;                                TRUE 1 [source_file: expected0]&#xa;                                NAME b 1 [source_file: expected0]&#xa;                            NAME c 1 [source_file: expected0]&#xa;                        NAME d 1 [source_file: expected0]&#xa;&#xa;&#xa;Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME a 1 [source_file: testcode]&#xa;            TRUE 1 [source_file: testcode]&#xa;    TRY 1 [source_file: testcode]&#xa;        BLOCK 1 [source_file: testcode]&#xa;            VAR 1 [source_file: testcode]&#xa;                NAME b 1 [source_file: testcode]&#xa;                    NAME a 1 [source_file: testcode]&#xa;        BLOCK 1 [source_file: testcode]&#xa;            CATCH 1 [source_file: testcode]&#xa;                NAME e 1 [source_file: testcode]&#xa;                BLOCK 1 [source_file: testcode]&#xa;                    VAR 1 [source_file: testcode]&#xa;                        NAME c 1 [source_file: testcode]&#xa;                            ADD 1 [source_file: testcode]&#xa;                                NAME a 1 [source_file: testcode]&#xa;                                NAME b 1 [source_file: testcode]&#xa;                    VAR 1 [source_file: testcode]&#xa;                        NAME d 1 [source_file: testcode]&#xa;                            TRUE 1 [source_file: testcode]&#xa;        BLOCK 1 [source_file: testcode]&#xa;            VAR 1 [source_file: testcode]&#xa;                NAME f 1 [source_file: testcode]&#xa;                    ADD 1 [source_file: testcode]&#xa;                        ADD 1 [source_file: testcode]&#xa;                            ADD 1 [source_file: testcode]&#xa;                                NAME a 1 [source_file: testcode]&#xa;                                NAME b 1 [source_file: testcode]&#xa;                            NAME c 1 [source_file: testcode]&#xa;                        NAME d 1 [source_file: testcode]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: try{var b=true}catch(e){var c=true+b;var d=true}finally{var f=true+b+c+d}
Result:   var a=true;try{var b=a}catch(e){var c=a+b;var d=true}finally{var f=a+b+c+d}
Node tree inequality:
Tree1:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        TRY 1 [source_file: expected0]
            BLOCK 1 [source_file: expected0]
                VAR 1 [source_file: expected0]
                    NAME b 1 [source_file: expected0]
                        TRUE 1 [source_file: expected0]
            BLOCK 1 [source_file: expected0]
                CATCH 1 [source_file: expected0]
                    NAME e 1 [source_file: expected0]
                    BLOCK 1 [source_file: expected0]
                        VAR 1 [source_file: expected0]
                            NAME c 1 [source_file: expected0]
                                ADD 1 [source_file: expected0]
                                    TRUE 1 [source_file: expected0]
                                    NAME b 1 [source_file: expected0]
                        VAR 1 [source_file: expected0]
                            NAME d 1 [source_file: expected0]
                                TRUE 1 [source_file: expected0]
            BLOCK 1 [source_file: expected0]
                VAR 1 [source_file: expected0]
                    NAME f 1 [source_file: expected0]
                        ADD 1 [source_file: expected0]
                            ADD 1 [source_file: expected0]
                                ADD 1 [source_file: expected0]
                                    TRUE 1 [source_file: expected0]
                                    NAME b 1 [source_file: expected0]
                                NAME c 1 [source_file: expected0]
                            NAME d 1 [source_file: expected0]


Tree2:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
        VAR 1 [source_file: testcode]
            NAME a 1 [source_file: testcode]
                TRUE 1 [source_file: testcode]
        TRY 1 [source_file: testcode]
            BLOCK 1 [source_file: testcode]
                VAR 1 [source_file: testcode]
                    NAME b 1 [source_file: testcode]
                        NAME a 1 [source_file: testcode]
            BLOCK 1 [source_file: testcode]
                CATCH 1 [source_file: testcode]
                    NAME e 1 [source_file: testcode]
                    BLOCK 1 [source_file: testcode]
                        VAR 1 [source_file: testcode]
                            NAME c 1 [source_file: testcode]
                                ADD 1 [source_file: testcode]
                                    NAME a 1 [source_file: testcode]
                                    NAME b 1 [source_file: testcode]
                        VAR 1 [source_file: testcode]
                            NAME d 1 [source_file: testcode]
                                TRUE 1 [source_file: testcode]
            BLOCK 1 [source_file: testcode]
                VAR 1 [source_file: testcode]
                    NAME f 1 [source_file: testcode]
                        ADD 1 [source_file: testcode]
                            ADD 1 [source_file: testcode]
                                ADD 1 [source_file: testcode]
                                    NAME a 1 [source_file: testcode]
                                    NAME b 1 [source_file: testcode]
                                NAME c 1 [source_file: testcode]
                            NAME d 1 [source_file: testcode]


Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
    TRY 1 [source_file: expected0]
        BLOCK 1 [source_file: expected0]
            VAR 1 [source_file: expected0]
                NAME b 1 [source_file: expected0]
                    TRUE 1 [source_file: expected0]
        BLOCK 1 [source_file: expected0]
            CATCH 1 [source_file: expected0]
                NAME e 1 [source_file: expected0]
                BLOCK 1 [source_file: expected0]
                    VAR 1 [source_file: expected0]
                        NAME c 1 [source_file: expected0]
                            ADD 1 [source_file: expected0]
                                TRUE 1 [source_file: expected0]
                                NAME b 1 [source_file: expected0]
                    VAR 1 [source_file: expected0]
                        NAME d 1 [source_file: expected0]
                            TRUE 1 [source_file: expected0]
        BLOCK 1 [source_file: expected0]
            VAR 1 [source_file: expected0]
                NAME f 1 [source_file: expected0]
                    ADD 1 [source_file: expected0]
                        ADD 1 [source_file: expected0]
                            ADD 1 [source_file: expected0]
                                TRUE 1 [source_file: expected0]
                                NAME b 1 [source_file: expected0]
                            NAME c 1 [source_file: expected0]
                        NAME d 1 [source_file: expected0]


Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
    VAR 1 [source_file: testcode]
        NAME a 1 [source_file: testcode]
            TRUE 1 [source_file: testcode]
    TRY 1 [source_file: testcode]
        BLOCK 1 [source_file: testcode]
            VAR 1 [source_file: testcode]
                NAME b 1 [source_file: testcode]
                    NAME a 1 [source_file: testcode]
        BLOCK 1 [source_file: testcode]
            CATCH 1 [source_file: testcode]
                NAME e 1 [source_file: testcode]
                BLOCK 1 [source_file: testcode]
                    VAR 1 [source_file: testcode]
                        NAME c 1 [source_file: testcode]
                            ADD 1 [source_file: testcode]
                                NAME a 1 [source_file: testcode]
                                NAME b 1 [source_file: testcode]
                    VAR 1 [source_file: testcode]
                        NAME d 1 [source_file: testcode]
                            TRUE 1 [source_file: testcode]
        BLOCK 1 [source_file: testcode]
            VAR 1 [source_file: testcode]
                NAME f 1 [source_file: testcode]
                    ADD 1 [source_file: testcode]
                        ADD 1 [source_file: testcode]
                            ADD 1 [source_file: testcode]
                                NAME a 1 [source_file: testcode]
                                NAME b 1 [source_file: testcode]
                            NAME c 1 [source_file: testcode]
                        NAME d 1 [source_file: testcode]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineVariablesTest.testInlineIntoTryCatch(InlineVariablesTest.java:475)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInlineConstants" time="0.001">
    <failure message="&#xa;Expected: function foo(){return true}&#xa;Result:   function foo(){return XXX}var XXX=true&#xa;Node tree inequality:&#xa;Tree1:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;        FUNCTION foo 1 [source_file: expected0]&#xa;            NAME foo 1 [source_file: expected0]&#xa;            PARAM_LIST 1 [source_file: expected0]&#xa;            BLOCK 1 [source_file: expected0]&#xa;                RETURN 1 [source_file: expected0]&#xa;                    TRUE 1 [source_file: expected0]&#xa;&#xa;&#xa;Tree2:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;        FUNCTION foo 1 [source_file: testcode]&#xa;            NAME foo 1 [source_file: testcode]&#xa;            PARAM_LIST 1 [source_file: testcode]&#xa;            BLOCK 1 [source_file: testcode]&#xa;                RETURN 1 [source_file: testcode]&#xa;                    NAME XXX 1 [is_constant_name: 1] [source_file: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME XXX 1 [is_constant_name: 1] [source_file: testcode]&#xa;                TRUE 1 [source_file: testcode]&#xa;&#xa;&#xa;Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;    FUNCTION foo 1 [source_file: expected0]&#xa;        NAME foo 1 [source_file: expected0]&#xa;        PARAM_LIST 1 [source_file: expected0]&#xa;        BLOCK 1 [source_file: expected0]&#xa;            RETURN 1 [source_file: expected0]&#xa;                TRUE 1 [source_file: expected0]&#xa;&#xa;&#xa;Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;    FUNCTION foo 1 [source_file: testcode]&#xa;        NAME foo 1 [source_file: testcode]&#xa;        PARAM_LIST 1 [source_file: testcode]&#xa;        BLOCK 1 [source_file: testcode]&#xa;            RETURN 1 [source_file: testcode]&#xa;                NAME XXX 1 [is_constant_name: 1] [source_file: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME XXX 1 [is_constant_name: 1] [source_file: testcode]&#xa;            TRUE 1 [source_file: testcode]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: function foo(){return true}
Result:   function foo(){return XXX}var XXX=true
Node tree inequality:
Tree1:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        FUNCTION foo 1 [source_file: expected0]
            NAME foo 1 [source_file: expected0]
            PARAM_LIST 1 [source_file: expected0]
            BLOCK 1 [source_file: expected0]
                RETURN 1 [source_file: expected0]
                    TRUE 1 [source_file: expected0]


Tree2:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
        FUNCTION foo 1 [source_file: testcode]
            NAME foo 1 [source_file: testcode]
            PARAM_LIST 1 [source_file: testcode]
            BLOCK 1 [source_file: testcode]
                RETURN 1 [source_file: testcode]
                    NAME XXX 1 [is_constant_name: 1] [source_file: testcode]
        VAR 1 [source_file: testcode]
            NAME XXX 1 [is_constant_name: 1] [source_file: testcode]
                TRUE 1 [source_file: testcode]


Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
    FUNCTION foo 1 [source_file: expected0]
        NAME foo 1 [source_file: expected0]
        PARAM_LIST 1 [source_file: expected0]
        BLOCK 1 [source_file: expected0]
            RETURN 1 [source_file: expected0]
                TRUE 1 [source_file: expected0]


Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
    FUNCTION foo 1 [source_file: testcode]
        NAME foo 1 [source_file: testcode]
        PARAM_LIST 1 [source_file: testcode]
        BLOCK 1 [source_file: testcode]
            RETURN 1 [source_file: testcode]
                NAME XXX 1 [is_constant_name: 1] [source_file: testcode]
    VAR 1 [source_file: testcode]
        NAME XXX 1 [is_constant_name: 1] [source_file: testcode]
            TRUE 1 [source_file: testcode]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineVariablesTest.testInlineConstants(InlineVariablesTest.java:487)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInlineStringWhenWorthwhile" time="0.001">
    <failure message="&#xa;Expected: foo(&quot;a&quot;,&quot;a&quot;,&quot;a&quot;)&#xa;Result:   var x=&quot;a&quot;;foo(x,x,x)&#xa;Node tree inequality:&#xa;Tree1:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;        EXPR_RESULT 1 [source_file: expected0]&#xa;            CALL 1 [free_call: 1] [source_file: expected0]&#xa;                NAME foo 1 [source_file: expected0]&#xa;                STRING a 1 [source_file: expected0]&#xa;                STRING a 1 [source_file: expected0]&#xa;                STRING a 1 [source_file: expected0]&#xa;&#xa;&#xa;Tree2:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME x 1 [source_file: testcode]&#xa;                STRING a 1 [source_file: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            CALL 1 [free_call: 1] [source_file: testcode]&#xa;                NAME foo 1 [source_file: testcode]&#xa;                NAME x 1 [source_file: testcode]&#xa;                NAME x 1 [source_file: testcode]&#xa;                NAME x 1 [source_file: testcode]&#xa;&#xa;&#xa;Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;    EXPR_RESULT 1 [source_file: expected0]&#xa;        CALL 1 [free_call: 1] [source_file: expected0]&#xa;            NAME foo 1 [source_file: expected0]&#xa;            STRING a 1 [source_file: expected0]&#xa;            STRING a 1 [source_file: expected0]&#xa;            STRING a 1 [source_file: expected0]&#xa;&#xa;&#xa;Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME x 1 [source_file: testcode]&#xa;            STRING a 1 [source_file: testcode]&#xa;    EXPR_RESULT 1 [source_file: testcode]&#xa;        CALL 1 [free_call: 1] [source_file: testcode]&#xa;            NAME foo 1 [source_file: testcode]&#xa;            NAME x 1 [source_file: testcode]&#xa;            NAME x 1 [source_file: testcode]&#xa;            NAME x 1 [source_file: testcode]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: foo(&quot;a&quot;,&quot;a&quot;,&quot;a&quot;)
Result:   var x=&quot;a&quot;;foo(x,x,x)
Node tree inequality:
Tree1:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        EXPR_RESULT 1 [source_file: expected0]
            CALL 1 [free_call: 1] [source_file: expected0]
                NAME foo 1 [source_file: expected0]
                STRING a 1 [source_file: expected0]
                STRING a 1 [source_file: expected0]
                STRING a 1 [source_file: expected0]


Tree2:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
        VAR 1 [source_file: testcode]
            NAME x 1 [source_file: testcode]
                STRING a 1 [source_file: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            CALL 1 [free_call: 1] [source_file: testcode]
                NAME foo 1 [source_file: testcode]
                NAME x 1 [source_file: testcode]
                NAME x 1 [source_file: testcode]
                NAME x 1 [source_file: testcode]


Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
    EXPR_RESULT 1 [source_file: expected0]
        CALL 1 [free_call: 1] [source_file: expected0]
            NAME foo 1 [source_file: expected0]
            STRING a 1 [source_file: expected0]
            STRING a 1 [source_file: expected0]
            STRING a 1 [source_file: expected0]


Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
    VAR 1 [source_file: testcode]
        NAME x 1 [source_file: testcode]
            STRING a 1 [source_file: testcode]
    EXPR_RESULT 1 [source_file: testcode]
        CALL 1 [free_call: 1] [source_file: testcode]
            NAME foo 1 [source_file: testcode]
            NAME x 1 [source_file: testcode]
            NAME x 1 [source_file: testcode]
            NAME x 1 [source_file: testcode]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineVariablesTest.testInlineStringWhenWorthwhile(InlineVariablesTest.java:492)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInlineConstantAlias" time="0.001">
    <failure message="&#xa;Expected: var XXX=new Foo;q(XXX);bar(XXX)&#xa;Result:   var XXX=new Foo;q(XXX);var YYY=XXX;bar(YYY)&#xa;Node tree inequality:&#xa;Tree1:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;        VAR 1 [source_file: expected0]&#xa;            NAME XXX 1 [is_constant_name: 1] [source_file: expected0]&#xa;                NEW 1 [source_file: expected0]&#xa;                    NAME Foo 1 [source_file: expected0]&#xa;        EXPR_RESULT 1 [source_file: expected0]&#xa;            CALL 1 [free_call: 1] [source_file: expected0]&#xa;                NAME q 1 [source_file: expected0]&#xa;                NAME XXX 1 [is_constant_name: 1] [source_file: expected0]&#xa;        EXPR_RESULT 1 [source_file: expected0]&#xa;            CALL 1 [free_call: 1] [source_file: expected0]&#xa;                NAME bar 1 [source_file: expected0]&#xa;                NAME XXX 1 [is_constant_name: 1] [source_file: expected0]&#xa;&#xa;&#xa;Tree2:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME XXX 1 [is_constant_name: 1] [source_file: testcode]&#xa;                NEW 1 [source_file: testcode]&#xa;                    NAME Foo 1 [source_file: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            CALL 1 [free_call: 1] [source_file: testcode]&#xa;                NAME q 1 [source_file: testcode]&#xa;                NAME XXX 1 [is_constant_name: 1] [source_file: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME YYY 1 [is_constant_name: 1] [source_file: testcode]&#xa;                NAME XXX 1 [is_constant_name: 1] [source_file: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            CALL 1 [free_call: 1] [source_file: testcode]&#xa;                NAME bar 1 [source_file: testcode]&#xa;                NAME YYY 1 [is_constant_name: 1] [source_file: testcode]&#xa;&#xa;&#xa;Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;    VAR 1 [source_file: expected0]&#xa;        NAME XXX 1 [is_constant_name: 1] [source_file: expected0]&#xa;            NEW 1 [source_file: expected0]&#xa;                NAME Foo 1 [source_file: expected0]&#xa;    EXPR_RESULT 1 [source_file: expected0]&#xa;        CALL 1 [free_call: 1] [source_file: expected0]&#xa;            NAME q 1 [source_file: expected0]&#xa;            NAME XXX 1 [is_constant_name: 1] [source_file: expected0]&#xa;    EXPR_RESULT 1 [source_file: expected0]&#xa;        CALL 1 [free_call: 1] [source_file: expected0]&#xa;            NAME bar 1 [source_file: expected0]&#xa;            NAME XXX 1 [is_constant_name: 1] [source_file: expected0]&#xa;&#xa;&#xa;Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME XXX 1 [is_constant_name: 1] [source_file: testcode]&#xa;            NEW 1 [source_file: testcode]&#xa;                NAME Foo 1 [source_file: testcode]&#xa;    EXPR_RESULT 1 [source_file: testcode]&#xa;        CALL 1 [free_call: 1] [source_file: testcode]&#xa;            NAME q 1 [source_file: testcode]&#xa;            NAME XXX 1 [is_constant_name: 1] [source_file: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME YYY 1 [is_constant_name: 1] [source_file: testcode]&#xa;            NAME XXX 1 [is_constant_name: 1] [source_file: testcode]&#xa;    EXPR_RESULT 1 [source_file: testcode]&#xa;        CALL 1 [free_call: 1] [source_file: testcode]&#xa;            NAME bar 1 [source_file: testcode]&#xa;            NAME YYY 1 [is_constant_name: 1] [source_file: testcode]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: var XXX=new Foo;q(XXX);bar(XXX)
Result:   var XXX=new Foo;q(XXX);var YYY=XXX;bar(YYY)
Node tree inequality:
Tree1:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        VAR 1 [source_file: expected0]
            NAME XXX 1 [is_constant_name: 1] [source_file: expected0]
                NEW 1 [source_file: expected0]
                    NAME Foo 1 [source_file: expected0]
        EXPR_RESULT 1 [source_file: expected0]
            CALL 1 [free_call: 1] [source_file: expected0]
                NAME q 1 [source_file: expected0]
                NAME XXX 1 [is_constant_name: 1] [source_file: expected0]
        EXPR_RESULT 1 [source_file: expected0]
            CALL 1 [free_call: 1] [source_file: expected0]
                NAME bar 1 [source_file: expected0]
                NAME XXX 1 [is_constant_name: 1] [source_file: expected0]


Tree2:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
        VAR 1 [source_file: testcode]
            NAME XXX 1 [is_constant_name: 1] [source_file: testcode]
                NEW 1 [source_file: testcode]
                    NAME Foo 1 [source_file: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            CALL 1 [free_call: 1] [source_file: testcode]
                NAME q 1 [source_file: testcode]
                NAME XXX 1 [is_constant_name: 1] [source_file: testcode]
        VAR 1 [source_file: testcode]
            NAME YYY 1 [is_constant_name: 1] [source_file: testcode]
                NAME XXX 1 [is_constant_name: 1] [source_file: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            CALL 1 [free_call: 1] [source_file: testcode]
                NAME bar 1 [source_file: testcode]
                NAME YYY 1 [is_constant_name: 1] [source_file: testcode]


Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
    VAR 1 [source_file: expected0]
        NAME XXX 1 [is_constant_name: 1] [source_file: expected0]
            NEW 1 [source_file: expected0]
                NAME Foo 1 [source_file: expected0]
    EXPR_RESULT 1 [source_file: expected0]
        CALL 1 [free_call: 1] [source_file: expected0]
            NAME q 1 [source_file: expected0]
            NAME XXX 1 [is_constant_name: 1] [source_file: expected0]
    EXPR_RESULT 1 [source_file: expected0]
        CALL 1 [free_call: 1] [source_file: expected0]
            NAME bar 1 [source_file: expected0]
            NAME XXX 1 [is_constant_name: 1] [source_file: expected0]


Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
    VAR 1 [source_file: testcode]
        NAME XXX 1 [is_constant_name: 1] [source_file: testcode]
            NEW 1 [source_file: testcode]
                NAME Foo 1 [source_file: testcode]
    EXPR_RESULT 1 [source_file: testcode]
        CALL 1 [free_call: 1] [source_file: testcode]
            NAME q 1 [source_file: testcode]
            NAME XXX 1 [is_constant_name: 1] [source_file: testcode]
    VAR 1 [source_file: testcode]
        NAME YYY 1 [is_constant_name: 1] [source_file: testcode]
            NAME XXX 1 [is_constant_name: 1] [source_file: testcode]
    EXPR_RESULT 1 [source_file: testcode]
        CALL 1 [free_call: 1] [source_file: testcode]
            NAME bar 1 [source_file: testcode]
            NAME YYY 1 [is_constant_name: 1] [source_file: testcode]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineVariablesTest.testInlineConstantAlias(InlineVariablesTest.java:496)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInlineConstantAliasWithAnnotation" time="0.002">
    <failure message="&#xa;Expected: var xxx=new Foo;q(xxx);bar(xxx)&#xa;Result:   var xxx=new Foo;q(xxx);var YYY=xxx;bar(YYY)&#xa;Node tree inequality:&#xa;Tree1:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;        VAR 1 [jsdoc_info: JSDocInfo] [source_file: expected0]&#xa;            NAME xxx 1 [is_constant_name: 1] [source_file: expected0]&#xa;                NEW 1 [source_file: expected0]&#xa;                    NAME Foo 1 [source_file: expected0]&#xa;        EXPR_RESULT 1 [source_file: expected0]&#xa;            CALL 1 [free_call: 1] [source_file: expected0]&#xa;                NAME q 1 [source_file: expected0]&#xa;                NAME xxx 1 [is_constant_name: 1] [source_file: expected0]&#xa;        EXPR_RESULT 1 [source_file: expected0]&#xa;            CALL 1 [free_call: 1] [source_file: expected0]&#xa;                NAME bar 1 [source_file: expected0]&#xa;                NAME xxx 1 [is_constant_name: 1] [source_file: expected0]&#xa;&#xa;&#xa;Tree2:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;        VAR 1 [jsdoc_info: JSDocInfo] [source_file: testcode]&#xa;            NAME xxx 1 [is_constant_name: 1] [source_file: testcode]&#xa;                NEW 1 [source_file: testcode]&#xa;                    NAME Foo 1 [source_file: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            CALL 1 [free_call: 1] [source_file: testcode]&#xa;                NAME q 1 [source_file: testcode]&#xa;                NAME xxx 1 [is_constant_name: 1] [source_file: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME YYY 1 [is_constant_name: 1] [source_file: testcode]&#xa;                NAME xxx 1 [is_constant_name: 1] [source_file: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            CALL 1 [free_call: 1] [source_file: testcode]&#xa;                NAME bar 1 [source_file: testcode]&#xa;                NAME YYY 1 [is_constant_name: 1] [source_file: testcode]&#xa;&#xa;&#xa;Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;    VAR 1 [jsdoc_info: JSDocInfo] [source_file: expected0]&#xa;        NAME xxx 1 [is_constant_name: 1] [source_file: expected0]&#xa;            NEW 1 [source_file: expected0]&#xa;                NAME Foo 1 [source_file: expected0]&#xa;    EXPR_RESULT 1 [source_file: expected0]&#xa;        CALL 1 [free_call: 1] [source_file: expected0]&#xa;            NAME q 1 [source_file: expected0]&#xa;            NAME xxx 1 [is_constant_name: 1] [source_file: expected0]&#xa;    EXPR_RESULT 1 [source_file: expected0]&#xa;        CALL 1 [free_call: 1] [source_file: expected0]&#xa;            NAME bar 1 [source_file: expected0]&#xa;            NAME xxx 1 [is_constant_name: 1] [source_file: expected0]&#xa;&#xa;&#xa;Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;    VAR 1 [jsdoc_info: JSDocInfo] [source_file: testcode]&#xa;        NAME xxx 1 [is_constant_name: 1] [source_file: testcode]&#xa;            NEW 1 [source_file: testcode]&#xa;                NAME Foo 1 [source_file: testcode]&#xa;    EXPR_RESULT 1 [source_file: testcode]&#xa;        CALL 1 [free_call: 1] [source_file: testcode]&#xa;            NAME q 1 [source_file: testcode]&#xa;            NAME xxx 1 [is_constant_name: 1] [source_file: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME YYY 1 [is_constant_name: 1] [source_file: testcode]&#xa;            NAME xxx 1 [is_constant_name: 1] [source_file: testcode]&#xa;    EXPR_RESULT 1 [source_file: testcode]&#xa;        CALL 1 [free_call: 1] [source_file: testcode]&#xa;            NAME bar 1 [source_file: testcode]&#xa;            NAME YYY 1 [is_constant_name: 1] [source_file: testcode]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: var xxx=new Foo;q(xxx);bar(xxx)
Result:   var xxx=new Foo;q(xxx);var YYY=xxx;bar(YYY)
Node tree inequality:
Tree1:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        VAR 1 [jsdoc_info: JSDocInfo] [source_file: expected0]
            NAME xxx 1 [is_constant_name: 1] [source_file: expected0]
                NEW 1 [source_file: expected0]
                    NAME Foo 1 [source_file: expected0]
        EXPR_RESULT 1 [source_file: expected0]
            CALL 1 [free_call: 1] [source_file: expected0]
                NAME q 1 [source_file: expected0]
                NAME xxx 1 [is_constant_name: 1] [source_file: expected0]
        EXPR_RESULT 1 [source_file: expected0]
            CALL 1 [free_call: 1] [source_file: expected0]
                NAME bar 1 [source_file: expected0]
                NAME xxx 1 [is_constant_name: 1] [source_file: expected0]


Tree2:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
        VAR 1 [jsdoc_info: JSDocInfo] [source_file: testcode]
            NAME xxx 1 [is_constant_name: 1] [source_file: testcode]
                NEW 1 [source_file: testcode]
                    NAME Foo 1 [source_file: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            CALL 1 [free_call: 1] [source_file: testcode]
                NAME q 1 [source_file: testcode]
                NAME xxx 1 [is_constant_name: 1] [source_file: testcode]
        VAR 1 [source_file: testcode]
            NAME YYY 1 [is_constant_name: 1] [source_file: testcode]
                NAME xxx 1 [is_constant_name: 1] [source_file: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            CALL 1 [free_call: 1] [source_file: testcode]
                NAME bar 1 [source_file: testcode]
                NAME YYY 1 [is_constant_name: 1] [source_file: testcode]


Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
    VAR 1 [jsdoc_info: JSDocInfo] [source_file: expected0]
        NAME xxx 1 [is_constant_name: 1] [source_file: expected0]
            NEW 1 [source_file: expected0]
                NAME Foo 1 [source_file: expected0]
    EXPR_RESULT 1 [source_file: expected0]
        CALL 1 [free_call: 1] [source_file: expected0]
            NAME q 1 [source_file: expected0]
            NAME xxx 1 [is_constant_name: 1] [source_file: expected0]
    EXPR_RESULT 1 [source_file: expected0]
        CALL 1 [free_call: 1] [source_file: expected0]
            NAME bar 1 [source_file: expected0]
            NAME xxx 1 [is_constant_name: 1] [source_file: expected0]


Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
    VAR 1 [jsdoc_info: JSDocInfo] [source_file: testcode]
        NAME xxx 1 [is_constant_name: 1] [source_file: testcode]
            NEW 1 [source_file: testcode]
                NAME Foo 1 [source_file: testcode]
    EXPR_RESULT 1 [source_file: testcode]
        CALL 1 [free_call: 1] [source_file: testcode]
            NAME q 1 [source_file: testcode]
            NAME xxx 1 [is_constant_name: 1] [source_file: testcode]
    VAR 1 [source_file: testcode]
        NAME YYY 1 [is_constant_name: 1] [source_file: testcode]
            NAME xxx 1 [is_constant_name: 1] [source_file: testcode]
    EXPR_RESULT 1 [source_file: testcode]
        CALL 1 [free_call: 1] [source_file: testcode]
            NAME bar 1 [source_file: testcode]
            NAME YYY 1 [is_constant_name: 1] [source_file: testcode]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineVariablesTest.testInlineConstantAliasWithAnnotation(InlineVariablesTest.java:501)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInlineConstantAliasWithNonConstant" time="0.001">
    <failure message="&#xa;Expected: var XXX=new Foo;q(XXX);bar(XXX);baz(XXX)&#xa;Result:   var XXX=new Foo;q(XXX);var y=XXX;bar(y);baz(y)&#xa;Node tree inequality:&#xa;Tree1:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;        VAR 1 [source_file: expected0]&#xa;            NAME XXX 1 [is_constant_name: 1] [source_file: expected0]&#xa;                NEW 1 [source_file: expected0]&#xa;                    NAME Foo 1 [source_file: expected0]&#xa;        EXPR_RESULT 1 [source_file: expected0]&#xa;            CALL 1 [free_call: 1] [source_file: expected0]&#xa;                NAME q 1 [source_file: expected0]&#xa;                NAME XXX 1 [is_constant_name: 1] [source_file: expected0]&#xa;        EXPR_RESULT 1 [source_file: expected0]&#xa;            CALL 1 [free_call: 1] [source_file: expected0]&#xa;                NAME bar 1 [source_file: expected0]&#xa;                NAME XXX 1 [is_constant_name: 1] [source_file: expected0]&#xa;        EXPR_RESULT 1 [source_file: expected0]&#xa;            CALL 1 [free_call: 1] [source_file: expected0]&#xa;                NAME baz 1 [source_file: expected0]&#xa;                NAME XXX 1 [is_constant_name: 1] [source_file: expected0]&#xa;&#xa;&#xa;Tree2:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME XXX 1 [is_constant_name: 1] [source_file: testcode]&#xa;                NEW 1 [source_file: testcode]&#xa;                    NAME Foo 1 [source_file: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            CALL 1 [free_call: 1] [source_file: testcode]&#xa;                NAME q 1 [source_file: testcode]&#xa;                NAME XXX 1 [is_constant_name: 1] [source_file: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME y 1 [source_file: testcode]&#xa;                NAME XXX 1 [is_constant_name: 1] [source_file: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            CALL 1 [free_call: 1] [source_file: testcode]&#xa;                NAME bar 1 [source_file: testcode]&#xa;                NAME y 1 [source_file: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            CALL 1 [free_call: 1] [source_file: testcode]&#xa;                NAME baz 1 [source_file: testcode]&#xa;                NAME y 1 [source_file: testcode]&#xa;&#xa;&#xa;Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;    VAR 1 [source_file: expected0]&#xa;        NAME XXX 1 [is_constant_name: 1] [source_file: expected0]&#xa;            NEW 1 [source_file: expected0]&#xa;                NAME Foo 1 [source_file: expected0]&#xa;    EXPR_RESULT 1 [source_file: expected0]&#xa;        CALL 1 [free_call: 1] [source_file: expected0]&#xa;            NAME q 1 [source_file: expected0]&#xa;            NAME XXX 1 [is_constant_name: 1] [source_file: expected0]&#xa;    EXPR_RESULT 1 [source_file: expected0]&#xa;        CALL 1 [free_call: 1] [source_file: expected0]&#xa;            NAME bar 1 [source_file: expected0]&#xa;            NAME XXX 1 [is_constant_name: 1] [source_file: expected0]&#xa;    EXPR_RESULT 1 [source_file: expected0]&#xa;        CALL 1 [free_call: 1] [source_file: expected0]&#xa;            NAME baz 1 [source_file: expected0]&#xa;            NAME XXX 1 [is_constant_name: 1] [source_file: expected0]&#xa;&#xa;&#xa;Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME XXX 1 [is_constant_name: 1] [source_file: testcode]&#xa;            NEW 1 [source_file: testcode]&#xa;                NAME Foo 1 [source_file: testcode]&#xa;    EXPR_RESULT 1 [source_file: testcode]&#xa;        CALL 1 [free_call: 1] [source_file: testcode]&#xa;            NAME q 1 [source_file: testcode]&#xa;            NAME XXX 1 [is_constant_name: 1] [source_file: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME y 1 [source_file: testcode]&#xa;            NAME XXX 1 [is_constant_name: 1] [source_file: testcode]&#xa;    EXPR_RESULT 1 [source_file: testcode]&#xa;        CALL 1 [free_call: 1] [source_file: testcode]&#xa;            NAME bar 1 [source_file: testcode]&#xa;            NAME y 1 [source_file: testcode]&#xa;    EXPR_RESULT 1 [source_file: testcode]&#xa;        CALL 1 [free_call: 1] [source_file: testcode]&#xa;            NAME baz 1 [source_file: testcode]&#xa;            NAME y 1 [source_file: testcode]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: var XXX=new Foo;q(XXX);bar(XXX);baz(XXX)
Result:   var XXX=new Foo;q(XXX);var y=XXX;bar(y);baz(y)
Node tree inequality:
Tree1:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        VAR 1 [source_file: expected0]
            NAME XXX 1 [is_constant_name: 1] [source_file: expected0]
                NEW 1 [source_file: expected0]
                    NAME Foo 1 [source_file: expected0]
        EXPR_RESULT 1 [source_file: expected0]
            CALL 1 [free_call: 1] [source_file: expected0]
                NAME q 1 [source_file: expected0]
                NAME XXX 1 [is_constant_name: 1] [source_file: expected0]
        EXPR_RESULT 1 [source_file: expected0]
            CALL 1 [free_call: 1] [source_file: expected0]
                NAME bar 1 [source_file: expected0]
                NAME XXX 1 [is_constant_name: 1] [source_file: expected0]
        EXPR_RESULT 1 [source_file: expected0]
            CALL 1 [free_call: 1] [source_file: expected0]
                NAME baz 1 [source_file: expected0]
                NAME XXX 1 [is_constant_name: 1] [source_file: expected0]


Tree2:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
        VAR 1 [source_file: testcode]
            NAME XXX 1 [is_constant_name: 1] [source_file: testcode]
                NEW 1 [source_file: testcode]
                    NAME Foo 1 [source_file: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            CALL 1 [free_call: 1] [source_file: testcode]
                NAME q 1 [source_file: testcode]
                NAME XXX 1 [is_constant_name: 1] [source_file: testcode]
        VAR 1 [source_file: testcode]
            NAME y 1 [source_file: testcode]
                NAME XXX 1 [is_constant_name: 1] [source_file: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            CALL 1 [free_call: 1] [source_file: testcode]
                NAME bar 1 [source_file: testcode]
                NAME y 1 [source_file: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            CALL 1 [free_call: 1] [source_file: testcode]
                NAME baz 1 [source_file: testcode]
                NAME y 1 [source_file: testcode]


Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
    VAR 1 [source_file: expected0]
        NAME XXX 1 [is_constant_name: 1] [source_file: expected0]
            NEW 1 [source_file: expected0]
                NAME Foo 1 [source_file: expected0]
    EXPR_RESULT 1 [source_file: expected0]
        CALL 1 [free_call: 1] [source_file: expected0]
            NAME q 1 [source_file: expected0]
            NAME XXX 1 [is_constant_name: 1] [source_file: expected0]
    EXPR_RESULT 1 [source_file: expected0]
        CALL 1 [free_call: 1] [source_file: expected0]
            NAME bar 1 [source_file: expected0]
            NAME XXX 1 [is_constant_name: 1] [source_file: expected0]
    EXPR_RESULT 1 [source_file: expected0]
        CALL 1 [free_call: 1] [source_file: expected0]
            NAME baz 1 [source_file: expected0]
            NAME XXX 1 [is_constant_name: 1] [source_file: expected0]


Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
    VAR 1 [source_file: testcode]
        NAME XXX 1 [is_constant_name: 1] [source_file: testcode]
            NEW 1 [source_file: testcode]
                NAME Foo 1 [source_file: testcode]
    EXPR_RESULT 1 [source_file: testcode]
        CALL 1 [free_call: 1] [source_file: testcode]
            NAME q 1 [source_file: testcode]
            NAME XXX 1 [is_constant_name: 1] [source_file: testcode]
    VAR 1 [source_file: testcode]
        NAME y 1 [source_file: testcode]
            NAME XXX 1 [is_constant_name: 1] [source_file: testcode]
    EXPR_RESULT 1 [source_file: testcode]
        CALL 1 [free_call: 1] [source_file: testcode]
            NAME bar 1 [source_file: testcode]
            NAME y 1 [source_file: testcode]
    EXPR_RESULT 1 [source_file: testcode]
        CALL 1 [free_call: 1] [source_file: testcode]
            NAME baz 1 [source_file: testcode]
            NAME y 1 [source_file: testcode]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineVariablesTest.testInlineConstantAliasWithNonConstant(InlineVariablesTest.java:506)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testCascadingInlines" time="0.001">
    <failure message="&#xa;Expected: function f(){bar(4);baz(4)}&#xa;Result:   var XXX=4;function f(){var YYY=XXX;bar(YYY);baz(YYY)}&#xa;Node tree inequality:&#xa;Tree1:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;        FUNCTION f 1 [source_file: expected0]&#xa;            NAME f 1 [source_file: expected0]&#xa;            PARAM_LIST 1 [source_file: expected0]&#xa;            BLOCK 1 [source_file: expected0]&#xa;                EXPR_RESULT 1 [source_file: expected0]&#xa;                    CALL 1 [free_call: 1] [source_file: expected0]&#xa;                        NAME bar 1 [source_file: expected0]&#xa;                        NUMBER 4.0 1 [source_file: expected0]&#xa;                EXPR_RESULT 1 [source_file: expected0]&#xa;                    CALL 1 [free_call: 1] [source_file: expected0]&#xa;                        NAME baz 1 [source_file: expected0]&#xa;                        NUMBER 4.0 1 [source_file: expected0]&#xa;&#xa;&#xa;Tree2:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME XXX 1 [is_constant_name: 1] [source_file: testcode]&#xa;                NUMBER 4.0 1 [source_file: testcode]&#xa;        FUNCTION f 1 [source_file: testcode]&#xa;            NAME f 1 [source_file: testcode]&#xa;            PARAM_LIST 1 [source_file: testcode]&#xa;            BLOCK 1 [source_file: testcode]&#xa;                VAR 1 [source_file: testcode]&#xa;                    NAME YYY 1 [is_constant_name: 1] [source_file: testcode]&#xa;                        NAME XXX 1 [is_constant_name: 1] [source_file: testcode]&#xa;                EXPR_RESULT 1 [source_file: testcode]&#xa;                    CALL 1 [free_call: 1] [source_file: testcode]&#xa;                        NAME bar 1 [source_file: testcode]&#xa;                        NAME YYY 1 [is_constant_name: 1] [source_file: testcode]&#xa;                EXPR_RESULT 1 [source_file: testcode]&#xa;                    CALL 1 [free_call: 1] [source_file: testcode]&#xa;                        NAME baz 1 [source_file: testcode]&#xa;                        NAME YYY 1 [is_constant_name: 1] [source_file: testcode]&#xa;&#xa;&#xa;Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;    FUNCTION f 1 [source_file: expected0]&#xa;        NAME f 1 [source_file: expected0]&#xa;        PARAM_LIST 1 [source_file: expected0]&#xa;        BLOCK 1 [source_file: expected0]&#xa;            EXPR_RESULT 1 [source_file: expected0]&#xa;                CALL 1 [free_call: 1] [source_file: expected0]&#xa;                    NAME bar 1 [source_file: expected0]&#xa;                    NUMBER 4.0 1 [source_file: expected0]&#xa;            EXPR_RESULT 1 [source_file: expected0]&#xa;                CALL 1 [free_call: 1] [source_file: expected0]&#xa;                    NAME baz 1 [source_file: expected0]&#xa;                    NUMBER 4.0 1 [source_file: expected0]&#xa;&#xa;&#xa;Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME XXX 1 [is_constant_name: 1] [source_file: testcode]&#xa;            NUMBER 4.0 1 [source_file: testcode]&#xa;    FUNCTION f 1 [source_file: testcode]&#xa;        NAME f 1 [source_file: testcode]&#xa;        PARAM_LIST 1 [source_file: testcode]&#xa;        BLOCK 1 [source_file: testcode]&#xa;            VAR 1 [source_file: testcode]&#xa;                NAME YYY 1 [is_constant_name: 1] [source_file: testcode]&#xa;                    NAME XXX 1 [is_constant_name: 1] [source_file: testcode]&#xa;            EXPR_RESULT 1 [source_file: testcode]&#xa;                CALL 1 [free_call: 1] [source_file: testcode]&#xa;                    NAME bar 1 [source_file: testcode]&#xa;                    NAME YYY 1 [is_constant_name: 1] [source_file: testcode]&#xa;            EXPR_RESULT 1 [source_file: testcode]&#xa;                CALL 1 [free_call: 1] [source_file: testcode]&#xa;                    NAME baz 1 [source_file: testcode]&#xa;                    NAME YYY 1 [is_constant_name: 1] [source_file: testcode]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: function f(){bar(4);baz(4)}
Result:   var XXX=4;function f(){var YYY=XXX;bar(YYY);baz(YYY)}
Node tree inequality:
Tree1:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        FUNCTION f 1 [source_file: expected0]
            NAME f 1 [source_file: expected0]
            PARAM_LIST 1 [source_file: expected0]
            BLOCK 1 [source_file: expected0]
                EXPR_RESULT 1 [source_file: expected0]
                    CALL 1 [free_call: 1] [source_file: expected0]
                        NAME bar 1 [source_file: expected0]
                        NUMBER 4.0 1 [source_file: expected0]
                EXPR_RESULT 1 [source_file: expected0]
                    CALL 1 [free_call: 1] [source_file: expected0]
                        NAME baz 1 [source_file: expected0]
                        NUMBER 4.0 1 [source_file: expected0]


Tree2:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
        VAR 1 [source_file: testcode]
            NAME XXX 1 [is_constant_name: 1] [source_file: testcode]
                NUMBER 4.0 1 [source_file: testcode]
        FUNCTION f 1 [source_file: testcode]
            NAME f 1 [source_file: testcode]
            PARAM_LIST 1 [source_file: testcode]
            BLOCK 1 [source_file: testcode]
                VAR 1 [source_file: testcode]
                    NAME YYY 1 [is_constant_name: 1] [source_file: testcode]
                        NAME XXX 1 [is_constant_name: 1] [source_file: testcode]
                EXPR_RESULT 1 [source_file: testcode]
                    CALL 1 [free_call: 1] [source_file: testcode]
                        NAME bar 1 [source_file: testcode]
                        NAME YYY 1 [is_constant_name: 1] [source_file: testcode]
                EXPR_RESULT 1 [source_file: testcode]
                    CALL 1 [free_call: 1] [source_file: testcode]
                        NAME baz 1 [source_file: testcode]
                        NAME YYY 1 [is_constant_name: 1] [source_file: testcode]


Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
    FUNCTION f 1 [source_file: expected0]
        NAME f 1 [source_file: expected0]
        PARAM_LIST 1 [source_file: expected0]
        BLOCK 1 [source_file: expected0]
            EXPR_RESULT 1 [source_file: expected0]
                CALL 1 [free_call: 1] [source_file: expected0]
                    NAME bar 1 [source_file: expected0]
                    NUMBER 4.0 1 [source_file: expected0]
            EXPR_RESULT 1 [source_file: expected0]
                CALL 1 [free_call: 1] [source_file: expected0]
                    NAME baz 1 [source_file: expected0]
                    NUMBER 4.0 1 [source_file: expected0]


Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
    VAR 1 [source_file: testcode]
        NAME XXX 1 [is_constant_name: 1] [source_file: testcode]
            NUMBER 4.0 1 [source_file: testcode]
    FUNCTION f 1 [source_file: testcode]
        NAME f 1 [source_file: testcode]
        PARAM_LIST 1 [source_file: testcode]
        BLOCK 1 [source_file: testcode]
            VAR 1 [source_file: testcode]
                NAME YYY 1 [is_constant_name: 1] [source_file: testcode]
                    NAME XXX 1 [is_constant_name: 1] [source_file: testcode]
            EXPR_RESULT 1 [source_file: testcode]
                CALL 1 [free_call: 1] [source_file: testcode]
                    NAME bar 1 [source_file: testcode]
                    NAME YYY 1 [is_constant_name: 1] [source_file: testcode]
            EXPR_RESULT 1 [source_file: testcode]
                CALL 1 [free_call: 1] [source_file: testcode]
                    NAME baz 1 [source_file: testcode]
                    NAME YYY 1 [is_constant_name: 1] [source_file: testcode]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineVariablesTest.testCascadingInlines(InlineVariablesTest.java:511)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInlineFunctionDeclaration" time="0.001">
    <failure message="&#xa;Expected: var a=function(){}&#xa;Result:   var f=function(){};var a=f&#xa;Node tree inequality:&#xa;Tree1:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;        VAR 1 [source_file: expected0]&#xa;            NAME a 1 [source_file: expected0]&#xa;                FUNCTION  1 [source_file: expected0]&#xa;                    NAME  1 [source_file: expected0]&#xa;                    PARAM_LIST 1 [source_file: expected0]&#xa;                    BLOCK 1 [source_file: expected0]&#xa;&#xa;&#xa;Tree2:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME f 1 [source_file: testcode]&#xa;                FUNCTION  1 [source_file: testcode]&#xa;                    NAME  1 [source_file: testcode]&#xa;                    PARAM_LIST 1 [source_file: testcode]&#xa;                    BLOCK 1 [source_file: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME a 1 [source_file: testcode]&#xa;                NAME f 1 [source_file: testcode]&#xa;&#xa;&#xa;Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;    VAR 1 [source_file: expected0]&#xa;        NAME a 1 [source_file: expected0]&#xa;            FUNCTION  1 [source_file: expected0]&#xa;                NAME  1 [source_file: expected0]&#xa;                PARAM_LIST 1 [source_file: expected0]&#xa;                BLOCK 1 [source_file: expected0]&#xa;&#xa;&#xa;Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME f 1 [source_file: testcode]&#xa;            FUNCTION  1 [source_file: testcode]&#xa;                NAME  1 [source_file: testcode]&#xa;                PARAM_LIST 1 [source_file: testcode]&#xa;                BLOCK 1 [source_file: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME a 1 [source_file: testcode]&#xa;            NAME f 1 [source_file: testcode]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: var a=function(){}
Result:   var f=function(){};var a=f
Node tree inequality:
Tree1:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        VAR 1 [source_file: expected0]
            NAME a 1 [source_file: expected0]
                FUNCTION  1 [source_file: expected0]
                    NAME  1 [source_file: expected0]
                    PARAM_LIST 1 [source_file: expected0]
                    BLOCK 1 [source_file: expected0]


Tree2:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
        VAR 1 [source_file: testcode]
            NAME f 1 [source_file: testcode]
                FUNCTION  1 [source_file: testcode]
                    NAME  1 [source_file: testcode]
                    PARAM_LIST 1 [source_file: testcode]
                    BLOCK 1 [source_file: testcode]
        VAR 1 [source_file: testcode]
            NAME a 1 [source_file: testcode]
                NAME f 1 [source_file: testcode]


Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
    VAR 1 [source_file: expected0]
        NAME a 1 [source_file: expected0]
            FUNCTION  1 [source_file: expected0]
                NAME  1 [source_file: expected0]
                PARAM_LIST 1 [source_file: expected0]
                BLOCK 1 [source_file: expected0]


Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
    VAR 1 [source_file: testcode]
        NAME f 1 [source_file: testcode]
            FUNCTION  1 [source_file: testcode]
                NAME  1 [source_file: testcode]
                PARAM_LIST 1 [source_file: testcode]
                BLOCK 1 [source_file: testcode]
    VAR 1 [source_file: testcode]
        NAME a 1 [source_file: testcode]
            NAME f 1 [source_file: testcode]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineVariablesTest.testInlineFunctionDeclaration(InlineVariablesTest.java:523)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="test2388531" time="0.003" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testRecursiveFunction1" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testRecursiveFunction2" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testUnreferencedBleedingFunction" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testReferencedBleedingFunction" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInlineAliases1" time="0.002">
    <failure message="&#xa;Expected: var x=this.foo();this.bar();this.baz(x)&#xa;Result:   var x=this.foo();this.bar();var y=x;this.baz(y)&#xa;Node tree inequality:&#xa;Tree1:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;        VAR 1 [source_file: expected0]&#xa;            NAME x 1 [source_file: expected0]&#xa;                CALL 1 [source_file: expected0]&#xa;                    GETPROP 1 [source_file: expected0]&#xa;                        THIS 1 [source_file: expected0]&#xa;                        STRING foo 1 [source_file: expected0]&#xa;        EXPR_RESULT 1 [source_file: expected0]&#xa;            CALL 1 [source_file: expected0]&#xa;                GETPROP 1 [source_file: expected0]&#xa;                    THIS 1 [source_file: expected0]&#xa;                    STRING bar 1 [source_file: expected0]&#xa;        EXPR_RESULT 1 [source_file: expected0]&#xa;            CALL 1 [source_file: expected0]&#xa;                GETPROP 1 [source_file: expected0]&#xa;                    THIS 1 [source_file: expected0]&#xa;                    STRING baz 1 [source_file: expected0]&#xa;                NAME x 1 [source_file: expected0]&#xa;&#xa;&#xa;Tree2:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME x 1 [source_file: testcode]&#xa;                CALL 1 [source_file: testcode]&#xa;                    GETPROP 1 [source_file: testcode]&#xa;                        THIS 1 [source_file: testcode]&#xa;                        STRING foo 1 [source_file: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            CALL 1 [source_file: testcode]&#xa;                GETPROP 1 [source_file: testcode]&#xa;                    THIS 1 [source_file: testcode]&#xa;                    STRING bar 1 [source_file: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME y 1 [source_file: testcode]&#xa;                NAME x 1 [source_file: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            CALL 1 [source_file: testcode]&#xa;                GETPROP 1 [source_file: testcode]&#xa;                    THIS 1 [source_file: testcode]&#xa;                    STRING baz 1 [source_file: testcode]&#xa;                NAME y 1 [source_file: testcode]&#xa;&#xa;&#xa;Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;    VAR 1 [source_file: expected0]&#xa;        NAME x 1 [source_file: expected0]&#xa;            CALL 1 [source_file: expected0]&#xa;                GETPROP 1 [source_file: expected0]&#xa;                    THIS 1 [source_file: expected0]&#xa;                    STRING foo 1 [source_file: expected0]&#xa;    EXPR_RESULT 1 [source_file: expected0]&#xa;        CALL 1 [source_file: expected0]&#xa;            GETPROP 1 [source_file: expected0]&#xa;                THIS 1 [source_file: expected0]&#xa;                STRING bar 1 [source_file: expected0]&#xa;    EXPR_RESULT 1 [source_file: expected0]&#xa;        CALL 1 [source_file: expected0]&#xa;            GETPROP 1 [source_file: expected0]&#xa;                THIS 1 [source_file: expected0]&#xa;                STRING baz 1 [source_file: expected0]&#xa;            NAME x 1 [source_file: expected0]&#xa;&#xa;&#xa;Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME x 1 [source_file: testcode]&#xa;            CALL 1 [source_file: testcode]&#xa;                GETPROP 1 [source_file: testcode]&#xa;                    THIS 1 [source_file: testcode]&#xa;                    STRING foo 1 [source_file: testcode]&#xa;    EXPR_RESULT 1 [source_file: testcode]&#xa;        CALL 1 [source_file: testcode]&#xa;            GETPROP 1 [source_file: testcode]&#xa;                THIS 1 [source_file: testcode]&#xa;                STRING bar 1 [source_file: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME y 1 [source_file: testcode]&#xa;            NAME x 1 [source_file: testcode]&#xa;    EXPR_RESULT 1 [source_file: testcode]&#xa;        CALL 1 [source_file: testcode]&#xa;            GETPROP 1 [source_file: testcode]&#xa;                THIS 1 [source_file: testcode]&#xa;                STRING baz 1 [source_file: testcode]&#xa;            NAME y 1 [source_file: testcode]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: var x=this.foo();this.bar();this.baz(x)
Result:   var x=this.foo();this.bar();var y=x;this.baz(y)
Node tree inequality:
Tree1:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        VAR 1 [source_file: expected0]
            NAME x 1 [source_file: expected0]
                CALL 1 [source_file: expected0]
                    GETPROP 1 [source_file: expected0]
                        THIS 1 [source_file: expected0]
                        STRING foo 1 [source_file: expected0]
        EXPR_RESULT 1 [source_file: expected0]
            CALL 1 [source_file: expected0]
                GETPROP 1 [source_file: expected0]
                    THIS 1 [source_file: expected0]
                    STRING bar 1 [source_file: expected0]
        EXPR_RESULT 1 [source_file: expected0]
            CALL 1 [source_file: expected0]
                GETPROP 1 [source_file: expected0]
                    THIS 1 [source_file: expected0]
                    STRING baz 1 [source_file: expected0]
                NAME x 1 [source_file: expected0]


Tree2:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
        VAR 1 [source_file: testcode]
            NAME x 1 [source_file: testcode]
                CALL 1 [source_file: testcode]
                    GETPROP 1 [source_file: testcode]
                        THIS 1 [source_file: testcode]
                        STRING foo 1 [source_file: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            CALL 1 [source_file: testcode]
                GETPROP 1 [source_file: testcode]
                    THIS 1 [source_file: testcode]
                    STRING bar 1 [source_file: testcode]
        VAR 1 [source_file: testcode]
            NAME y 1 [source_file: testcode]
                NAME x 1 [source_file: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            CALL 1 [source_file: testcode]
                GETPROP 1 [source_file: testcode]
                    THIS 1 [source_file: testcode]
                    STRING baz 1 [source_file: testcode]
                NAME y 1 [source_file: testcode]


Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
    VAR 1 [source_file: expected0]
        NAME x 1 [source_file: expected0]
            CALL 1 [source_file: expected0]
                GETPROP 1 [source_file: expected0]
                    THIS 1 [source_file: expected0]
                    STRING foo 1 [source_file: expected0]
    EXPR_RESULT 1 [source_file: expected0]
        CALL 1 [source_file: expected0]
            GETPROP 1 [source_file: expected0]
                THIS 1 [source_file: expected0]
                STRING bar 1 [source_file: expected0]
    EXPR_RESULT 1 [source_file: expected0]
        CALL 1 [source_file: expected0]
            GETPROP 1 [source_file: expected0]
                THIS 1 [source_file: expected0]
                STRING baz 1 [source_file: expected0]
            NAME x 1 [source_file: expected0]


Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
    VAR 1 [source_file: testcode]
        NAME x 1 [source_file: testcode]
            CALL 1 [source_file: testcode]
                GETPROP 1 [source_file: testcode]
                    THIS 1 [source_file: testcode]
                    STRING foo 1 [source_file: testcode]
    EXPR_RESULT 1 [source_file: testcode]
        CALL 1 [source_file: testcode]
            GETPROP 1 [source_file: testcode]
                THIS 1 [source_file: testcode]
                STRING bar 1 [source_file: testcode]
    VAR 1 [source_file: testcode]
        NAME y 1 [source_file: testcode]
            NAME x 1 [source_file: testcode]
    EXPR_RESULT 1 [source_file: testcode]
        CALL 1 [source_file: testcode]
            GETPROP 1 [source_file: testcode]
                THIS 1 [source_file: testcode]
                STRING baz 1 [source_file: testcode]
            NAME y 1 [source_file: testcode]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineVariablesTest.testInlineAliases1(InlineVariablesTest.java:560)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInlineAliases1b" time="0.002">
    <failure message="&#xa;Expected: var x=this.foo();this.bar();x;this.baz(x)&#xa;Result:   var x=this.foo();this.bar();var y;y=x;this.baz(y)&#xa;Node tree inequality:&#xa;Tree1:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;        VAR 1 [source_file: expected0]&#xa;            NAME x 1 [source_file: expected0]&#xa;                CALL 1 [source_file: expected0]&#xa;                    GETPROP 1 [source_file: expected0]&#xa;                        THIS 1 [source_file: expected0]&#xa;                        STRING foo 1 [source_file: expected0]&#xa;        EXPR_RESULT 1 [source_file: expected0]&#xa;            CALL 1 [source_file: expected0]&#xa;                GETPROP 1 [source_file: expected0]&#xa;                    THIS 1 [source_file: expected0]&#xa;                    STRING bar 1 [source_file: expected0]&#xa;        EXPR_RESULT 1 [source_file: expected0]&#xa;            NAME x 1 [source_file: expected0]&#xa;        EXPR_RESULT 1 [source_file: expected0]&#xa;            CALL 1 [source_file: expected0]&#xa;                GETPROP 1 [source_file: expected0]&#xa;                    THIS 1 [source_file: expected0]&#xa;                    STRING baz 1 [source_file: expected0]&#xa;                NAME x 1 [source_file: expected0]&#xa;&#xa;&#xa;Tree2:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME x 1 [source_file: testcode]&#xa;                CALL 1 [source_file: testcode]&#xa;                    GETPROP 1 [source_file: testcode]&#xa;                        THIS 1 [source_file: testcode]&#xa;                        STRING foo 1 [source_file: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            CALL 1 [source_file: testcode]&#xa;                GETPROP 1 [source_file: testcode]&#xa;                    THIS 1 [source_file: testcode]&#xa;                    STRING bar 1 [source_file: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME y 1 [source_file: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            ASSIGN 1 [source_file: testcode]&#xa;                NAME y 1 [source_file: testcode]&#xa;                NAME x 1 [source_file: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            CALL 1 [source_file: testcode]&#xa;                GETPROP 1 [source_file: testcode]&#xa;                    THIS 1 [source_file: testcode]&#xa;                    STRING baz 1 [source_file: testcode]&#xa;                NAME y 1 [source_file: testcode]&#xa;&#xa;&#xa;Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;    VAR 1 [source_file: expected0]&#xa;        NAME x 1 [source_file: expected0]&#xa;            CALL 1 [source_file: expected0]&#xa;                GETPROP 1 [source_file: expected0]&#xa;                    THIS 1 [source_file: expected0]&#xa;                    STRING foo 1 [source_file: expected0]&#xa;    EXPR_RESULT 1 [source_file: expected0]&#xa;        CALL 1 [source_file: expected0]&#xa;            GETPROP 1 [source_file: expected0]&#xa;                THIS 1 [source_file: expected0]&#xa;                STRING bar 1 [source_file: expected0]&#xa;    EXPR_RESULT 1 [source_file: expected0]&#xa;        NAME x 1 [source_file: expected0]&#xa;    EXPR_RESULT 1 [source_file: expected0]&#xa;        CALL 1 [source_file: expected0]&#xa;            GETPROP 1 [source_file: expected0]&#xa;                THIS 1 [source_file: expected0]&#xa;                STRING baz 1 [source_file: expected0]&#xa;            NAME x 1 [source_file: expected0]&#xa;&#xa;&#xa;Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME x 1 [source_file: testcode]&#xa;            CALL 1 [source_file: testcode]&#xa;                GETPROP 1 [source_file: testcode]&#xa;                    THIS 1 [source_file: testcode]&#xa;                    STRING foo 1 [source_file: testcode]&#xa;    EXPR_RESULT 1 [source_file: testcode]&#xa;        CALL 1 [source_file: testcode]&#xa;            GETPROP 1 [source_file: testcode]&#xa;                THIS 1 [source_file: testcode]&#xa;                STRING bar 1 [source_file: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME y 1 [source_file: testcode]&#xa;    EXPR_RESULT 1 [source_file: testcode]&#xa;        ASSIGN 1 [source_file: testcode]&#xa;            NAME y 1 [source_file: testcode]&#xa;            NAME x 1 [source_file: testcode]&#xa;    EXPR_RESULT 1 [source_file: testcode]&#xa;        CALL 1 [source_file: testcode]&#xa;            GETPROP 1 [source_file: testcode]&#xa;                THIS 1 [source_file: testcode]&#xa;                STRING baz 1 [source_file: testcode]&#xa;            NAME y 1 [source_file: testcode]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: var x=this.foo();this.bar();x;this.baz(x)
Result:   var x=this.foo();this.bar();var y;y=x;this.baz(y)
Node tree inequality:
Tree1:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        VAR 1 [source_file: expected0]
            NAME x 1 [source_file: expected0]
                CALL 1 [source_file: expected0]
                    GETPROP 1 [source_file: expected0]
                        THIS 1 [source_file: expected0]
                        STRING foo 1 [source_file: expected0]
        EXPR_RESULT 1 [source_file: expected0]
            CALL 1 [source_file: expected0]
                GETPROP 1 [source_file: expected0]
                    THIS 1 [source_file: expected0]
                    STRING bar 1 [source_file: expected0]
        EXPR_RESULT 1 [source_file: expected0]
            NAME x 1 [source_file: expected0]
        EXPR_RESULT 1 [source_file: expected0]
            CALL 1 [source_file: expected0]
                GETPROP 1 [source_file: expected0]
                    THIS 1 [source_file: expected0]
                    STRING baz 1 [source_file: expected0]
                NAME x 1 [source_file: expected0]


Tree2:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
        VAR 1 [source_file: testcode]
            NAME x 1 [source_file: testcode]
                CALL 1 [source_file: testcode]
                    GETPROP 1 [source_file: testcode]
                        THIS 1 [source_file: testcode]
                        STRING foo 1 [source_file: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            CALL 1 [source_file: testcode]
                GETPROP 1 [source_file: testcode]
                    THIS 1 [source_file: testcode]
                    STRING bar 1 [source_file: testcode]
        VAR 1 [source_file: testcode]
            NAME y 1 [source_file: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            ASSIGN 1 [source_file: testcode]
                NAME y 1 [source_file: testcode]
                NAME x 1 [source_file: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            CALL 1 [source_file: testcode]
                GETPROP 1 [source_file: testcode]
                    THIS 1 [source_file: testcode]
                    STRING baz 1 [source_file: testcode]
                NAME y 1 [source_file: testcode]


Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
    VAR 1 [source_file: expected0]
        NAME x 1 [source_file: expected0]
            CALL 1 [source_file: expected0]
                GETPROP 1 [source_file: expected0]
                    THIS 1 [source_file: expected0]
                    STRING foo 1 [source_file: expected0]
    EXPR_RESULT 1 [source_file: expected0]
        CALL 1 [source_file: expected0]
            GETPROP 1 [source_file: expected0]
                THIS 1 [source_file: expected0]
                STRING bar 1 [source_file: expected0]
    EXPR_RESULT 1 [source_file: expected0]
        NAME x 1 [source_file: expected0]
    EXPR_RESULT 1 [source_file: expected0]
        CALL 1 [source_file: expected0]
            GETPROP 1 [source_file: expected0]
                THIS 1 [source_file: expected0]
                STRING baz 1 [source_file: expected0]
            NAME x 1 [source_file: expected0]


Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
    VAR 1 [source_file: testcode]
        NAME x 1 [source_file: testcode]
            CALL 1 [source_file: testcode]
                GETPROP 1 [source_file: testcode]
                    THIS 1 [source_file: testcode]
                    STRING foo 1 [source_file: testcode]
    EXPR_RESULT 1 [source_file: testcode]
        CALL 1 [source_file: testcode]
            GETPROP 1 [source_file: testcode]
                THIS 1 [source_file: testcode]
                STRING bar 1 [source_file: testcode]
    VAR 1 [source_file: testcode]
        NAME y 1 [source_file: testcode]
    EXPR_RESULT 1 [source_file: testcode]
        ASSIGN 1 [source_file: testcode]
            NAME y 1 [source_file: testcode]
            NAME x 1 [source_file: testcode]
    EXPR_RESULT 1 [source_file: testcode]
        CALL 1 [source_file: testcode]
            GETPROP 1 [source_file: testcode]
                THIS 1 [source_file: testcode]
                STRING baz 1 [source_file: testcode]
            NAME y 1 [source_file: testcode]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineVariablesTest.testInlineAliases1b(InlineVariablesTest.java:565)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInlineAliases1c" time="0.002">
    <failure message="&#xa;Expected: var x;x=this.foo();this.bar();this.baz(x)&#xa;Result:   var x;x=this.foo();this.bar();var y=x;this.baz(y)&#xa;Node tree inequality:&#xa;Tree1:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;        VAR 1 [source_file: expected0]&#xa;            NAME x 1 [source_file: expected0]&#xa;        EXPR_RESULT 1 [source_file: expected0]&#xa;            ASSIGN 1 [source_file: expected0]&#xa;                NAME x 1 [source_file: expected0]&#xa;                CALL 1 [source_file: expected0]&#xa;                    GETPROP 1 [source_file: expected0]&#xa;                        THIS 1 [source_file: expected0]&#xa;                        STRING foo 1 [source_file: expected0]&#xa;        EXPR_RESULT 1 [source_file: expected0]&#xa;            CALL 1 [source_file: expected0]&#xa;                GETPROP 1 [source_file: expected0]&#xa;                    THIS 1 [source_file: expected0]&#xa;                    STRING bar 1 [source_file: expected0]&#xa;        EXPR_RESULT 1 [source_file: expected0]&#xa;            CALL 1 [source_file: expected0]&#xa;                GETPROP 1 [source_file: expected0]&#xa;                    THIS 1 [source_file: expected0]&#xa;                    STRING baz 1 [source_file: expected0]&#xa;                NAME x 1 [source_file: expected0]&#xa;&#xa;&#xa;Tree2:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME x 1 [source_file: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            ASSIGN 1 [source_file: testcode]&#xa;                NAME x 1 [source_file: testcode]&#xa;                CALL 1 [source_file: testcode]&#xa;                    GETPROP 1 [source_file: testcode]&#xa;                        THIS 1 [source_file: testcode]&#xa;                        STRING foo 1 [source_file: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            CALL 1 [source_file: testcode]&#xa;                GETPROP 1 [source_file: testcode]&#xa;                    THIS 1 [source_file: testcode]&#xa;                    STRING bar 1 [source_file: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME y 1 [source_file: testcode]&#xa;                NAME x 1 [source_file: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            CALL 1 [source_file: testcode]&#xa;                GETPROP 1 [source_file: testcode]&#xa;                    THIS 1 [source_file: testcode]&#xa;                    STRING baz 1 [source_file: testcode]&#xa;                NAME y 1 [source_file: testcode]&#xa;&#xa;&#xa;Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;    VAR 1 [source_file: expected0]&#xa;        NAME x 1 [source_file: expected0]&#xa;    EXPR_RESULT 1 [source_file: expected0]&#xa;        ASSIGN 1 [source_file: expected0]&#xa;            NAME x 1 [source_file: expected0]&#xa;            CALL 1 [source_file: expected0]&#xa;                GETPROP 1 [source_file: expected0]&#xa;                    THIS 1 [source_file: expected0]&#xa;                    STRING foo 1 [source_file: expected0]&#xa;    EXPR_RESULT 1 [source_file: expected0]&#xa;        CALL 1 [source_file: expected0]&#xa;            GETPROP 1 [source_file: expected0]&#xa;                THIS 1 [source_file: expected0]&#xa;                STRING bar 1 [source_file: expected0]&#xa;    EXPR_RESULT 1 [source_file: expected0]&#xa;        CALL 1 [source_file: expected0]&#xa;            GETPROP 1 [source_file: expected0]&#xa;                THIS 1 [source_file: expected0]&#xa;                STRING baz 1 [source_file: expected0]&#xa;            NAME x 1 [source_file: expected0]&#xa;&#xa;&#xa;Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME x 1 [source_file: testcode]&#xa;    EXPR_RESULT 1 [source_file: testcode]&#xa;        ASSIGN 1 [source_file: testcode]&#xa;            NAME x 1 [source_file: testcode]&#xa;            CALL 1 [source_file: testcode]&#xa;                GETPROP 1 [source_file: testcode]&#xa;                    THIS 1 [source_file: testcode]&#xa;                    STRING foo 1 [source_file: testcode]&#xa;    EXPR_RESULT 1 [source_file: testcode]&#xa;        CALL 1 [source_file: testcode]&#xa;            GETPROP 1 [source_file: testcode]&#xa;                THIS 1 [source_file: testcode]&#xa;                STRING bar 1 [source_file: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME y 1 [source_file: testcode]&#xa;            NAME x 1 [source_file: testcode]&#xa;    EXPR_RESULT 1 [source_file: testcode]&#xa;        CALL 1 [source_file: testcode]&#xa;            GETPROP 1 [source_file: testcode]&#xa;                THIS 1 [source_file: testcode]&#xa;                STRING baz 1 [source_file: testcode]&#xa;            NAME y 1 [source_file: testcode]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: var x;x=this.foo();this.bar();this.baz(x)
Result:   var x;x=this.foo();this.bar();var y=x;this.baz(y)
Node tree inequality:
Tree1:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        VAR 1 [source_file: expected0]
            NAME x 1 [source_file: expected0]
        EXPR_RESULT 1 [source_file: expected0]
            ASSIGN 1 [source_file: expected0]
                NAME x 1 [source_file: expected0]
                CALL 1 [source_file: expected0]
                    GETPROP 1 [source_file: expected0]
                        THIS 1 [source_file: expected0]
                        STRING foo 1 [source_file: expected0]
        EXPR_RESULT 1 [source_file: expected0]
            CALL 1 [source_file: expected0]
                GETPROP 1 [source_file: expected0]
                    THIS 1 [source_file: expected0]
                    STRING bar 1 [source_file: expected0]
        EXPR_RESULT 1 [source_file: expected0]
            CALL 1 [source_file: expected0]
                GETPROP 1 [source_file: expected0]
                    THIS 1 [source_file: expected0]
                    STRING baz 1 [source_file: expected0]
                NAME x 1 [source_file: expected0]


Tree2:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
        VAR 1 [source_file: testcode]
            NAME x 1 [source_file: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            ASSIGN 1 [source_file: testcode]
                NAME x 1 [source_file: testcode]
                CALL 1 [source_file: testcode]
                    GETPROP 1 [source_file: testcode]
                        THIS 1 [source_file: testcode]
                        STRING foo 1 [source_file: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            CALL 1 [source_file: testcode]
                GETPROP 1 [source_file: testcode]
                    THIS 1 [source_file: testcode]
                    STRING bar 1 [source_file: testcode]
        VAR 1 [source_file: testcode]
            NAME y 1 [source_file: testcode]
                NAME x 1 [source_file: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            CALL 1 [source_file: testcode]
                GETPROP 1 [source_file: testcode]
                    THIS 1 [source_file: testcode]
                    STRING baz 1 [source_file: testcode]
                NAME y 1 [source_file: testcode]


Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
    VAR 1 [source_file: expected0]
        NAME x 1 [source_file: expected0]
    EXPR_RESULT 1 [source_file: expected0]
        ASSIGN 1 [source_file: expected0]
            NAME x 1 [source_file: expected0]
            CALL 1 [source_file: expected0]
                GETPROP 1 [source_file: expected0]
                    THIS 1 [source_file: expected0]
                    STRING foo 1 [source_file: expected0]
    EXPR_RESULT 1 [source_file: expected0]
        CALL 1 [source_file: expected0]
            GETPROP 1 [source_file: expected0]
                THIS 1 [source_file: expected0]
                STRING bar 1 [source_file: expected0]
    EXPR_RESULT 1 [source_file: expected0]
        CALL 1 [source_file: expected0]
            GETPROP 1 [source_file: expected0]
                THIS 1 [source_file: expected0]
                STRING baz 1 [source_file: expected0]
            NAME x 1 [source_file: expected0]


Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
    VAR 1 [source_file: testcode]
        NAME x 1 [source_file: testcode]
    EXPR_RESULT 1 [source_file: testcode]
        ASSIGN 1 [source_file: testcode]
            NAME x 1 [source_file: testcode]
            CALL 1 [source_file: testcode]
                GETPROP 1 [source_file: testcode]
                    THIS 1 [source_file: testcode]
                    STRING foo 1 [source_file: testcode]
    EXPR_RESULT 1 [source_file: testcode]
        CALL 1 [source_file: testcode]
            GETPROP 1 [source_file: testcode]
                THIS 1 [source_file: testcode]
                STRING bar 1 [source_file: testcode]
    VAR 1 [source_file: testcode]
        NAME y 1 [source_file: testcode]
            NAME x 1 [source_file: testcode]
    EXPR_RESULT 1 [source_file: testcode]
        CALL 1 [source_file: testcode]
            GETPROP 1 [source_file: testcode]
                THIS 1 [source_file: testcode]
                STRING baz 1 [source_file: testcode]
            NAME y 1 [source_file: testcode]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineVariablesTest.testInlineAliases1c(InlineVariablesTest.java:570)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInlineAliases1d" time="0.003">
    <failure message="&#xa;Expected: var x;x=this.foo();this.bar();x;this.baz(x)&#xa;Result:   var x;x=this.foo();this.bar();var y;y=x;this.baz(y)&#xa;Node tree inequality:&#xa;Tree1:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;        VAR 1 [source_file: expected0]&#xa;            NAME x 1 [source_file: expected0]&#xa;        EXPR_RESULT 1 [source_file: expected0]&#xa;            ASSIGN 1 [source_file: expected0]&#xa;                NAME x 1 [source_file: expected0]&#xa;                CALL 1 [source_file: expected0]&#xa;                    GETPROP 1 [source_file: expected0]&#xa;                        THIS 1 [source_file: expected0]&#xa;                        STRING foo 1 [source_file: expected0]&#xa;        EXPR_RESULT 1 [source_file: expected0]&#xa;            CALL 1 [source_file: expected0]&#xa;                GETPROP 1 [source_file: expected0]&#xa;                    THIS 1 [source_file: expected0]&#xa;                    STRING bar 1 [source_file: expected0]&#xa;        EXPR_RESULT 1 [source_file: expected0]&#xa;            NAME x 1 [source_file: expected0]&#xa;        EXPR_RESULT 1 [source_file: expected0]&#xa;            CALL 1 [source_file: expected0]&#xa;                GETPROP 1 [source_file: expected0]&#xa;                    THIS 1 [source_file: expected0]&#xa;                    STRING baz 1 [source_file: expected0]&#xa;                NAME x 1 [source_file: expected0]&#xa;&#xa;&#xa;Tree2:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME x 1 [source_file: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            ASSIGN 1 [source_file: testcode]&#xa;                NAME x 1 [source_file: testcode]&#xa;                CALL 1 [source_file: testcode]&#xa;                    GETPROP 1 [source_file: testcode]&#xa;                        THIS 1 [source_file: testcode]&#xa;                        STRING foo 1 [source_file: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            CALL 1 [source_file: testcode]&#xa;                GETPROP 1 [source_file: testcode]&#xa;                    THIS 1 [source_file: testcode]&#xa;                    STRING bar 1 [source_file: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME y 1 [source_file: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            ASSIGN 1 [source_file: testcode]&#xa;                NAME y 1 [source_file: testcode]&#xa;                NAME x 1 [source_file: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            CALL 1 [source_file: testcode]&#xa;                GETPROP 1 [source_file: testcode]&#xa;                    THIS 1 [source_file: testcode]&#xa;                    STRING baz 1 [source_file: testcode]&#xa;                NAME y 1 [source_file: testcode]&#xa;&#xa;&#xa;Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;    VAR 1 [source_file: expected0]&#xa;        NAME x 1 [source_file: expected0]&#xa;    EXPR_RESULT 1 [source_file: expected0]&#xa;        ASSIGN 1 [source_file: expected0]&#xa;            NAME x 1 [source_file: expected0]&#xa;            CALL 1 [source_file: expected0]&#xa;                GETPROP 1 [source_file: expected0]&#xa;                    THIS 1 [source_file: expected0]&#xa;                    STRING foo 1 [source_file: expected0]&#xa;    EXPR_RESULT 1 [source_file: expected0]&#xa;        CALL 1 [source_file: expected0]&#xa;            GETPROP 1 [source_file: expected0]&#xa;                THIS 1 [source_file: expected0]&#xa;                STRING bar 1 [source_file: expected0]&#xa;    EXPR_RESULT 1 [source_file: expected0]&#xa;        NAME x 1 [source_file: expected0]&#xa;    EXPR_RESULT 1 [source_file: expected0]&#xa;        CALL 1 [source_file: expected0]&#xa;            GETPROP 1 [source_file: expected0]&#xa;                THIS 1 [source_file: expected0]&#xa;                STRING baz 1 [source_file: expected0]&#xa;            NAME x 1 [source_file: expected0]&#xa;&#xa;&#xa;Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME x 1 [source_file: testcode]&#xa;    EXPR_RESULT 1 [source_file: testcode]&#xa;        ASSIGN 1 [source_file: testcode]&#xa;            NAME x 1 [source_file: testcode]&#xa;            CALL 1 [source_file: testcode]&#xa;                GETPROP 1 [source_file: testcode]&#xa;                    THIS 1 [source_file: testcode]&#xa;                    STRING foo 1 [source_file: testcode]&#xa;    EXPR_RESULT 1 [source_file: testcode]&#xa;        CALL 1 [source_file: testcode]&#xa;            GETPROP 1 [source_file: testcode]&#xa;                THIS 1 [source_file: testcode]&#xa;                STRING bar 1 [source_file: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME y 1 [source_file: testcode]&#xa;    EXPR_RESULT 1 [source_file: testcode]&#xa;        ASSIGN 1 [source_file: testcode]&#xa;            NAME y 1 [source_file: testcode]&#xa;            NAME x 1 [source_file: testcode]&#xa;    EXPR_RESULT 1 [source_file: testcode]&#xa;        CALL 1 [source_file: testcode]&#xa;            GETPROP 1 [source_file: testcode]&#xa;                THIS 1 [source_file: testcode]&#xa;                STRING baz 1 [source_file: testcode]&#xa;            NAME y 1 [source_file: testcode]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: var x;x=this.foo();this.bar();x;this.baz(x)
Result:   var x;x=this.foo();this.bar();var y;y=x;this.baz(y)
Node tree inequality:
Tree1:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        VAR 1 [source_file: expected0]
            NAME x 1 [source_file: expected0]
        EXPR_RESULT 1 [source_file: expected0]
            ASSIGN 1 [source_file: expected0]
                NAME x 1 [source_file: expected0]
                CALL 1 [source_file: expected0]
                    GETPROP 1 [source_file: expected0]
                        THIS 1 [source_file: expected0]
                        STRING foo 1 [source_file: expected0]
        EXPR_RESULT 1 [source_file: expected0]
            CALL 1 [source_file: expected0]
                GETPROP 1 [source_file: expected0]
                    THIS 1 [source_file: expected0]
                    STRING bar 1 [source_file: expected0]
        EXPR_RESULT 1 [source_file: expected0]
            NAME x 1 [source_file: expected0]
        EXPR_RESULT 1 [source_file: expected0]
            CALL 1 [source_file: expected0]
                GETPROP 1 [source_file: expected0]
                    THIS 1 [source_file: expected0]
                    STRING baz 1 [source_file: expected0]
                NAME x 1 [source_file: expected0]


Tree2:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
        VAR 1 [source_file: testcode]
            NAME x 1 [source_file: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            ASSIGN 1 [source_file: testcode]
                NAME x 1 [source_file: testcode]
                CALL 1 [source_file: testcode]
                    GETPROP 1 [source_file: testcode]
                        THIS 1 [source_file: testcode]
                        STRING foo 1 [source_file: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            CALL 1 [source_file: testcode]
                GETPROP 1 [source_file: testcode]
                    THIS 1 [source_file: testcode]
                    STRING bar 1 [source_file: testcode]
        VAR 1 [source_file: testcode]
            NAME y 1 [source_file: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            ASSIGN 1 [source_file: testcode]
                NAME y 1 [source_file: testcode]
                NAME x 1 [source_file: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            CALL 1 [source_file: testcode]
                GETPROP 1 [source_file: testcode]
                    THIS 1 [source_file: testcode]
                    STRING baz 1 [source_file: testcode]
                NAME y 1 [source_file: testcode]


Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
    VAR 1 [source_file: expected0]
        NAME x 1 [source_file: expected0]
    EXPR_RESULT 1 [source_file: expected0]
        ASSIGN 1 [source_file: expected0]
            NAME x 1 [source_file: expected0]
            CALL 1 [source_file: expected0]
                GETPROP 1 [source_file: expected0]
                    THIS 1 [source_file: expected0]
                    STRING foo 1 [source_file: expected0]
    EXPR_RESULT 1 [source_file: expected0]
        CALL 1 [source_file: expected0]
            GETPROP 1 [source_file: expected0]
                THIS 1 [source_file: expected0]
                STRING bar 1 [source_file: expected0]
    EXPR_RESULT 1 [source_file: expected0]
        NAME x 1 [source_file: expected0]
    EXPR_RESULT 1 [source_file: expected0]
        CALL 1 [source_file: expected0]
            GETPROP 1 [source_file: expected0]
                THIS 1 [source_file: expected0]
                STRING baz 1 [source_file: expected0]
            NAME x 1 [source_file: expected0]


Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
    VAR 1 [source_file: testcode]
        NAME x 1 [source_file: testcode]
    EXPR_RESULT 1 [source_file: testcode]
        ASSIGN 1 [source_file: testcode]
            NAME x 1 [source_file: testcode]
            CALL 1 [source_file: testcode]
                GETPROP 1 [source_file: testcode]
                    THIS 1 [source_file: testcode]
                    STRING foo 1 [source_file: testcode]
    EXPR_RESULT 1 [source_file: testcode]
        CALL 1 [source_file: testcode]
            GETPROP 1 [source_file: testcode]
                THIS 1 [source_file: testcode]
                STRING bar 1 [source_file: testcode]
    VAR 1 [source_file: testcode]
        NAME y 1 [source_file: testcode]
    EXPR_RESULT 1 [source_file: testcode]
        ASSIGN 1 [source_file: testcode]
            NAME y 1 [source_file: testcode]
            NAME x 1 [source_file: testcode]
    EXPR_RESULT 1 [source_file: testcode]
        CALL 1 [source_file: testcode]
            GETPROP 1 [source_file: testcode]
                THIS 1 [source_file: testcode]
                STRING baz 1 [source_file: testcode]
            NAME y 1 [source_file: testcode]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineVariablesTest.testInlineAliases1d(InlineVariablesTest.java:575)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInlineAliases2" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInlineAliases2b" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInlineAliases2c" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInlineAliases2d" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInlineAliasesInLoop" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testNoInlineAliasesInLoop" time="0.003" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testNoInlineAliases1" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testNoInlineAliases1b" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testNoInlineAliases2" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testNoInlineAliases2b" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testNoInlineAliases3" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testNoInlineAliases3b" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testNoInlineAliases4" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testNoInlineAliases4b" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testNoInlineAliases5" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testNoInlineAliases5b" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testNoInlineAliases6" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testNoInlineAliases6b" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testNoInlineAliases7" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testNoInlineAliases7b" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testNoInlineAliases8" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testNoInlineAliases8b" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testSideEffectOrder" time="0.001">
    <failure message="&#xa;Expected: z=f(y.a,y)&#xa;Result:   var x=f(y.a,y);z=x&#xa;Node tree inequality:&#xa;Tree1:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;        EXPR_RESULT 1 [source_file: expected0]&#xa;            ASSIGN 1 [source_file: expected0]&#xa;                NAME z 1 [source_file: expected0]&#xa;                CALL 1 [free_call: 1] [source_file: expected0]&#xa;                    NAME f 1 [source_file: expected0]&#xa;                    GETPROP 1 [source_file: expected0]&#xa;                        NAME y 1 [source_file: expected0]&#xa;                        STRING a 1 [source_file: expected0]&#xa;                    NAME y 1 [source_file: expected0]&#xa;&#xa;&#xa;Tree2:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME x 1 [source_file: testcode]&#xa;                CALL 1 [free_call: 1] [source_file: testcode]&#xa;                    NAME f 1 [source_file: testcode]&#xa;                    GETPROP 1 [source_file: testcode]&#xa;                        NAME y 1 [source_file: testcode]&#xa;                        STRING a 1 [source_file: testcode]&#xa;                    NAME y 1 [source_file: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            ASSIGN 1 [source_file: testcode]&#xa;                NAME z 1 [source_file: testcode]&#xa;                NAME x 1 [source_file: testcode]&#xa;&#xa;&#xa;Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;    EXPR_RESULT 1 [source_file: expected0]&#xa;        ASSIGN 1 [source_file: expected0]&#xa;            NAME z 1 [source_file: expected0]&#xa;            CALL 1 [free_call: 1] [source_file: expected0]&#xa;                NAME f 1 [source_file: expected0]&#xa;                GETPROP 1 [source_file: expected0]&#xa;                    NAME y 1 [source_file: expected0]&#xa;                    STRING a 1 [source_file: expected0]&#xa;                NAME y 1 [source_file: expected0]&#xa;&#xa;&#xa;Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME x 1 [source_file: testcode]&#xa;            CALL 1 [free_call: 1] [source_file: testcode]&#xa;                NAME f 1 [source_file: testcode]&#xa;                GETPROP 1 [source_file: testcode]&#xa;                    NAME y 1 [source_file: testcode]&#xa;                    STRING a 1 [source_file: testcode]&#xa;                NAME y 1 [source_file: testcode]&#xa;    EXPR_RESULT 1 [source_file: testcode]&#xa;        ASSIGN 1 [source_file: testcode]&#xa;            NAME z 1 [source_file: testcode]&#xa;            NAME x 1 [source_file: testcode]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: z=f(y.a,y)
Result:   var x=f(y.a,y);z=x
Node tree inequality:
Tree1:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        EXPR_RESULT 1 [source_file: expected0]
            ASSIGN 1 [source_file: expected0]
                NAME z 1 [source_file: expected0]
                CALL 1 [free_call: 1] [source_file: expected0]
                    NAME f 1 [source_file: expected0]
                    GETPROP 1 [source_file: expected0]
                        NAME y 1 [source_file: expected0]
                        STRING a 1 [source_file: expected0]
                    NAME y 1 [source_file: expected0]


Tree2:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
        VAR 1 [source_file: testcode]
            NAME x 1 [source_file: testcode]
                CALL 1 [free_call: 1] [source_file: testcode]
                    NAME f 1 [source_file: testcode]
                    GETPROP 1 [source_file: testcode]
                        NAME y 1 [source_file: testcode]
                        STRING a 1 [source_file: testcode]
                    NAME y 1 [source_file: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            ASSIGN 1 [source_file: testcode]
                NAME z 1 [source_file: testcode]
                NAME x 1 [source_file: testcode]


Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
    EXPR_RESULT 1 [source_file: expected0]
        ASSIGN 1 [source_file: expected0]
            NAME z 1 [source_file: expected0]
            CALL 1 [free_call: 1] [source_file: expected0]
                NAME f 1 [source_file: expected0]
                GETPROP 1 [source_file: expected0]
                    NAME y 1 [source_file: expected0]
                    STRING a 1 [source_file: expected0]
                NAME y 1 [source_file: expected0]


Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
    VAR 1 [source_file: testcode]
        NAME x 1 [source_file: testcode]
            CALL 1 [free_call: 1] [source_file: testcode]
                NAME f 1 [source_file: testcode]
                GETPROP 1 [source_file: testcode]
                    NAME y 1 [source_file: testcode]
                    STRING a 1 [source_file: testcode]
                NAME y 1 [source_file: testcode]
    EXPR_RESULT 1 [source_file: testcode]
        ASSIGN 1 [source_file: testcode]
            NAME z 1 [source_file: testcode]
            NAME x 1 [source_file: testcode]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:489)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:466)
	at com.google.javascript.jscomp.InlineVariablesTest.testSideEffectOrder(InlineVariablesTest.java:732)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInlineParameterAlias1" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInlineParameterAlias2" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInlineFunctionAlias1a" time="0.002">
    <failure message="&#xa;Expected: var y=function f(x){};g();y();y()&#xa;Result:   function f(x){}var y=f;g();y();y()&#xa;Node tree inequality:&#xa;Tree1:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;        VAR 1 [source_file: expected0]&#xa;            NAME y 1 [source_file: expected0]&#xa;                FUNCTION f 1 [source_file: expected0]&#xa;                    NAME f 1 [source_file: expected0]&#xa;                    PARAM_LIST 1 [source_file: expected0]&#xa;                        NAME x 1 [source_file: expected0]&#xa;                    BLOCK 1 [source_file: expected0]&#xa;        EXPR_RESULT 1 [source_file: expected0]&#xa;            CALL 1 [free_call: 1] [source_file: expected0]&#xa;                NAME g 1 [source_file: expected0]&#xa;        EXPR_RESULT 1 [source_file: expected0]&#xa;            CALL 1 [free_call: 1] [source_file: expected0]&#xa;                NAME y 1 [source_file: expected0]&#xa;        EXPR_RESULT 1 [source_file: expected0]&#xa;            CALL 1 [free_call: 1] [source_file: expected0]&#xa;                NAME y 1 [source_file: expected0]&#xa;&#xa;&#xa;Tree2:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;        FUNCTION f 1 [source_file: testcode]&#xa;            NAME f 1 [source_file: testcode]&#xa;            PARAM_LIST 1 [source_file: testcode]&#xa;                NAME x 1 [source_file: testcode]&#xa;            BLOCK 1 [source_file: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME y 1 [source_file: testcode]&#xa;                NAME f 1 [source_file: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            CALL 1 [free_call: 1] [source_file: testcode]&#xa;                NAME g 1 [source_file: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            CALL 1 [free_call: 1] [source_file: testcode]&#xa;                NAME y 1 [source_file: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            CALL 1 [free_call: 1] [source_file: testcode]&#xa;                NAME y 1 [source_file: testcode]&#xa;&#xa;&#xa;Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;    VAR 1 [source_file: expected0]&#xa;        NAME y 1 [source_file: expected0]&#xa;            FUNCTION f 1 [source_file: expected0]&#xa;                NAME f 1 [source_file: expected0]&#xa;                PARAM_LIST 1 [source_file: expected0]&#xa;                    NAME x 1 [source_file: expected0]&#xa;                BLOCK 1 [source_file: expected0]&#xa;    EXPR_RESULT 1 [source_file: expected0]&#xa;        CALL 1 [free_call: 1] [source_file: expected0]&#xa;            NAME g 1 [source_file: expected0]&#xa;    EXPR_RESULT 1 [source_file: expected0]&#xa;        CALL 1 [free_call: 1] [source_file: expected0]&#xa;            NAME y 1 [source_file: expected0]&#xa;    EXPR_RESULT 1 [source_file: expected0]&#xa;        CALL 1 [free_call: 1] [source_file: expected0]&#xa;            NAME y 1 [source_file: expected0]&#xa;&#xa;&#xa;Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;    FUNCTION f 1 [source_file: testcode]&#xa;        NAME f 1 [source_file: testcode]&#xa;        PARAM_LIST 1 [source_file: testcode]&#xa;            NAME x 1 [source_file: testcode]&#xa;        BLOCK 1 [source_file: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME y 1 [source_file: testcode]&#xa;            NAME f 1 [source_file: testcode]&#xa;    EXPR_RESULT 1 [source_file: testcode]&#xa;        CALL 1 [free_call: 1] [source_file: testcode]&#xa;            NAME g 1 [source_file: testcode]&#xa;    EXPR_RESULT 1 [source_file: testcode]&#xa;        CALL 1 [free_call: 1] [source_file: testcode]&#xa;            NAME y 1 [source_file: testcode]&#xa;    EXPR_RESULT 1 [source_file: testcode]&#xa;        CALL 1 [free_call: 1] [source_file: testcode]&#xa;            NAME y 1 [source_file: testcode]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: var y=function f(x){};g();y();y()
Result:   function f(x){}var y=f;g();y();y()
Node tree inequality:
Tree1:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        VAR 1 [source_file: expected0]
            NAME y 1 [source_file: expected0]
                FUNCTION f 1 [source_file: expected0]
                    NAME f 1 [source_file: expected0]
                    PARAM_LIST 1 [source_file: expected0]
                        NAME x 1 [source_file: expected0]
                    BLOCK 1 [source_file: expected0]
        EXPR_RESULT 1 [source_file: expected0]
            CALL 1 [free_call: 1] [source_file: expected0]
                NAME g 1 [source_file: expected0]
        EXPR_RESULT 1 [source_file: expected0]
            CALL 1 [free_call: 1] [source_file: expected0]
                NAME y 1 [source_file: expected0]
        EXPR_RESULT 1 [source_file: expected0]
            CALL 1 [free_call: 1] [source_file: expected0]
                NAME y 1 [source_file: expected0]


Tree2:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
        FUNCTION f 1 [source_file: testcode]
            NAME f 1 [source_file: testcode]
            PARAM_LIST 1 [source_file: testcode]
                NAME x 1 [source_file: testcode]
            BLOCK 1 [source_file: testcode]
        VAR 1 [source_file: testcode]
            NAME y 1 [source_file: testcode]
                NAME f 1 [source_file: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            CALL 1 [free_call: 1] [source_file: testcode]
                NAME g 1 [source_file: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            CALL 1 [free_call: 1] [source_file: testcode]
                NAME y 1 [source_file: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            CALL 1 [free_call: 1] [source_file: testcode]
                NAME y 1 [source_file: testcode]


Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
    VAR 1 [source_file: expected0]
        NAME y 1 [source_file: expected0]
            FUNCTION f 1 [source_file: expected0]
                NAME f 1 [source_file: expected0]
                PARAM_LIST 1 [source_file: expected0]
                    NAME x 1 [source_file: expected0]
                BLOCK 1 [source_file: expected0]
    EXPR_RESULT 1 [source_file: expected0]
        CALL 1 [free_call: 1] [source_file: expected0]
            NAME g 1 [source_file: expected0]
    EXPR_RESULT 1 [source_file: expected0]
        CALL 1 [free_call: 1] [source_file: expected0]
            NAME y 1 [source_file: expected0]
    EXPR_RESULT 1 [source_file: expected0]
        CALL 1 [free_call: 1] [source_file: expected0]
            NAME y 1 [source_file: expected0]


Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
    FUNCTION f 1 [source_file: testcode]
        NAME f 1 [source_file: testcode]
        PARAM_LIST 1 [source_file: testcode]
            NAME x 1 [source_file: testcode]
        BLOCK 1 [source_file: testcode]
    VAR 1 [source_file: testcode]
        NAME y 1 [source_file: testcode]
            NAME f 1 [source_file: testcode]
    EXPR_RESULT 1 [source_file: testcode]
        CALL 1 [free_call: 1] [source_file: testcode]
            NAME g 1 [source_file: testcode]
    EXPR_RESULT 1 [source_file: testcode]
        CALL 1 [free_call: 1] [source_file: testcode]
            NAME y 1 [source_file: testcode]
    EXPR_RESULT 1 [source_file: testcode]
        CALL 1 [free_call: 1] [source_file: testcode]
            NAME y 1 [source_file: testcode]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineVariablesTest.testInlineFunctionAlias1a(InlineVariablesTest.java:769)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInlineFunctionAlias1b" time="0.002">
    <failure message="&#xa;Expected: function f(x){}f;g();f();f()&#xa;Result:   function f(x){}f;var y=f;g();y();y()&#xa;Node tree inequality:&#xa;Tree1:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;        FUNCTION f 1 [source_file: expected0]&#xa;            NAME f 1 [source_file: expected0]&#xa;            PARAM_LIST 1 [source_file: expected0]&#xa;                NAME x 1 [source_file: expected0]&#xa;            BLOCK 1 [source_file: expected0]&#xa;        EMPTY 1 [source_file: expected0]&#xa;        EXPR_RESULT 1 [source_file: expected0]&#xa;            NAME f 1 [source_file: expected0]&#xa;        EXPR_RESULT 1 [source_file: expected0]&#xa;            CALL 1 [free_call: 1] [source_file: expected0]&#xa;                NAME g 1 [source_file: expected0]&#xa;        EXPR_RESULT 1 [source_file: expected0]&#xa;            CALL 1 [free_call: 1] [source_file: expected0]&#xa;                NAME f 1 [source_file: expected0]&#xa;        EXPR_RESULT 1 [source_file: expected0]&#xa;            CALL 1 [free_call: 1] [source_file: expected0]&#xa;                NAME f 1 [source_file: expected0]&#xa;&#xa;&#xa;Tree2:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;        FUNCTION f 1 [source_file: testcode]&#xa;            NAME f 1 [source_file: testcode]&#xa;            PARAM_LIST 1 [source_file: testcode]&#xa;                NAME x 1 [source_file: testcode]&#xa;            BLOCK 1 [source_file: testcode]&#xa;        EMPTY 1 [source_file: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            NAME f 1 [source_file: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME y 1 [source_file: testcode]&#xa;                NAME f 1 [source_file: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            CALL 1 [free_call: 1] [source_file: testcode]&#xa;                NAME g 1 [source_file: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            CALL 1 [free_call: 1] [source_file: testcode]&#xa;                NAME y 1 [source_file: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            CALL 1 [free_call: 1] [source_file: testcode]&#xa;                NAME y 1 [source_file: testcode]&#xa;&#xa;&#xa;Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;    FUNCTION f 1 [source_file: expected0]&#xa;        NAME f 1 [source_file: expected0]&#xa;        PARAM_LIST 1 [source_file: expected0]&#xa;            NAME x 1 [source_file: expected0]&#xa;        BLOCK 1 [source_file: expected0]&#xa;    EMPTY 1 [source_file: expected0]&#xa;    EXPR_RESULT 1 [source_file: expected0]&#xa;        NAME f 1 [source_file: expected0]&#xa;    EXPR_RESULT 1 [source_file: expected0]&#xa;        CALL 1 [free_call: 1] [source_file: expected0]&#xa;            NAME g 1 [source_file: expected0]&#xa;    EXPR_RESULT 1 [source_file: expected0]&#xa;        CALL 1 [free_call: 1] [source_file: expected0]&#xa;            NAME f 1 [source_file: expected0]&#xa;    EXPR_RESULT 1 [source_file: expected0]&#xa;        CALL 1 [free_call: 1] [source_file: expected0]&#xa;            NAME f 1 [source_file: expected0]&#xa;&#xa;&#xa;Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;    FUNCTION f 1 [source_file: testcode]&#xa;        NAME f 1 [source_file: testcode]&#xa;        PARAM_LIST 1 [source_file: testcode]&#xa;            NAME x 1 [source_file: testcode]&#xa;        BLOCK 1 [source_file: testcode]&#xa;    EMPTY 1 [source_file: testcode]&#xa;    EXPR_RESULT 1 [source_file: testcode]&#xa;        NAME f 1 [source_file: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME y 1 [source_file: testcode]&#xa;            NAME f 1 [source_file: testcode]&#xa;    EXPR_RESULT 1 [source_file: testcode]&#xa;        CALL 1 [free_call: 1] [source_file: testcode]&#xa;            NAME g 1 [source_file: testcode]&#xa;    EXPR_RESULT 1 [source_file: testcode]&#xa;        CALL 1 [free_call: 1] [source_file: testcode]&#xa;            NAME y 1 [source_file: testcode]&#xa;    EXPR_RESULT 1 [source_file: testcode]&#xa;        CALL 1 [free_call: 1] [source_file: testcode]&#xa;            NAME y 1 [source_file: testcode]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: function f(x){}f;g();f();f()
Result:   function f(x){}f;var y=f;g();y();y()
Node tree inequality:
Tree1:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        FUNCTION f 1 [source_file: expected0]
            NAME f 1 [source_file: expected0]
            PARAM_LIST 1 [source_file: expected0]
                NAME x 1 [source_file: expected0]
            BLOCK 1 [source_file: expected0]
        EMPTY 1 [source_file: expected0]
        EXPR_RESULT 1 [source_file: expected0]
            NAME f 1 [source_file: expected0]
        EXPR_RESULT 1 [source_file: expected0]
            CALL 1 [free_call: 1] [source_file: expected0]
                NAME g 1 [source_file: expected0]
        EXPR_RESULT 1 [source_file: expected0]
            CALL 1 [free_call: 1] [source_file: expected0]
                NAME f 1 [source_file: expected0]
        EXPR_RESULT 1 [source_file: expected0]
            CALL 1 [free_call: 1] [source_file: expected0]
                NAME f 1 [source_file: expected0]


Tree2:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
        FUNCTION f 1 [source_file: testcode]
            NAME f 1 [source_file: testcode]
            PARAM_LIST 1 [source_file: testcode]
                NAME x 1 [source_file: testcode]
            BLOCK 1 [source_file: testcode]
        EMPTY 1 [source_file: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            NAME f 1 [source_file: testcode]
        VAR 1 [source_file: testcode]
            NAME y 1 [source_file: testcode]
                NAME f 1 [source_file: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            CALL 1 [free_call: 1] [source_file: testcode]
                NAME g 1 [source_file: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            CALL 1 [free_call: 1] [source_file: testcode]
                NAME y 1 [source_file: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            CALL 1 [free_call: 1] [source_file: testcode]
                NAME y 1 [source_file: testcode]


Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
    FUNCTION f 1 [source_file: expected0]
        NAME f 1 [source_file: expected0]
        PARAM_LIST 1 [source_file: expected0]
            NAME x 1 [source_file: expected0]
        BLOCK 1 [source_file: expected0]
    EMPTY 1 [source_file: expected0]
    EXPR_RESULT 1 [source_file: expected0]
        NAME f 1 [source_file: expected0]
    EXPR_RESULT 1 [source_file: expected0]
        CALL 1 [free_call: 1] [source_file: expected0]
            NAME g 1 [source_file: expected0]
    EXPR_RESULT 1 [source_file: expected0]
        CALL 1 [free_call: 1] [source_file: expected0]
            NAME f 1 [source_file: expected0]
    EXPR_RESULT 1 [source_file: expected0]
        CALL 1 [free_call: 1] [source_file: expected0]
            NAME f 1 [source_file: expected0]


Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
    FUNCTION f 1 [source_file: testcode]
        NAME f 1 [source_file: testcode]
        PARAM_LIST 1 [source_file: testcode]
            NAME x 1 [source_file: testcode]
        BLOCK 1 [source_file: testcode]
    EMPTY 1 [source_file: testcode]
    EXPR_RESULT 1 [source_file: testcode]
        NAME f 1 [source_file: testcode]
    VAR 1 [source_file: testcode]
        NAME y 1 [source_file: testcode]
            NAME f 1 [source_file: testcode]
    EXPR_RESULT 1 [source_file: testcode]
        CALL 1 [free_call: 1] [source_file: testcode]
            NAME g 1 [source_file: testcode]
    EXPR_RESULT 1 [source_file: testcode]
        CALL 1 [free_call: 1] [source_file: testcode]
            NAME y 1 [source_file: testcode]
    EXPR_RESULT 1 [source_file: testcode]
        CALL 1 [free_call: 1] [source_file: testcode]
            NAME y 1 [source_file: testcode]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineVariablesTest.testInlineFunctionAlias1b(InlineVariablesTest.java:781)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInlineFunctionAlias2a" time="0.002">
    <failure message="&#xa;Expected: var y;y=function f(x){};g();y();y()&#xa;Result:   function f(x){}var y;y=f;g();y();y()&#xa;Node tree inequality:&#xa;Tree1:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;        VAR 1 [source_file: expected0]&#xa;            NAME y 1 [source_file: expected0]&#xa;        EXPR_RESULT 1 [source_file: expected0]&#xa;            ASSIGN 1 [source_file: expected0]&#xa;                NAME y 1 [source_file: expected0]&#xa;                FUNCTION f 1 [source_file: expected0]&#xa;                    NAME f 1 [source_file: expected0]&#xa;                    PARAM_LIST 1 [source_file: expected0]&#xa;                        NAME x 1 [source_file: expected0]&#xa;                    BLOCK 1 [source_file: expected0]&#xa;        EXPR_RESULT 1 [source_file: expected0]&#xa;            CALL 1 [free_call: 1] [source_file: expected0]&#xa;                NAME g 1 [source_file: expected0]&#xa;        EXPR_RESULT 1 [source_file: expected0]&#xa;            CALL 1 [free_call: 1] [source_file: expected0]&#xa;                NAME y 1 [source_file: expected0]&#xa;        EXPR_RESULT 1 [source_file: expected0]&#xa;            CALL 1 [free_call: 1] [source_file: expected0]&#xa;                NAME y 1 [source_file: expected0]&#xa;&#xa;&#xa;Tree2:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;        FUNCTION f 1 [source_file: testcode]&#xa;            NAME f 1 [source_file: testcode]&#xa;            PARAM_LIST 1 [source_file: testcode]&#xa;                NAME x 1 [source_file: testcode]&#xa;            BLOCK 1 [source_file: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME y 1 [source_file: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            ASSIGN 1 [source_file: testcode]&#xa;                NAME y 1 [source_file: testcode]&#xa;                NAME f 1 [source_file: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            CALL 1 [free_call: 1] [source_file: testcode]&#xa;                NAME g 1 [source_file: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            CALL 1 [free_call: 1] [source_file: testcode]&#xa;                NAME y 1 [source_file: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            CALL 1 [free_call: 1] [source_file: testcode]&#xa;                NAME y 1 [source_file: testcode]&#xa;&#xa;&#xa;Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;    VAR 1 [source_file: expected0]&#xa;        NAME y 1 [source_file: expected0]&#xa;    EXPR_RESULT 1 [source_file: expected0]&#xa;        ASSIGN 1 [source_file: expected0]&#xa;            NAME y 1 [source_file: expected0]&#xa;            FUNCTION f 1 [source_file: expected0]&#xa;                NAME f 1 [source_file: expected0]&#xa;                PARAM_LIST 1 [source_file: expected0]&#xa;                    NAME x 1 [source_file: expected0]&#xa;                BLOCK 1 [source_file: expected0]&#xa;    EXPR_RESULT 1 [source_file: expected0]&#xa;        CALL 1 [free_call: 1] [source_file: expected0]&#xa;            NAME g 1 [source_file: expected0]&#xa;    EXPR_RESULT 1 [source_file: expected0]&#xa;        CALL 1 [free_call: 1] [source_file: expected0]&#xa;            NAME y 1 [source_file: expected0]&#xa;    EXPR_RESULT 1 [source_file: expected0]&#xa;        CALL 1 [free_call: 1] [source_file: expected0]&#xa;            NAME y 1 [source_file: expected0]&#xa;&#xa;&#xa;Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;    FUNCTION f 1 [source_file: testcode]&#xa;        NAME f 1 [source_file: testcode]&#xa;        PARAM_LIST 1 [source_file: testcode]&#xa;            NAME x 1 [source_file: testcode]&#xa;        BLOCK 1 [source_file: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME y 1 [source_file: testcode]&#xa;    EXPR_RESULT 1 [source_file: testcode]&#xa;        ASSIGN 1 [source_file: testcode]&#xa;            NAME y 1 [source_file: testcode]&#xa;            NAME f 1 [source_file: testcode]&#xa;    EXPR_RESULT 1 [source_file: testcode]&#xa;        CALL 1 [free_call: 1] [source_file: testcode]&#xa;            NAME g 1 [source_file: testcode]&#xa;    EXPR_RESULT 1 [source_file: testcode]&#xa;        CALL 1 [free_call: 1] [source_file: testcode]&#xa;            NAME y 1 [source_file: testcode]&#xa;    EXPR_RESULT 1 [source_file: testcode]&#xa;        CALL 1 [free_call: 1] [source_file: testcode]&#xa;            NAME y 1 [source_file: testcode]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: var y;y=function f(x){};g();y();y()
Result:   function f(x){}var y;y=f;g();y();y()
Node tree inequality:
Tree1:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        VAR 1 [source_file: expected0]
            NAME y 1 [source_file: expected0]
        EXPR_RESULT 1 [source_file: expected0]
            ASSIGN 1 [source_file: expected0]
                NAME y 1 [source_file: expected0]
                FUNCTION f 1 [source_file: expected0]
                    NAME f 1 [source_file: expected0]
                    PARAM_LIST 1 [source_file: expected0]
                        NAME x 1 [source_file: expected0]
                    BLOCK 1 [source_file: expected0]
        EXPR_RESULT 1 [source_file: expected0]
            CALL 1 [free_call: 1] [source_file: expected0]
                NAME g 1 [source_file: expected0]
        EXPR_RESULT 1 [source_file: expected0]
            CALL 1 [free_call: 1] [source_file: expected0]
                NAME y 1 [source_file: expected0]
        EXPR_RESULT 1 [source_file: expected0]
            CALL 1 [free_call: 1] [source_file: expected0]
                NAME y 1 [source_file: expected0]


Tree2:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
        FUNCTION f 1 [source_file: testcode]
            NAME f 1 [source_file: testcode]
            PARAM_LIST 1 [source_file: testcode]
                NAME x 1 [source_file: testcode]
            BLOCK 1 [source_file: testcode]
        VAR 1 [source_file: testcode]
            NAME y 1 [source_file: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            ASSIGN 1 [source_file: testcode]
                NAME y 1 [source_file: testcode]
                NAME f 1 [source_file: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            CALL 1 [free_call: 1] [source_file: testcode]
                NAME g 1 [source_file: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            CALL 1 [free_call: 1] [source_file: testcode]
                NAME y 1 [source_file: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            CALL 1 [free_call: 1] [source_file: testcode]
                NAME y 1 [source_file: testcode]


Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
    VAR 1 [source_file: expected0]
        NAME y 1 [source_file: expected0]
    EXPR_RESULT 1 [source_file: expected0]
        ASSIGN 1 [source_file: expected0]
            NAME y 1 [source_file: expected0]
            FUNCTION f 1 [source_file: expected0]
                NAME f 1 [source_file: expected0]
                PARAM_LIST 1 [source_file: expected0]
                    NAME x 1 [source_file: expected0]
                BLOCK 1 [source_file: expected0]
    EXPR_RESULT 1 [source_file: expected0]
        CALL 1 [free_call: 1] [source_file: expected0]
            NAME g 1 [source_file: expected0]
    EXPR_RESULT 1 [source_file: expected0]
        CALL 1 [free_call: 1] [source_file: expected0]
            NAME y 1 [source_file: expected0]
    EXPR_RESULT 1 [source_file: expected0]
        CALL 1 [free_call: 1] [source_file: expected0]
            NAME y 1 [source_file: expected0]


Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
    FUNCTION f 1 [source_file: testcode]
        NAME f 1 [source_file: testcode]
        PARAM_LIST 1 [source_file: testcode]
            NAME x 1 [source_file: testcode]
        BLOCK 1 [source_file: testcode]
    VAR 1 [source_file: testcode]
        NAME y 1 [source_file: testcode]
    EXPR_RESULT 1 [source_file: testcode]
        ASSIGN 1 [source_file: testcode]
            NAME y 1 [source_file: testcode]
            NAME f 1 [source_file: testcode]
    EXPR_RESULT 1 [source_file: testcode]
        CALL 1 [free_call: 1] [source_file: testcode]
            NAME g 1 [source_file: testcode]
    EXPR_RESULT 1 [source_file: testcode]
        CALL 1 [free_call: 1] [source_file: testcode]
            NAME y 1 [source_file: testcode]
    EXPR_RESULT 1 [source_file: testcode]
        CALL 1 [free_call: 1] [source_file: testcode]
            NAME y 1 [source_file: testcode]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineVariablesTest.testInlineFunctionAlias2a(InlineVariablesTest.java:793)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInlineFunctionAlias2b" time="0.002">
    <failure message="&#xa;Expected: function f(x){}f;f;g();f();f()&#xa;Result:   function f(x){}f;var y;y=f;g();y();y()&#xa;Node tree inequality:&#xa;Tree1:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;        FUNCTION f 1 [source_file: expected0]&#xa;            NAME f 1 [source_file: expected0]&#xa;            PARAM_LIST 1 [source_file: expected0]&#xa;                NAME x 1 [source_file: expected0]&#xa;            BLOCK 1 [source_file: expected0]&#xa;        EMPTY 1 [source_file: expected0]&#xa;        EXPR_RESULT 1 [source_file: expected0]&#xa;            NAME f 1 [source_file: expected0]&#xa;        EXPR_RESULT 1 [source_file: expected0]&#xa;            NAME f 1 [source_file: expected0]&#xa;        EXPR_RESULT 1 [source_file: expected0]&#xa;            CALL 1 [free_call: 1] [source_file: expected0]&#xa;                NAME g 1 [source_file: expected0]&#xa;        EXPR_RESULT 1 [source_file: expected0]&#xa;            CALL 1 [free_call: 1] [source_file: expected0]&#xa;                NAME f 1 [source_file: expected0]&#xa;        EXPR_RESULT 1 [source_file: expected0]&#xa;            CALL 1 [free_call: 1] [source_file: expected0]&#xa;                NAME f 1 [source_file: expected0]&#xa;&#xa;&#xa;Tree2:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;        FUNCTION f 1 [source_file: testcode]&#xa;            NAME f 1 [source_file: testcode]&#xa;            PARAM_LIST 1 [source_file: testcode]&#xa;                NAME x 1 [source_file: testcode]&#xa;            BLOCK 1 [source_file: testcode]&#xa;        EMPTY 1 [source_file: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            NAME f 1 [source_file: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME y 1 [source_file: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            ASSIGN 1 [source_file: testcode]&#xa;                NAME y 1 [source_file: testcode]&#xa;                NAME f 1 [source_file: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            CALL 1 [free_call: 1] [source_file: testcode]&#xa;                NAME g 1 [source_file: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            CALL 1 [free_call: 1] [source_file: testcode]&#xa;                NAME y 1 [source_file: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            CALL 1 [free_call: 1] [source_file: testcode]&#xa;                NAME y 1 [source_file: testcode]&#xa;&#xa;&#xa;Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;    FUNCTION f 1 [source_file: expected0]&#xa;        NAME f 1 [source_file: expected0]&#xa;        PARAM_LIST 1 [source_file: expected0]&#xa;            NAME x 1 [source_file: expected0]&#xa;        BLOCK 1 [source_file: expected0]&#xa;    EMPTY 1 [source_file: expected0]&#xa;    EXPR_RESULT 1 [source_file: expected0]&#xa;        NAME f 1 [source_file: expected0]&#xa;    EXPR_RESULT 1 [source_file: expected0]&#xa;        NAME f 1 [source_file: expected0]&#xa;    EXPR_RESULT 1 [source_file: expected0]&#xa;        CALL 1 [free_call: 1] [source_file: expected0]&#xa;            NAME g 1 [source_file: expected0]&#xa;    EXPR_RESULT 1 [source_file: expected0]&#xa;        CALL 1 [free_call: 1] [source_file: expected0]&#xa;            NAME f 1 [source_file: expected0]&#xa;    EXPR_RESULT 1 [source_file: expected0]&#xa;        CALL 1 [free_call: 1] [source_file: expected0]&#xa;            NAME f 1 [source_file: expected0]&#xa;&#xa;&#xa;Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;    FUNCTION f 1 [source_file: testcode]&#xa;        NAME f 1 [source_file: testcode]&#xa;        PARAM_LIST 1 [source_file: testcode]&#xa;            NAME x 1 [source_file: testcode]&#xa;        BLOCK 1 [source_file: testcode]&#xa;    EMPTY 1 [source_file: testcode]&#xa;    EXPR_RESULT 1 [source_file: testcode]&#xa;        NAME f 1 [source_file: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME y 1 [source_file: testcode]&#xa;    EXPR_RESULT 1 [source_file: testcode]&#xa;        ASSIGN 1 [source_file: testcode]&#xa;            NAME y 1 [source_file: testcode]&#xa;            NAME f 1 [source_file: testcode]&#xa;    EXPR_RESULT 1 [source_file: testcode]&#xa;        CALL 1 [free_call: 1] [source_file: testcode]&#xa;            NAME g 1 [source_file: testcode]&#xa;    EXPR_RESULT 1 [source_file: testcode]&#xa;        CALL 1 [free_call: 1] [source_file: testcode]&#xa;            NAME y 1 [source_file: testcode]&#xa;    EXPR_RESULT 1 [source_file: testcode]&#xa;        CALL 1 [free_call: 1] [source_file: testcode]&#xa;            NAME y 1 [source_file: testcode]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: function f(x){}f;f;g();f();f()
Result:   function f(x){}f;var y;y=f;g();y();y()
Node tree inequality:
Tree1:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        FUNCTION f 1 [source_file: expected0]
            NAME f 1 [source_file: expected0]
            PARAM_LIST 1 [source_file: expected0]
                NAME x 1 [source_file: expected0]
            BLOCK 1 [source_file: expected0]
        EMPTY 1 [source_file: expected0]
        EXPR_RESULT 1 [source_file: expected0]
            NAME f 1 [source_file: expected0]
        EXPR_RESULT 1 [source_file: expected0]
            NAME f 1 [source_file: expected0]
        EXPR_RESULT 1 [source_file: expected0]
            CALL 1 [free_call: 1] [source_file: expected0]
                NAME g 1 [source_file: expected0]
        EXPR_RESULT 1 [source_file: expected0]
            CALL 1 [free_call: 1] [source_file: expected0]
                NAME f 1 [source_file: expected0]
        EXPR_RESULT 1 [source_file: expected0]
            CALL 1 [free_call: 1] [source_file: expected0]
                NAME f 1 [source_file: expected0]


Tree2:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
        FUNCTION f 1 [source_file: testcode]
            NAME f 1 [source_file: testcode]
            PARAM_LIST 1 [source_file: testcode]
                NAME x 1 [source_file: testcode]
            BLOCK 1 [source_file: testcode]
        EMPTY 1 [source_file: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            NAME f 1 [source_file: testcode]
        VAR 1 [source_file: testcode]
            NAME y 1 [source_file: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            ASSIGN 1 [source_file: testcode]
                NAME y 1 [source_file: testcode]
                NAME f 1 [source_file: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            CALL 1 [free_call: 1] [source_file: testcode]
                NAME g 1 [source_file: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            CALL 1 [free_call: 1] [source_file: testcode]
                NAME y 1 [source_file: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            CALL 1 [free_call: 1] [source_file: testcode]
                NAME y 1 [source_file: testcode]


Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
    FUNCTION f 1 [source_file: expected0]
        NAME f 1 [source_file: expected0]
        PARAM_LIST 1 [source_file: expected0]
            NAME x 1 [source_file: expected0]
        BLOCK 1 [source_file: expected0]
    EMPTY 1 [source_file: expected0]
    EXPR_RESULT 1 [source_file: expected0]
        NAME f 1 [source_file: expected0]
    EXPR_RESULT 1 [source_file: expected0]
        NAME f 1 [source_file: expected0]
    EXPR_RESULT 1 [source_file: expected0]
        CALL 1 [free_call: 1] [source_file: expected0]
            NAME g 1 [source_file: expected0]
    EXPR_RESULT 1 [source_file: expected0]
        CALL 1 [free_call: 1] [source_file: expected0]
            NAME f 1 [source_file: expected0]
    EXPR_RESULT 1 [source_file: expected0]
        CALL 1 [free_call: 1] [source_file: expected0]
            NAME f 1 [source_file: expected0]


Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
    FUNCTION f 1 [source_file: testcode]
        NAME f 1 [source_file: testcode]
        PARAM_LIST 1 [source_file: testcode]
            NAME x 1 [source_file: testcode]
        BLOCK 1 [source_file: testcode]
    EMPTY 1 [source_file: testcode]
    EXPR_RESULT 1 [source_file: testcode]
        NAME f 1 [source_file: testcode]
    VAR 1 [source_file: testcode]
        NAME y 1 [source_file: testcode]
    EXPR_RESULT 1 [source_file: testcode]
        ASSIGN 1 [source_file: testcode]
            NAME y 1 [source_file: testcode]
            NAME f 1 [source_file: testcode]
    EXPR_RESULT 1 [source_file: testcode]
        CALL 1 [free_call: 1] [source_file: testcode]
            NAME g 1 [source_file: testcode]
    EXPR_RESULT 1 [source_file: testcode]
        CALL 1 [free_call: 1] [source_file: testcode]
            NAME y 1 [source_file: testcode]
    EXPR_RESULT 1 [source_file: testcode]
        CALL 1 [free_call: 1] [source_file: testcode]
            NAME y 1 [source_file: testcode]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineVariablesTest.testInlineFunctionAlias2b(InlineVariablesTest.java:805)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInlineCatchAlias1" time="0.001">
    <failure message="&#xa;Expected: try{}catch(e){g();e;e}&#xa;Result:   try{}catch(e){var y=e;g();y;y}&#xa;Node tree inequality:&#xa;Tree1:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;        TRY 1 [source_file: expected0]&#xa;            BLOCK 1 [source_file: expected0]&#xa;            BLOCK 1 [source_file: expected0]&#xa;                CATCH 1 [source_file: expected0]&#xa;                    NAME e 1 [source_file: expected0]&#xa;                    BLOCK 1 [source_file: expected0]&#xa;                        EXPR_RESULT 1 [source_file: expected0]&#xa;                            CALL 1 [free_call: 1] [source_file: expected0]&#xa;                                NAME g 1 [source_file: expected0]&#xa;                        EXPR_RESULT 1 [source_file: expected0]&#xa;                            NAME e 1 [source_file: expected0]&#xa;                        EXPR_RESULT 1 [source_file: expected0]&#xa;                            NAME e 1 [source_file: expected0]&#xa;&#xa;&#xa;Tree2:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;        TRY 1 [source_file: testcode]&#xa;            BLOCK 1 [source_file: testcode]&#xa;            BLOCK 1 [source_file: testcode]&#xa;                CATCH 1 [source_file: testcode]&#xa;                    NAME e 1 [source_file: testcode]&#xa;                    BLOCK 1 [source_file: testcode]&#xa;                        VAR 1 [source_file: testcode]&#xa;                            NAME y 1 [source_file: testcode]&#xa;                                NAME e 1 [source_file: testcode]&#xa;                        EXPR_RESULT 1 [source_file: testcode]&#xa;                            CALL 1 [free_call: 1] [source_file: testcode]&#xa;                                NAME g 1 [source_file: testcode]&#xa;                        EXPR_RESULT 1 [source_file: testcode]&#xa;                            NAME y 1 [source_file: testcode]&#xa;                        EXPR_RESULT 1 [source_file: testcode]&#xa;                            NAME y 1 [source_file: testcode]&#xa;&#xa;&#xa;Subtree1: BLOCK 1 [source_file: expected0]&#xa;    EXPR_RESULT 1 [source_file: expected0]&#xa;        CALL 1 [free_call: 1] [source_file: expected0]&#xa;            NAME g 1 [source_file: expected0]&#xa;    EXPR_RESULT 1 [source_file: expected0]&#xa;        NAME e 1 [source_file: expected0]&#xa;    EXPR_RESULT 1 [source_file: expected0]&#xa;        NAME e 1 [source_file: expected0]&#xa;&#xa;&#xa;Subtree2: BLOCK 1 [source_file: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME y 1 [source_file: testcode]&#xa;            NAME e 1 [source_file: testcode]&#xa;    EXPR_RESULT 1 [source_file: testcode]&#xa;        CALL 1 [free_call: 1] [source_file: testcode]&#xa;            NAME g 1 [source_file: testcode]&#xa;    EXPR_RESULT 1 [source_file: testcode]&#xa;        NAME y 1 [source_file: testcode]&#xa;    EXPR_RESULT 1 [source_file: testcode]&#xa;        NAME y 1 [source_file: testcode]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: try{}catch(e){g();e;e}
Result:   try{}catch(e){var y=e;g();y;y}
Node tree inequality:
Tree1:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        TRY 1 [source_file: expected0]
            BLOCK 1 [source_file: expected0]
            BLOCK 1 [source_file: expected0]
                CATCH 1 [source_file: expected0]
                    NAME e 1 [source_file: expected0]
                    BLOCK 1 [source_file: expected0]
                        EXPR_RESULT 1 [source_file: expected0]
                            CALL 1 [free_call: 1] [source_file: expected0]
                                NAME g 1 [source_file: expected0]
                        EXPR_RESULT 1 [source_file: expected0]
                            NAME e 1 [source_file: expected0]
                        EXPR_RESULT 1 [source_file: expected0]
                            NAME e 1 [source_file: expected0]


Tree2:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
        TRY 1 [source_file: testcode]
            BLOCK 1 [source_file: testcode]
            BLOCK 1 [source_file: testcode]
                CATCH 1 [source_file: testcode]
                    NAME e 1 [source_file: testcode]
                    BLOCK 1 [source_file: testcode]
                        VAR 1 [source_file: testcode]
                            NAME y 1 [source_file: testcode]
                                NAME e 1 [source_file: testcode]
                        EXPR_RESULT 1 [source_file: testcode]
                            CALL 1 [free_call: 1] [source_file: testcode]
                                NAME g 1 [source_file: testcode]
                        EXPR_RESULT 1 [source_file: testcode]
                            NAME y 1 [source_file: testcode]
                        EXPR_RESULT 1 [source_file: testcode]
                            NAME y 1 [source_file: testcode]


Subtree1: BLOCK 1 [source_file: expected0]
    EXPR_RESULT 1 [source_file: expected0]
        CALL 1 [free_call: 1] [source_file: expected0]
            NAME g 1 [source_file: expected0]
    EXPR_RESULT 1 [source_file: expected0]
        NAME e 1 [source_file: expected0]
    EXPR_RESULT 1 [source_file: expected0]
        NAME e 1 [source_file: expected0]


Subtree2: BLOCK 1 [source_file: testcode]
    VAR 1 [source_file: testcode]
        NAME y 1 [source_file: testcode]
            NAME e 1 [source_file: testcode]
    EXPR_RESULT 1 [source_file: testcode]
        CALL 1 [free_call: 1] [source_file: testcode]
            NAME g 1 [source_file: testcode]
    EXPR_RESULT 1 [source_file: testcode]
        NAME y 1 [source_file: testcode]
    EXPR_RESULT 1 [source_file: testcode]
        NAME y 1 [source_file: testcode]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineVariablesTest.testInlineCatchAlias1(InlineVariablesTest.java:818)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInlineCatchAlias2" time="0.002">
    <failure message="&#xa;Expected: try{}catch(e){e;g();e;e}&#xa;Result:   try{}catch(e){var y;y=e;g();y;y}&#xa;Node tree inequality:&#xa;Tree1:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;        TRY 1 [source_file: expected0]&#xa;            BLOCK 1 [source_file: expected0]&#xa;            BLOCK 1 [source_file: expected0]&#xa;                CATCH 1 [source_file: expected0]&#xa;                    NAME e 1 [source_file: expected0]&#xa;                    BLOCK 1 [source_file: expected0]&#xa;                        EXPR_RESULT 1 [source_file: expected0]&#xa;                            NAME e 1 [source_file: expected0]&#xa;                        EXPR_RESULT 1 [source_file: expected0]&#xa;                            CALL 1 [free_call: 1] [source_file: expected0]&#xa;                                NAME g 1 [source_file: expected0]&#xa;                        EXPR_RESULT 1 [source_file: expected0]&#xa;                            NAME e 1 [source_file: expected0]&#xa;                        EXPR_RESULT 1 [source_file: expected0]&#xa;                            NAME e 1 [source_file: expected0]&#xa;&#xa;&#xa;Tree2:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;        TRY 1 [source_file: testcode]&#xa;            BLOCK 1 [source_file: testcode]&#xa;            BLOCK 1 [source_file: testcode]&#xa;                CATCH 1 [source_file: testcode]&#xa;                    NAME e 1 [source_file: testcode]&#xa;                    BLOCK 1 [source_file: testcode]&#xa;                        VAR 1 [source_file: testcode]&#xa;                            NAME y 1 [source_file: testcode]&#xa;                        EXPR_RESULT 1 [source_file: testcode]&#xa;                            ASSIGN 1 [source_file: testcode]&#xa;                                NAME y 1 [source_file: testcode]&#xa;                                NAME e 1 [source_file: testcode]&#xa;                        EXPR_RESULT 1 [source_file: testcode]&#xa;                            CALL 1 [free_call: 1] [source_file: testcode]&#xa;                                NAME g 1 [source_file: testcode]&#xa;                        EXPR_RESULT 1 [source_file: testcode]&#xa;                            NAME y 1 [source_file: testcode]&#xa;                        EXPR_RESULT 1 [source_file: testcode]&#xa;                            NAME y 1 [source_file: testcode]&#xa;&#xa;&#xa;Subtree1: BLOCK 1 [source_file: expected0]&#xa;    EXPR_RESULT 1 [source_file: expected0]&#xa;        NAME e 1 [source_file: expected0]&#xa;    EXPR_RESULT 1 [source_file: expected0]&#xa;        CALL 1 [free_call: 1] [source_file: expected0]&#xa;            NAME g 1 [source_file: expected0]&#xa;    EXPR_RESULT 1 [source_file: expected0]&#xa;        NAME e 1 [source_file: expected0]&#xa;    EXPR_RESULT 1 [source_file: expected0]&#xa;        NAME e 1 [source_file: expected0]&#xa;&#xa;&#xa;Subtree2: BLOCK 1 [source_file: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME y 1 [source_file: testcode]&#xa;    EXPR_RESULT 1 [source_file: testcode]&#xa;        ASSIGN 1 [source_file: testcode]&#xa;            NAME y 1 [source_file: testcode]&#xa;            NAME e 1 [source_file: testcode]&#xa;    EXPR_RESULT 1 [source_file: testcode]&#xa;        CALL 1 [free_call: 1] [source_file: testcode]&#xa;            NAME g 1 [source_file: testcode]&#xa;    EXPR_RESULT 1 [source_file: testcode]&#xa;        NAME y 1 [source_file: testcode]&#xa;    EXPR_RESULT 1 [source_file: testcode]&#xa;        NAME y 1 [source_file: testcode]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: try{}catch(e){e;g();e;e}
Result:   try{}catch(e){var y;y=e;g();y;y}
Node tree inequality:
Tree1:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        TRY 1 [source_file: expected0]
            BLOCK 1 [source_file: expected0]
            BLOCK 1 [source_file: expected0]
                CATCH 1 [source_file: expected0]
                    NAME e 1 [source_file: expected0]
                    BLOCK 1 [source_file: expected0]
                        EXPR_RESULT 1 [source_file: expected0]
                            NAME e 1 [source_file: expected0]
                        EXPR_RESULT 1 [source_file: expected0]
                            CALL 1 [free_call: 1] [source_file: expected0]
                                NAME g 1 [source_file: expected0]
                        EXPR_RESULT 1 [source_file: expected0]
                            NAME e 1 [source_file: expected0]
                        EXPR_RESULT 1 [source_file: expected0]
                            NAME e 1 [source_file: expected0]


Tree2:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
        TRY 1 [source_file: testcode]
            BLOCK 1 [source_file: testcode]
            BLOCK 1 [source_file: testcode]
                CATCH 1 [source_file: testcode]
                    NAME e 1 [source_file: testcode]
                    BLOCK 1 [source_file: testcode]
                        VAR 1 [source_file: testcode]
                            NAME y 1 [source_file: testcode]
                        EXPR_RESULT 1 [source_file: testcode]
                            ASSIGN 1 [source_file: testcode]
                                NAME y 1 [source_file: testcode]
                                NAME e 1 [source_file: testcode]
                        EXPR_RESULT 1 [source_file: testcode]
                            CALL 1 [free_call: 1] [source_file: testcode]
                                NAME g 1 [source_file: testcode]
                        EXPR_RESULT 1 [source_file: testcode]
                            NAME y 1 [source_file: testcode]
                        EXPR_RESULT 1 [source_file: testcode]
                            NAME y 1 [source_file: testcode]


Subtree1: BLOCK 1 [source_file: expected0]
    EXPR_RESULT 1 [source_file: expected0]
        NAME e 1 [source_file: expected0]
    EXPR_RESULT 1 [source_file: expected0]
        CALL 1 [free_call: 1] [source_file: expected0]
            NAME g 1 [source_file: expected0]
    EXPR_RESULT 1 [source_file: expected0]
        NAME e 1 [source_file: expected0]
    EXPR_RESULT 1 [source_file: expected0]
        NAME e 1 [source_file: expected0]


Subtree2: BLOCK 1 [source_file: testcode]
    VAR 1 [source_file: testcode]
        NAME y 1 [source_file: testcode]
    EXPR_RESULT 1 [source_file: testcode]
        ASSIGN 1 [source_file: testcode]
            NAME y 1 [source_file: testcode]
            NAME e 1 [source_file: testcode]
    EXPR_RESULT 1 [source_file: testcode]
        CALL 1 [free_call: 1] [source_file: testcode]
            NAME g 1 [source_file: testcode]
    EXPR_RESULT 1 [source_file: testcode]
        NAME y 1 [source_file: testcode]
    EXPR_RESULT 1 [source_file: testcode]
        NAME y 1 [source_file: testcode]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineVariablesTest.testInlineCatchAlias2(InlineVariablesTest.java:834)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testLocalsOnly1" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testLocalsOnly2" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInlineUndefined1" time="0.002">
    <failure message="&#xa;Expected: void 0&#xa;Result:   var x;x&#xa;Node tree inequality:&#xa;Tree1:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;        EXPR_RESULT 1 [source_file: expected0]&#xa;            VOID 1 [source_file: expected0]&#xa;                NUMBER 0.0 1 [source_file: expected0]&#xa;&#xa;&#xa;Tree2:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME x 1 [source_file: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            NAME x 1 [source_file: testcode]&#xa;&#xa;&#xa;Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;    EXPR_RESULT 1 [source_file: expected0]&#xa;        VOID 1 [source_file: expected0]&#xa;            NUMBER 0.0 1 [source_file: expected0]&#xa;&#xa;&#xa;Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME x 1 [source_file: testcode]&#xa;    EXPR_RESULT 1 [source_file: testcode]&#xa;        NAME x 1 [source_file: testcode]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: void 0
Result:   var x;x
Node tree inequality:
Tree1:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        EXPR_RESULT 1 [source_file: expected0]
            VOID 1 [source_file: expected0]
                NUMBER 0.0 1 [source_file: expected0]


Tree2:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
        VAR 1 [source_file: testcode]
            NAME x 1 [source_file: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            NAME x 1 [source_file: testcode]


Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
    EXPR_RESULT 1 [source_file: expected0]
        VOID 1 [source_file: expected0]
            NUMBER 0.0 1 [source_file: expected0]


Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
    VAR 1 [source_file: testcode]
        NAME x 1 [source_file: testcode]
    EXPR_RESULT 1 [source_file: testcode]
        NAME x 1 [source_file: testcode]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineVariablesTest.testInlineUndefined1(InlineVariablesTest.java:870)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInlineUndefined2" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInlineUndefined3" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInlineUndefined4" time="0.002">
    <failure message="&#xa;Expected: void 0;void 0&#xa;Result:   var x;x;x&#xa;Node tree inequality:&#xa;Tree1:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;        EXPR_RESULT 1 [source_file: expected0]&#xa;            VOID 1 [source_file: expected0]&#xa;                NUMBER 0.0 1 [source_file: expected0]&#xa;        EXPR_RESULT 1 [source_file: expected0]&#xa;            VOID 1 [source_file: expected0]&#xa;                NUMBER 0.0 1 [source_file: expected0]&#xa;&#xa;&#xa;Tree2:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME x 1 [source_file: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            NAME x 1 [source_file: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            NAME x 1 [source_file: testcode]&#xa;&#xa;&#xa;Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;    EXPR_RESULT 1 [source_file: expected0]&#xa;        VOID 1 [source_file: expected0]&#xa;            NUMBER 0.0 1 [source_file: expected0]&#xa;    EXPR_RESULT 1 [source_file: expected0]&#xa;        VOID 1 [source_file: expected0]&#xa;            NUMBER 0.0 1 [source_file: expected0]&#xa;&#xa;&#xa;Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME x 1 [source_file: testcode]&#xa;    EXPR_RESULT 1 [source_file: testcode]&#xa;        NAME x 1 [source_file: testcode]&#xa;    EXPR_RESULT 1 [source_file: testcode]&#xa;        NAME x 1 [source_file: testcode]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: void 0;void 0
Result:   var x;x;x
Node tree inequality:
Tree1:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        EXPR_RESULT 1 [source_file: expected0]
            VOID 1 [source_file: expected0]
                NUMBER 0.0 1 [source_file: expected0]
        EXPR_RESULT 1 [source_file: expected0]
            VOID 1 [source_file: expected0]
                NUMBER 0.0 1 [source_file: expected0]


Tree2:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
        VAR 1 [source_file: testcode]
            NAME x 1 [source_file: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            NAME x 1 [source_file: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            NAME x 1 [source_file: testcode]


Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
    EXPR_RESULT 1 [source_file: expected0]
        VOID 1 [source_file: expected0]
            NUMBER 0.0 1 [source_file: expected0]
    EXPR_RESULT 1 [source_file: expected0]
        VOID 1 [source_file: expected0]
            NUMBER 0.0 1 [source_file: expected0]


Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
    VAR 1 [source_file: testcode]
        NAME x 1 [source_file: testcode]
    EXPR_RESULT 1 [source_file: testcode]
        NAME x 1 [source_file: testcode]
    EXPR_RESULT 1 [source_file: testcode]
        NAME x 1 [source_file: testcode]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineVariablesTest.testInlineUndefined4(InlineVariablesTest.java:883)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInlineUndefined5" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testIssue90" time="0.002">
    <failure message="&#xa;Expected: void 0&amp;&amp;alert(1)&#xa;Result:   var x;x&amp;&amp;alert(1)&#xa;Node tree inequality:&#xa;Tree1:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;        EXPR_RESULT 1 [source_file: expected0]&#xa;            AND 1 [source_file: expected0]&#xa;                VOID 1 [source_file: expected0]&#xa;                    NUMBER 0.0 1 [source_file: expected0]&#xa;                CALL 1 [free_call: 1] [source_file: expected0]&#xa;                    NAME alert 1 [source_file: expected0]&#xa;                    NUMBER 1.0 1 [source_file: expected0]&#xa;&#xa;&#xa;Tree2:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME x 1 [source_file: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            AND 1 [source_file: testcode]&#xa;                NAME x 1 [source_file: testcode]&#xa;                CALL 1 [free_call: 1] [source_file: testcode]&#xa;                    NAME alert 1 [source_file: testcode]&#xa;                    NUMBER 1.0 1 [source_file: testcode]&#xa;&#xa;&#xa;Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;    EXPR_RESULT 1 [source_file: expected0]&#xa;        AND 1 [source_file: expected0]&#xa;            VOID 1 [source_file: expected0]&#xa;                NUMBER 0.0 1 [source_file: expected0]&#xa;            CALL 1 [free_call: 1] [source_file: expected0]&#xa;                NAME alert 1 [source_file: expected0]&#xa;                NUMBER 1.0 1 [source_file: expected0]&#xa;&#xa;&#xa;Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME x 1 [source_file: testcode]&#xa;    EXPR_RESULT 1 [source_file: testcode]&#xa;        AND 1 [source_file: testcode]&#xa;            NAME x 1 [source_file: testcode]&#xa;            CALL 1 [free_call: 1] [source_file: testcode]&#xa;                NAME alert 1 [source_file: testcode]&#xa;                NUMBER 1.0 1 [source_file: testcode]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: void 0&amp;&amp;alert(1)
Result:   var x;x&amp;&amp;alert(1)
Node tree inequality:
Tree1:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        EXPR_RESULT 1 [source_file: expected0]
            AND 1 [source_file: expected0]
                VOID 1 [source_file: expected0]
                    NUMBER 0.0 1 [source_file: expected0]
                CALL 1 [free_call: 1] [source_file: expected0]
                    NAME alert 1 [source_file: expected0]
                    NUMBER 1.0 1 [source_file: expected0]


Tree2:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
        VAR 1 [source_file: testcode]
            NAME x 1 [source_file: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            AND 1 [source_file: testcode]
                NAME x 1 [source_file: testcode]
                CALL 1 [free_call: 1] [source_file: testcode]
                    NAME alert 1 [source_file: testcode]
                    NUMBER 1.0 1 [source_file: testcode]


Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
    EXPR_RESULT 1 [source_file: expected0]
        AND 1 [source_file: expected0]
            VOID 1 [source_file: expected0]
                NUMBER 0.0 1 [source_file: expected0]
            CALL 1 [free_call: 1] [source_file: expected0]
                NAME alert 1 [source_file: expected0]
                NUMBER 1.0 1 [source_file: expected0]


Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
    VAR 1 [source_file: testcode]
        NAME x 1 [source_file: testcode]
    EXPR_RESULT 1 [source_file: testcode]
        AND 1 [source_file: testcode]
            NAME x 1 [source_file: testcode]
            CALL 1 [free_call: 1] [source_file: testcode]
                NAME alert 1 [source_file: testcode]
                NUMBER 1.0 1 [source_file: testcode]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineVariablesTest.testIssue90(InlineVariablesTest.java:893)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testThisAlias" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testThisEscapedAlias" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testInlineNamedFunction" time="0.002">
    <failure message="&#xa;Expected: (function f(){})()&#xa;Result:   function f(){}f()&#xa;Node tree inequality:&#xa;Tree1:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;        EXPR_RESULT 1 [source_file: expected0]&#xa;            CALL 1 [free_call: 1] [source_file: expected0]&#xa;                FUNCTION f 1 [source_file: expected0]&#xa;                    NAME f 1 [source_file: expected0]&#xa;                    PARAM_LIST 1 [source_file: expected0]&#xa;                    BLOCK 1 [source_file: expected0]&#xa;&#xa;&#xa;Tree2:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;        FUNCTION f 1 [source_file: testcode]&#xa;            NAME f 1 [source_file: testcode]&#xa;            PARAM_LIST 1 [source_file: testcode]&#xa;            BLOCK 1 [source_file: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            CALL 1 [free_call: 1] [source_file: testcode]&#xa;                NAME f 1 [source_file: testcode]&#xa;&#xa;&#xa;Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;    EXPR_RESULT 1 [source_file: expected0]&#xa;        CALL 1 [free_call: 1] [source_file: expected0]&#xa;            FUNCTION f 1 [source_file: expected0]&#xa;                NAME f 1 [source_file: expected0]&#xa;                PARAM_LIST 1 [source_file: expected0]&#xa;                BLOCK 1 [source_file: expected0]&#xa;&#xa;&#xa;Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;    FUNCTION f 1 [source_file: testcode]&#xa;        NAME f 1 [source_file: testcode]&#xa;        PARAM_LIST 1 [source_file: testcode]&#xa;        BLOCK 1 [source_file: testcode]&#xa;    EXPR_RESULT 1 [source_file: testcode]&#xa;        CALL 1 [free_call: 1] [source_file: testcode]&#xa;            NAME f 1 [source_file: testcode]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: (function f(){})()
Result:   function f(){}f()
Node tree inequality:
Tree1:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        EXPR_RESULT 1 [source_file: expected0]
            CALL 1 [free_call: 1] [source_file: expected0]
                FUNCTION f 1 [source_file: expected0]
                    NAME f 1 [source_file: expected0]
                    PARAM_LIST 1 [source_file: expected0]
                    BLOCK 1 [source_file: expected0]


Tree2:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
        FUNCTION f 1 [source_file: testcode]
            NAME f 1 [source_file: testcode]
            PARAM_LIST 1 [source_file: testcode]
            BLOCK 1 [source_file: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            CALL 1 [free_call: 1] [source_file: testcode]
                NAME f 1 [source_file: testcode]


Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
    EXPR_RESULT 1 [source_file: expected0]
        CALL 1 [free_call: 1] [source_file: expected0]
            FUNCTION f 1 [source_file: expected0]
                NAME f 1 [source_file: expected0]
                PARAM_LIST 1 [source_file: expected0]
                BLOCK 1 [source_file: expected0]


Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
    FUNCTION f 1 [source_file: testcode]
        NAME f 1 [source_file: testcode]
        PARAM_LIST 1 [source_file: testcode]
        BLOCK 1 [source_file: testcode]
    EXPR_RESULT 1 [source_file: testcode]
        CALL 1 [free_call: 1] [source_file: testcode]
            NAME f 1 [source_file: testcode]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineVariablesTest.testInlineNamedFunction(InlineVariablesTest.java:913)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testIssue378ModifiedArguments1" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testIssue378ModifiedArguments2" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testIssue378EscapedArguments1" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testIssue378EscapedArguments2" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testIssue378EscapedArguments3" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testIssue378EscapedArguments4" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testIssue378ArgumentsRead1" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testIssue378ArgumentsRead2" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testArgumentsModifiedInOuterFunction" time="0.003" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testArgumentsModifiedInInnerFunction" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testNoInlineRedeclaredExterns" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testBug6598844" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testExternalIssue1053" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testHoistedFunction3" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testHoistedFunction4" time="0.002">
    <failure message="&#xa;Expected: 1;b();function b(){window[&quot;f&quot;]=1}&#xa;Result:   var impl_0;impl_0=1;b();function b(){window[&quot;f&quot;]=impl_0}&#xa;Node tree inequality:&#xa;Tree1:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;        EXPR_RESULT 1 [source_file: expected0]&#xa;            NUMBER 1.0 1 [source_file: expected0]&#xa;        EXPR_RESULT 1 [source_file: expected0]&#xa;            CALL 1 [free_call: 1] [source_file: expected0]&#xa;                NAME b 1 [source_file: expected0]&#xa;        FUNCTION b 1 [source_file: expected0]&#xa;            NAME b 1 [source_file: expected0]&#xa;            PARAM_LIST 1 [source_file: expected0]&#xa;            BLOCK 1 [source_file: expected0]&#xa;                EXPR_RESULT 1 [source_file: expected0]&#xa;                    ASSIGN 1 [source_file: expected0]&#xa;                        GETELEM 1 [source_file: expected0]&#xa;                            NAME window 1 [source_file: expected0]&#xa;                            STRING f 1 [source_file: expected0]&#xa;                        NUMBER 1.0 1 [source_file: expected0]&#xa;&#xa;&#xa;Tree2:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME impl_0 1 [source_file: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            ASSIGN 1 [source_file: testcode]&#xa;                NAME impl_0 1 [source_file: testcode]&#xa;                NUMBER 1.0 1 [source_file: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            CALL 1 [free_call: 1] [source_file: testcode]&#xa;                NAME b 1 [source_file: testcode]&#xa;        FUNCTION b 1 [source_file: testcode]&#xa;            NAME b 1 [source_file: testcode]&#xa;            PARAM_LIST 1 [source_file: testcode]&#xa;            BLOCK 1 [source_file: testcode]&#xa;                EXPR_RESULT 1 [source_file: testcode]&#xa;                    ASSIGN 1 [source_file: testcode]&#xa;                        GETELEM 1 [source_file: testcode]&#xa;                            NAME window 1 [source_file: testcode]&#xa;                            STRING f 1 [source_file: testcode]&#xa;                        NAME impl_0 1 [source_file: testcode]&#xa;&#xa;&#xa;Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;    EXPR_RESULT 1 [source_file: expected0]&#xa;        NUMBER 1.0 1 [source_file: expected0]&#xa;    EXPR_RESULT 1 [source_file: expected0]&#xa;        CALL 1 [free_call: 1] [source_file: expected0]&#xa;            NAME b 1 [source_file: expected0]&#xa;    FUNCTION b 1 [source_file: expected0]&#xa;        NAME b 1 [source_file: expected0]&#xa;        PARAM_LIST 1 [source_file: expected0]&#xa;        BLOCK 1 [source_file: expected0]&#xa;            EXPR_RESULT 1 [source_file: expected0]&#xa;                ASSIGN 1 [source_file: expected0]&#xa;                    GETELEM 1 [source_file: expected0]&#xa;                        NAME window 1 [source_file: expected0]&#xa;                        STRING f 1 [source_file: expected0]&#xa;                    NUMBER 1.0 1 [source_file: expected0]&#xa;&#xa;&#xa;Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME impl_0 1 [source_file: testcode]&#xa;    EXPR_RESULT 1 [source_file: testcode]&#xa;        ASSIGN 1 [source_file: testcode]&#xa;            NAME impl_0 1 [source_file: testcode]&#xa;            NUMBER 1.0 1 [source_file: testcode]&#xa;    EXPR_RESULT 1 [source_file: testcode]&#xa;        CALL 1 [free_call: 1] [source_file: testcode]&#xa;            NAME b 1 [source_file: testcode]&#xa;    FUNCTION b 1 [source_file: testcode]&#xa;        NAME b 1 [source_file: testcode]&#xa;        PARAM_LIST 1 [source_file: testcode]&#xa;        BLOCK 1 [source_file: testcode]&#xa;            EXPR_RESULT 1 [source_file: testcode]&#xa;                ASSIGN 1 [source_file: testcode]&#xa;                    GETELEM 1 [source_file: testcode]&#xa;                        NAME window 1 [source_file: testcode]&#xa;                        STRING f 1 [source_file: testcode]&#xa;                    NAME impl_0 1 [source_file: testcode]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: 1;b();function b(){window[&quot;f&quot;]=1}
Result:   var impl_0;impl_0=1;b();function b(){window[&quot;f&quot;]=impl_0}
Node tree inequality:
Tree1:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        EXPR_RESULT 1 [source_file: expected0]
            NUMBER 1.0 1 [source_file: expected0]
        EXPR_RESULT 1 [source_file: expected0]
            CALL 1 [free_call: 1] [source_file: expected0]
                NAME b 1 [source_file: expected0]
        FUNCTION b 1 [source_file: expected0]
            NAME b 1 [source_file: expected0]
            PARAM_LIST 1 [source_file: expected0]
            BLOCK 1 [source_file: expected0]
                EXPR_RESULT 1 [source_file: expected0]
                    ASSIGN 1 [source_file: expected0]
                        GETELEM 1 [source_file: expected0]
                            NAME window 1 [source_file: expected0]
                            STRING f 1 [source_file: expected0]
                        NUMBER 1.0 1 [source_file: expected0]


Tree2:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
        VAR 1 [source_file: testcode]
            NAME impl_0 1 [source_file: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            ASSIGN 1 [source_file: testcode]
                NAME impl_0 1 [source_file: testcode]
                NUMBER 1.0 1 [source_file: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            CALL 1 [free_call: 1] [source_file: testcode]
                NAME b 1 [source_file: testcode]
        FUNCTION b 1 [source_file: testcode]
            NAME b 1 [source_file: testcode]
            PARAM_LIST 1 [source_file: testcode]
            BLOCK 1 [source_file: testcode]
                EXPR_RESULT 1 [source_file: testcode]
                    ASSIGN 1 [source_file: testcode]
                        GETELEM 1 [source_file: testcode]
                            NAME window 1 [source_file: testcode]
                            STRING f 1 [source_file: testcode]
                        NAME impl_0 1 [source_file: testcode]


Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
    EXPR_RESULT 1 [source_file: expected0]
        NUMBER 1.0 1 [source_file: expected0]
    EXPR_RESULT 1 [source_file: expected0]
        CALL 1 [free_call: 1] [source_file: expected0]
            NAME b 1 [source_file: expected0]
    FUNCTION b 1 [source_file: expected0]
        NAME b 1 [source_file: expected0]
        PARAM_LIST 1 [source_file: expected0]
        BLOCK 1 [source_file: expected0]
            EXPR_RESULT 1 [source_file: expected0]
                ASSIGN 1 [source_file: expected0]
                    GETELEM 1 [source_file: expected0]
                        NAME window 1 [source_file: expected0]
                        STRING f 1 [source_file: expected0]
                    NUMBER 1.0 1 [source_file: expected0]


Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
    VAR 1 [source_file: testcode]
        NAME impl_0 1 [source_file: testcode]
    EXPR_RESULT 1 [source_file: testcode]
        ASSIGN 1 [source_file: testcode]
            NAME impl_0 1 [source_file: testcode]
            NUMBER 1.0 1 [source_file: testcode]
    EXPR_RESULT 1 [source_file: testcode]
        CALL 1 [free_call: 1] [source_file: testcode]
            NAME b 1 [source_file: testcode]
    FUNCTION b 1 [source_file: testcode]
        NAME b 1 [source_file: testcode]
        PARAM_LIST 1 [source_file: testcode]
        BLOCK 1 [source_file: testcode]
            EXPR_RESULT 1 [source_file: testcode]
                ASSIGN 1 [source_file: testcode]
                    GETELEM 1 [source_file: testcode]
                        NAME window 1 [source_file: testcode]
                        STRING f 1 [source_file: testcode]
                    NAME impl_0 1 [source_file: testcode]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineVariablesTest.testHoistedFunction4(InlineVariablesTest.java:1096)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testHoistedFunction5" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testHoistedFunction6" time="0.003">
    <failure message="&#xa;Expected: a();function b(){return 1}function a(){return b()}&#xa;Result:   var debug=1;a();function b(){return debug}function a(){return b()}&#xa;Node tree inequality:&#xa;Tree1:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;        EXPR_RESULT 1 [source_file: expected0]&#xa;            CALL 1 [free_call: 1] [source_file: expected0]&#xa;                NAME a 1 [source_file: expected0]&#xa;        FUNCTION b 1 [source_file: expected0]&#xa;            NAME b 1 [source_file: expected0]&#xa;            PARAM_LIST 1 [source_file: expected0]&#xa;            BLOCK 1 [source_file: expected0]&#xa;                RETURN 1 [source_file: expected0]&#xa;                    NUMBER 1.0 1 [source_file: expected0]&#xa;        FUNCTION a 1 [source_file: expected0]&#xa;            NAME a 1 [source_file: expected0]&#xa;            PARAM_LIST 1 [source_file: expected0]&#xa;            BLOCK 1 [source_file: expected0]&#xa;                RETURN 1 [source_file: expected0]&#xa;                    CALL 1 [free_call: 1] [source_file: expected0]&#xa;                        NAME b 1 [source_file: expected0]&#xa;&#xa;&#xa;Tree2:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME debug 1 [source_file: testcode]&#xa;                NUMBER 1.0 1 [source_file: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            CALL 1 [free_call: 1] [source_file: testcode]&#xa;                NAME a 1 [source_file: testcode]&#xa;        FUNCTION b 1 [source_file: testcode]&#xa;            NAME b 1 [source_file: testcode]&#xa;            PARAM_LIST 1 [source_file: testcode]&#xa;            BLOCK 1 [source_file: testcode]&#xa;                RETURN 1 [source_file: testcode]&#xa;                    NAME debug 1 [source_file: testcode]&#xa;        FUNCTION a 1 [source_file: testcode]&#xa;            NAME a 1 [source_file: testcode]&#xa;            PARAM_LIST 1 [source_file: testcode]&#xa;            BLOCK 1 [source_file: testcode]&#xa;                RETURN 1 [source_file: testcode]&#xa;                    CALL 1 [free_call: 1] [source_file: testcode]&#xa;                        NAME b 1 [source_file: testcode]&#xa;&#xa;&#xa;Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;    EXPR_RESULT 1 [source_file: expected0]&#xa;        CALL 1 [free_call: 1] [source_file: expected0]&#xa;            NAME a 1 [source_file: expected0]&#xa;    FUNCTION b 1 [source_file: expected0]&#xa;        NAME b 1 [source_file: expected0]&#xa;        PARAM_LIST 1 [source_file: expected0]&#xa;        BLOCK 1 [source_file: expected0]&#xa;            RETURN 1 [source_file: expected0]&#xa;                NUMBER 1.0 1 [source_file: expected0]&#xa;    FUNCTION a 1 [source_file: expected0]&#xa;        NAME a 1 [source_file: expected0]&#xa;        PARAM_LIST 1 [source_file: expected0]&#xa;        BLOCK 1 [source_file: expected0]&#xa;            RETURN 1 [source_file: expected0]&#xa;                CALL 1 [free_call: 1] [source_file: expected0]&#xa;                    NAME b 1 [source_file: expected0]&#xa;&#xa;&#xa;Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME debug 1 [source_file: testcode]&#xa;            NUMBER 1.0 1 [source_file: testcode]&#xa;    EXPR_RESULT 1 [source_file: testcode]&#xa;        CALL 1 [free_call: 1] [source_file: testcode]&#xa;            NAME a 1 [source_file: testcode]&#xa;    FUNCTION b 1 [source_file: testcode]&#xa;        NAME b 1 [source_file: testcode]&#xa;        PARAM_LIST 1 [source_file: testcode]&#xa;        BLOCK 1 [source_file: testcode]&#xa;            RETURN 1 [source_file: testcode]&#xa;                NAME debug 1 [source_file: testcode]&#xa;    FUNCTION a 1 [source_file: testcode]&#xa;        NAME a 1 [source_file: testcode]&#xa;        PARAM_LIST 1 [source_file: testcode]&#xa;        BLOCK 1 [source_file: testcode]&#xa;            RETURN 1 [source_file: testcode]&#xa;                CALL 1 [free_call: 1] [source_file: testcode]&#xa;                    NAME b 1 [source_file: testcode]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: a();function b(){return 1}function a(){return b()}
Result:   var debug=1;a();function b(){return debug}function a(){return b()}
Node tree inequality:
Tree1:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        EXPR_RESULT 1 [source_file: expected0]
            CALL 1 [free_call: 1] [source_file: expected0]
                NAME a 1 [source_file: expected0]
        FUNCTION b 1 [source_file: expected0]
            NAME b 1 [source_file: expected0]
            PARAM_LIST 1 [source_file: expected0]
            BLOCK 1 [source_file: expected0]
                RETURN 1 [source_file: expected0]
                    NUMBER 1.0 1 [source_file: expected0]
        FUNCTION a 1 [source_file: expected0]
            NAME a 1 [source_file: expected0]
            PARAM_LIST 1 [source_file: expected0]
            BLOCK 1 [source_file: expected0]
                RETURN 1 [source_file: expected0]
                    CALL 1 [free_call: 1] [source_file: expected0]
                        NAME b 1 [source_file: expected0]


Tree2:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
        VAR 1 [source_file: testcode]
            NAME debug 1 [source_file: testcode]
                NUMBER 1.0 1 [source_file: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            CALL 1 [free_call: 1] [source_file: testcode]
                NAME a 1 [source_file: testcode]
        FUNCTION b 1 [source_file: testcode]
            NAME b 1 [source_file: testcode]
            PARAM_LIST 1 [source_file: testcode]
            BLOCK 1 [source_file: testcode]
                RETURN 1 [source_file: testcode]
                    NAME debug 1 [source_file: testcode]
        FUNCTION a 1 [source_file: testcode]
            NAME a 1 [source_file: testcode]
            PARAM_LIST 1 [source_file: testcode]
            BLOCK 1 [source_file: testcode]
                RETURN 1 [source_file: testcode]
                    CALL 1 [free_call: 1] [source_file: testcode]
                        NAME b 1 [source_file: testcode]


Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
    EXPR_RESULT 1 [source_file: expected0]
        CALL 1 [free_call: 1] [source_file: expected0]
            NAME a 1 [source_file: expected0]
    FUNCTION b 1 [source_file: expected0]
        NAME b 1 [source_file: expected0]
        PARAM_LIST 1 [source_file: expected0]
        BLOCK 1 [source_file: expected0]
            RETURN 1 [source_file: expected0]
                NUMBER 1.0 1 [source_file: expected0]
    FUNCTION a 1 [source_file: expected0]
        NAME a 1 [source_file: expected0]
        PARAM_LIST 1 [source_file: expected0]
        BLOCK 1 [source_file: expected0]
            RETURN 1 [source_file: expected0]
                CALL 1 [free_call: 1] [source_file: expected0]
                    NAME b 1 [source_file: expected0]


Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
    VAR 1 [source_file: testcode]
        NAME debug 1 [source_file: testcode]
            NUMBER 1.0 1 [source_file: testcode]
    EXPR_RESULT 1 [source_file: testcode]
        CALL 1 [free_call: 1] [source_file: testcode]
            NAME a 1 [source_file: testcode]
    FUNCTION b 1 [source_file: testcode]
        NAME b 1 [source_file: testcode]
        PARAM_LIST 1 [source_file: testcode]
        BLOCK 1 [source_file: testcode]
            RETURN 1 [source_file: testcode]
                NAME debug 1 [source_file: testcode]
    FUNCTION a 1 [source_file: testcode]
        NAME a 1 [source_file: testcode]
        PARAM_LIST 1 [source_file: testcode]
        BLOCK 1 [source_file: testcode]
            RETURN 1 [source_file: testcode]
                CALL 1 [free_call: 1] [source_file: testcode]
                    NAME b 1 [source_file: testcode]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineVariablesTest.testHoistedFunction6(InlineVariablesTest.java:1113)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testIssue354" time="0.003">
    <failure message="&#xa;Expected: function Widget(){}Widget.prototype={frob:function(){search()}};function search(){if(true)alert(1);else alert(2)}window.foo=new Widget;window.bar=search&#xa;Result:   var enabled=true;function Widget(){}Widget.prototype={frob:function(){search()}};function search(){if(enabled)alert(1);else alert(2)}window.foo=new Widget;window.bar=search&#xa;Node tree inequality:&#xa;Tree1:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;        FUNCTION Widget 1 [source_file: expected0]&#xa;            NAME Widget 1 [source_file: expected0]&#xa;            PARAM_LIST 1 [source_file: expected0]&#xa;            BLOCK 1 [source_file: expected0]&#xa;        EXPR_RESULT 1 [source_file: expected0]&#xa;            ASSIGN 1 [source_file: expected0]&#xa;                GETPROP 1 [source_file: expected0]&#xa;                    NAME Widget 1 [source_file: expected0]&#xa;                    STRING prototype 1 [source_file: expected0]&#xa;                OBJECTLIT 1 [source_file: expected0]&#xa;                    STRING_KEY frob 1 [source_file: expected0]&#xa;                        FUNCTION  1 [source_file: expected0]&#xa;                            NAME  1 [source_file: expected0]&#xa;                            PARAM_LIST 1 [source_file: expected0]&#xa;                            BLOCK 1 [source_file: expected0]&#xa;                                EXPR_RESULT 1 [source_file: expected0]&#xa;                                    CALL 1 [free_call: 1] [source_file: expected0]&#xa;                                        NAME search 1 [source_file: expected0]&#xa;        FUNCTION search 1 [source_file: expected0]&#xa;            NAME search 1 [source_file: expected0]&#xa;            PARAM_LIST 1 [source_file: expected0]&#xa;            BLOCK 1 [source_file: expected0]&#xa;                IF 1 [source_file: expected0]&#xa;                    TRUE 1 [source_file: expected0]&#xa;                    BLOCK 1 [added_block: 1] [source_file: expected0]&#xa;                        EXPR_RESULT 1 [source_file: expected0]&#xa;                            CALL 1 [free_call: 1] [source_file: expected0]&#xa;                                NAME alert 1 [source_file: expected0]&#xa;                                NUMBER 1.0 1 [source_file: expected0]&#xa;                    BLOCK 1 [added_block: 1] [source_file: expected0]&#xa;                        EXPR_RESULT 1 [source_file: expected0]&#xa;                            CALL 1 [free_call: 1] [source_file: expected0]&#xa;                                NAME alert 1 [source_file: expected0]&#xa;                                NUMBER 2.0 1 [source_file: expected0]&#xa;        EXPR_RESULT 1 [source_file: expected0]&#xa;            ASSIGN 1 [source_file: expected0]&#xa;                GETPROP 1 [source_file: expected0]&#xa;                    NAME window 1 [source_file: expected0]&#xa;                    STRING foo 1 [source_file: expected0]&#xa;                NEW 1 [source_file: expected0]&#xa;                    NAME Widget 1 [source_file: expected0]&#xa;        EXPR_RESULT 1 [source_file: expected0]&#xa;            ASSIGN 1 [source_file: expected0]&#xa;                GETPROP 1 [source_file: expected0]&#xa;                    NAME window 1 [source_file: expected0]&#xa;                    STRING bar 1 [source_file: expected0]&#xa;                NAME search 1 [source_file: expected0]&#xa;&#xa;&#xa;Tree2:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME enabled 1 [source_file: testcode]&#xa;                TRUE 1 [source_file: testcode]&#xa;        FUNCTION Widget 1 [source_file: testcode]&#xa;            NAME Widget 1 [source_file: testcode]&#xa;            PARAM_LIST 1 [source_file: testcode]&#xa;            BLOCK 1 [source_file: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            ASSIGN 1 [source_file: testcode]&#xa;                GETPROP 1 [source_file: testcode]&#xa;                    NAME Widget 1 [source_file: testcode]&#xa;                    STRING prototype 1 [source_file: testcode]&#xa;                OBJECTLIT 1 [source_file: testcode]&#xa;                    STRING_KEY frob 1 [source_file: testcode]&#xa;                        FUNCTION  1 [source_file: testcode]&#xa;                            NAME  1 [source_file: testcode]&#xa;                            PARAM_LIST 1 [source_file: testcode]&#xa;                            BLOCK 1 [source_file: testcode]&#xa;                                EXPR_RESULT 1 [source_file: testcode]&#xa;                                    CALL 1 [free_call: 1] [source_file: testcode]&#xa;                                        NAME search 1 [source_file: testcode]&#xa;        FUNCTION search 1 [source_file: testcode]&#xa;            NAME search 1 [source_file: testcode]&#xa;            PARAM_LIST 1 [source_file: testcode]&#xa;            BLOCK 1 [source_file: testcode]&#xa;                IF 1 [source_file: testcode]&#xa;                    NAME enabled 1 [source_file: testcode]&#xa;                    BLOCK 1 [added_block: 1] [source_file: testcode]&#xa;                        EXPR_RESULT 1 [source_file: testcode]&#xa;                            CALL 1 [free_call: 1] [source_file: testcode]&#xa;                                NAME alert 1 [source_file: testcode]&#xa;                                NUMBER 1.0 1 [source_file: testcode]&#xa;                    BLOCK 1 [added_block: 1] [source_file: testcode]&#xa;                        EXPR_RESULT 1 [source_file: testcode]&#xa;                            CALL 1 [free_call: 1] [source_file: testcode]&#xa;                                NAME alert 1 [source_file: testcode]&#xa;                                NUMBER 2.0 1 [source_file: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            ASSIGN 1 [source_file: testcode]&#xa;                GETPROP 1 [source_file: testcode]&#xa;                    NAME window 1 [source_file: testcode]&#xa;                    STRING foo 1 [source_file: testcode]&#xa;                NEW 1 [source_file: testcode]&#xa;                    NAME Widget 1 [source_file: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            ASSIGN 1 [source_file: testcode]&#xa;                GETPROP 1 [source_file: testcode]&#xa;                    NAME window 1 [source_file: testcode]&#xa;                    STRING bar 1 [source_file: testcode]&#xa;                NAME search 1 [source_file: testcode]&#xa;&#xa;&#xa;Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;    FUNCTION Widget 1 [source_file: expected0]&#xa;        NAME Widget 1 [source_file: expected0]&#xa;        PARAM_LIST 1 [source_file: expected0]&#xa;        BLOCK 1 [source_file: expected0]&#xa;    EXPR_RESULT 1 [source_file: expected0]&#xa;        ASSIGN 1 [source_file: expected0]&#xa;            GETPROP 1 [source_file: expected0]&#xa;                NAME Widget 1 [source_file: expected0]&#xa;                STRING prototype 1 [source_file: expected0]&#xa;            OBJECTLIT 1 [source_file: expected0]&#xa;                STRING_KEY frob 1 [source_file: expected0]&#xa;                    FUNCTION  1 [source_file: expected0]&#xa;                        NAME  1 [source_file: expected0]&#xa;                        PARAM_LIST 1 [source_file: expected0]&#xa;                        BLOCK 1 [source_file: expected0]&#xa;                            EXPR_RESULT 1 [source_file: expected0]&#xa;                                CALL 1 [free_call: 1] [source_file: expected0]&#xa;                                    NAME search 1 [source_file: expected0]&#xa;    FUNCTION search 1 [source_file: expected0]&#xa;        NAME search 1 [source_file: expected0]&#xa;        PARAM_LIST 1 [source_file: expected0]&#xa;        BLOCK 1 [source_file: expected0]&#xa;            IF 1 [source_file: expected0]&#xa;                TRUE 1 [source_file: expected0]&#xa;                BLOCK 1 [added_block: 1] [source_file: expected0]&#xa;                    EXPR_RESULT 1 [source_file: expected0]&#xa;                        CALL 1 [free_call: 1] [source_file: expected0]&#xa;                            NAME alert 1 [source_file: expected0]&#xa;                            NUMBER 1.0 1 [source_file: expected0]&#xa;                BLOCK 1 [added_block: 1] [source_file: expected0]&#xa;                    EXPR_RESULT 1 [source_file: expected0]&#xa;                        CALL 1 [free_call: 1] [source_file: expected0]&#xa;                            NAME alert 1 [source_file: expected0]&#xa;                            NUMBER 2.0 1 [source_file: expected0]&#xa;    EXPR_RESULT 1 [source_file: expected0]&#xa;        ASSIGN 1 [source_file: expected0]&#xa;            GETPROP 1 [source_file: expected0]&#xa;                NAME window 1 [source_file: expected0]&#xa;                STRING foo 1 [source_file: expected0]&#xa;            NEW 1 [source_file: expected0]&#xa;                NAME Widget 1 [source_file: expected0]&#xa;    EXPR_RESULT 1 [source_file: expected0]&#xa;        ASSIGN 1 [source_file: expected0]&#xa;            GETPROP 1 [source_file: expected0]&#xa;                NAME window 1 [source_file: expected0]&#xa;                STRING bar 1 [source_file: expected0]&#xa;            NAME search 1 [source_file: expected0]&#xa;&#xa;&#xa;Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME enabled 1 [source_file: testcode]&#xa;            TRUE 1 [source_file: testcode]&#xa;    FUNCTION Widget 1 [source_file: testcode]&#xa;        NAME Widget 1 [source_file: testcode]&#xa;        PARAM_LIST 1 [source_file: testcode]&#xa;        BLOCK 1 [source_file: testcode]&#xa;    EXPR_RESULT 1 [source_file: testcode]&#xa;        ASSIGN 1 [source_file: testcode]&#xa;            GETPROP 1 [source_file: testcode]&#xa;                NAME Widget 1 [source_file: testcode]&#xa;                STRING prototype 1 [source_file: testcode]&#xa;            OBJECTLIT 1 [source_file: testcode]&#xa;                STRING_KEY frob 1 [source_file: testcode]&#xa;                    FUNCTION  1 [source_file: testcode]&#xa;                        NAME  1 [source_file: testcode]&#xa;                        PARAM_LIST 1 [source_file: testcode]&#xa;                        BLOCK 1 [source_file: testcode]&#xa;                            EXPR_RESULT 1 [source_file: testcode]&#xa;                                CALL 1 [free_call: 1] [source_file: testcode]&#xa;                                    NAME search 1 [source_file: testcode]&#xa;    FUNCTION search 1 [source_file: testcode]&#xa;        NAME search 1 [source_file: testcode]&#xa;        PARAM_LIST 1 [source_file: testcode]&#xa;        BLOCK 1 [source_file: testcode]&#xa;            IF 1 [source_file: testcode]&#xa;                NAME enabled 1 [source_file: testcode]&#xa;                BLOCK 1 [added_block: 1] [source_file: testcode]&#xa;                    EXPR_RESULT 1 [source_file: testcode]&#xa;                        CALL 1 [free_call: 1] [source_file: testcode]&#xa;                            NAME alert 1 [source_file: testcode]&#xa;                            NUMBER 1.0 1 [source_file: testcode]&#xa;                BLOCK 1 [added_block: 1] [source_file: testcode]&#xa;                    EXPR_RESULT 1 [source_file: testcode]&#xa;                        CALL 1 [free_call: 1] [source_file: testcode]&#xa;                            NAME alert 1 [source_file: testcode]&#xa;                            NUMBER 2.0 1 [source_file: testcode]&#xa;    EXPR_RESULT 1 [source_file: testcode]&#xa;        ASSIGN 1 [source_file: testcode]&#xa;            GETPROP 1 [source_file: testcode]&#xa;                NAME window 1 [source_file: testcode]&#xa;                STRING foo 1 [source_file: testcode]&#xa;            NEW 1 [source_file: testcode]&#xa;                NAME Widget 1 [source_file: testcode]&#xa;    EXPR_RESULT 1 [source_file: testcode]&#xa;        ASSIGN 1 [source_file: testcode]&#xa;            GETPROP 1 [source_file: testcode]&#xa;                NAME window 1 [source_file: testcode]&#xa;                STRING bar 1 [source_file: testcode]&#xa;            NAME search 1 [source_file: testcode]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: function Widget(){}Widget.prototype={frob:function(){search()}};function search(){if(true)alert(1);else alert(2)}window.foo=new Widget;window.bar=search
Result:   var enabled=true;function Widget(){}Widget.prototype={frob:function(){search()}};function search(){if(enabled)alert(1);else alert(2)}window.foo=new Widget;window.bar=search
Node tree inequality:
Tree1:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        FUNCTION Widget 1 [source_file: expected0]
            NAME Widget 1 [source_file: expected0]
            PARAM_LIST 1 [source_file: expected0]
            BLOCK 1 [source_file: expected0]
        EXPR_RESULT 1 [source_file: expected0]
            ASSIGN 1 [source_file: expected0]
                GETPROP 1 [source_file: expected0]
                    NAME Widget 1 [source_file: expected0]
                    STRING prototype 1 [source_file: expected0]
                OBJECTLIT 1 [source_file: expected0]
                    STRING_KEY frob 1 [source_file: expected0]
                        FUNCTION  1 [source_file: expected0]
                            NAME  1 [source_file: expected0]
                            PARAM_LIST 1 [source_file: expected0]
                            BLOCK 1 [source_file: expected0]
                                EXPR_RESULT 1 [source_file: expected0]
                                    CALL 1 [free_call: 1] [source_file: expected0]
                                        NAME search 1 [source_file: expected0]
        FUNCTION search 1 [source_file: expected0]
            NAME search 1 [source_file: expected0]
            PARAM_LIST 1 [source_file: expected0]
            BLOCK 1 [source_file: expected0]
                IF 1 [source_file: expected0]
                    TRUE 1 [source_file: expected0]
                    BLOCK 1 [added_block: 1] [source_file: expected0]
                        EXPR_RESULT 1 [source_file: expected0]
                            CALL 1 [free_call: 1] [source_file: expected0]
                                NAME alert 1 [source_file: expected0]
                                NUMBER 1.0 1 [source_file: expected0]
                    BLOCK 1 [added_block: 1] [source_file: expected0]
                        EXPR_RESULT 1 [source_file: expected0]
                            CALL 1 [free_call: 1] [source_file: expected0]
                                NAME alert 1 [source_file: expected0]
                                NUMBER 2.0 1 [source_file: expected0]
        EXPR_RESULT 1 [source_file: expected0]
            ASSIGN 1 [source_file: expected0]
                GETPROP 1 [source_file: expected0]
                    NAME window 1 [source_file: expected0]
                    STRING foo 1 [source_file: expected0]
                NEW 1 [source_file: expected0]
                    NAME Widget 1 [source_file: expected0]
        EXPR_RESULT 1 [source_file: expected0]
            ASSIGN 1 [source_file: expected0]
                GETPROP 1 [source_file: expected0]
                    NAME window 1 [source_file: expected0]
                    STRING bar 1 [source_file: expected0]
                NAME search 1 [source_file: expected0]


Tree2:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
        VAR 1 [source_file: testcode]
            NAME enabled 1 [source_file: testcode]
                TRUE 1 [source_file: testcode]
        FUNCTION Widget 1 [source_file: testcode]
            NAME Widget 1 [source_file: testcode]
            PARAM_LIST 1 [source_file: testcode]
            BLOCK 1 [source_file: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            ASSIGN 1 [source_file: testcode]
                GETPROP 1 [source_file: testcode]
                    NAME Widget 1 [source_file: testcode]
                    STRING prototype 1 [source_file: testcode]
                OBJECTLIT 1 [source_file: testcode]
                    STRING_KEY frob 1 [source_file: testcode]
                        FUNCTION  1 [source_file: testcode]
                            NAME  1 [source_file: testcode]
                            PARAM_LIST 1 [source_file: testcode]
                            BLOCK 1 [source_file: testcode]
                                EXPR_RESULT 1 [source_file: testcode]
                                    CALL 1 [free_call: 1] [source_file: testcode]
                                        NAME search 1 [source_file: testcode]
        FUNCTION search 1 [source_file: testcode]
            NAME search 1 [source_file: testcode]
            PARAM_LIST 1 [source_file: testcode]
            BLOCK 1 [source_file: testcode]
                IF 1 [source_file: testcode]
                    NAME enabled 1 [source_file: testcode]
                    BLOCK 1 [added_block: 1] [source_file: testcode]
                        EXPR_RESULT 1 [source_file: testcode]
                            CALL 1 [free_call: 1] [source_file: testcode]
                                NAME alert 1 [source_file: testcode]
                                NUMBER 1.0 1 [source_file: testcode]
                    BLOCK 1 [added_block: 1] [source_file: testcode]
                        EXPR_RESULT 1 [source_file: testcode]
                            CALL 1 [free_call: 1] [source_file: testcode]
                                NAME alert 1 [source_file: testcode]
                                NUMBER 2.0 1 [source_file: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            ASSIGN 1 [source_file: testcode]
                GETPROP 1 [source_file: testcode]
                    NAME window 1 [source_file: testcode]
                    STRING foo 1 [source_file: testcode]
                NEW 1 [source_file: testcode]
                    NAME Widget 1 [source_file: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            ASSIGN 1 [source_file: testcode]
                GETPROP 1 [source_file: testcode]
                    NAME window 1 [source_file: testcode]
                    STRING bar 1 [source_file: testcode]
                NAME search 1 [source_file: testcode]


Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
    FUNCTION Widget 1 [source_file: expected0]
        NAME Widget 1 [source_file: expected0]
        PARAM_LIST 1 [source_file: expected0]
        BLOCK 1 [source_file: expected0]
    EXPR_RESULT 1 [source_file: expected0]
        ASSIGN 1 [source_file: expected0]
            GETPROP 1 [source_file: expected0]
                NAME Widget 1 [source_file: expected0]
                STRING prototype 1 [source_file: expected0]
            OBJECTLIT 1 [source_file: expected0]
                STRING_KEY frob 1 [source_file: expected0]
                    FUNCTION  1 [source_file: expected0]
                        NAME  1 [source_file: expected0]
                        PARAM_LIST 1 [source_file: expected0]
                        BLOCK 1 [source_file: expected0]
                            EXPR_RESULT 1 [source_file: expected0]
                                CALL 1 [free_call: 1] [source_file: expected0]
                                    NAME search 1 [source_file: expected0]
    FUNCTION search 1 [source_file: expected0]
        NAME search 1 [source_file: expected0]
        PARAM_LIST 1 [source_file: expected0]
        BLOCK 1 [source_file: expected0]
            IF 1 [source_file: expected0]
                TRUE 1 [source_file: expected0]
                BLOCK 1 [added_block: 1] [source_file: expected0]
                    EXPR_RESULT 1 [source_file: expected0]
                        CALL 1 [free_call: 1] [source_file: expected0]
                            NAME alert 1 [source_file: expected0]
                            NUMBER 1.0 1 [source_file: expected0]
                BLOCK 1 [added_block: 1] [source_file: expected0]
                    EXPR_RESULT 1 [source_file: expected0]
                        CALL 1 [free_call: 1] [source_file: expected0]
                            NAME alert 1 [source_file: expected0]
                            NUMBER 2.0 1 [source_file: expected0]
    EXPR_RESULT 1 [source_file: expected0]
        ASSIGN 1 [source_file: expected0]
            GETPROP 1 [source_file: expected0]
                NAME window 1 [source_file: expected0]
                STRING foo 1 [source_file: expected0]
            NEW 1 [source_file: expected0]
                NAME Widget 1 [source_file: expected0]
    EXPR_RESULT 1 [source_file: expected0]
        ASSIGN 1 [source_file: expected0]
            GETPROP 1 [source_file: expected0]
                NAME window 1 [source_file: expected0]
                STRING bar 1 [source_file: expected0]
            NAME search 1 [source_file: expected0]


Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
    VAR 1 [source_file: testcode]
        NAME enabled 1 [source_file: testcode]
            TRUE 1 [source_file: testcode]
    FUNCTION Widget 1 [source_file: testcode]
        NAME Widget 1 [source_file: testcode]
        PARAM_LIST 1 [source_file: testcode]
        BLOCK 1 [source_file: testcode]
    EXPR_RESULT 1 [source_file: testcode]
        ASSIGN 1 [source_file: testcode]
            GETPROP 1 [source_file: testcode]
                NAME Widget 1 [source_file: testcode]
                STRING prototype 1 [source_file: testcode]
            OBJECTLIT 1 [source_file: testcode]
                STRING_KEY frob 1 [source_file: testcode]
                    FUNCTION  1 [source_file: testcode]
                        NAME  1 [source_file: testcode]
                        PARAM_LIST 1 [source_file: testcode]
                        BLOCK 1 [source_file: testcode]
                            EXPR_RESULT 1 [source_file: testcode]
                                CALL 1 [free_call: 1] [source_file: testcode]
                                    NAME search 1 [source_file: testcode]
    FUNCTION search 1 [source_file: testcode]
        NAME search 1 [source_file: testcode]
        PARAM_LIST 1 [source_file: testcode]
        BLOCK 1 [source_file: testcode]
            IF 1 [source_file: testcode]
                NAME enabled 1 [source_file: testcode]
                BLOCK 1 [added_block: 1] [source_file: testcode]
                    EXPR_RESULT 1 [source_file: testcode]
                        CALL 1 [free_call: 1] [source_file: testcode]
                            NAME alert 1 [source_file: testcode]
                            NUMBER 1.0 1 [source_file: testcode]
                BLOCK 1 [added_block: 1] [source_file: testcode]
                    EXPR_RESULT 1 [source_file: testcode]
                        CALL 1 [free_call: 1] [source_file: testcode]
                            NAME alert 1 [source_file: testcode]
                            NUMBER 2.0 1 [source_file: testcode]
    EXPR_RESULT 1 [source_file: testcode]
        ASSIGN 1 [source_file: testcode]
            GETPROP 1 [source_file: testcode]
                NAME window 1 [source_file: testcode]
                STRING foo 1 [source_file: testcode]
            NEW 1 [source_file: testcode]
                NAME Widget 1 [source_file: testcode]
    EXPR_RESULT 1 [source_file: testcode]
        ASSIGN 1 [source_file: testcode]
            GETPROP 1 [source_file: testcode]
                NAME window 1 [source_file: testcode]
                STRING bar 1 [source_file: testcode]
            NAME search 1 [source_file: testcode]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineVariablesTest.testIssue354(InlineVariablesTest.java:1124)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testNoInlineGetpropIntoCall" time="0.001">
    <failure message="&#xa;Expected: b()&#xa;Result:   var a=b;a()&#xa;Node tree inequality:&#xa;Tree1:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;        EXPR_RESULT 1 [source_file: expected0]&#xa;            CALL 1 [free_call: 1] [source_file: expected0]&#xa;                NAME b 1 [source_file: expected0]&#xa;&#xa;&#xa;Tree2:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME a 1 [source_file: testcode]&#xa;                NAME b 1 [source_file: testcode]&#xa;        EXPR_RESULT 1 [source_file: testcode]&#xa;            CALL 1 [free_call: 1] [source_file: testcode]&#xa;                NAME a 1 [source_file: testcode]&#xa;&#xa;&#xa;Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;    EXPR_RESULT 1 [source_file: expected0]&#xa;        CALL 1 [free_call: 1] [source_file: expected0]&#xa;            NAME b 1 [source_file: expected0]&#xa;&#xa;&#xa;Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME a 1 [source_file: testcode]&#xa;            NAME b 1 [source_file: testcode]&#xa;    EXPR_RESULT 1 [source_file: testcode]&#xa;        CALL 1 [free_call: 1] [source_file: testcode]&#xa;            NAME a 1 [source_file: testcode]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: b()
Result:   var a=b;a()
Node tree inequality:
Tree1:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        EXPR_RESULT 1 [source_file: expected0]
            CALL 1 [free_call: 1] [source_file: expected0]
                NAME b 1 [source_file: expected0]


Tree2:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
        VAR 1 [source_file: testcode]
            NAME a 1 [source_file: testcode]
                NAME b 1 [source_file: testcode]
        EXPR_RESULT 1 [source_file: testcode]
            CALL 1 [free_call: 1] [source_file: testcode]
                NAME a 1 [source_file: testcode]


Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
    EXPR_RESULT 1 [source_file: expected0]
        CALL 1 [free_call: 1] [source_file: expected0]
            NAME b 1 [source_file: expected0]


Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
    VAR 1 [source_file: testcode]
        NAME a 1 [source_file: testcode]
            NAME b 1 [source_file: testcode]
    EXPR_RESULT 1 [source_file: testcode]
        CALL 1 [free_call: 1] [source_file: testcode]
            NAME a 1 [source_file: testcode]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineVariablesTest.testNoInlineGetpropIntoCall(InlineVariablesTest.java:517)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testHoistedFunction1" time="0.004">
    <failure message="&#xa;Expected: function f(){return 1}&#xa;Result:   var x=1;function f(){return x}&#xa;Node tree inequality:&#xa;Tree1:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;        FUNCTION f 1 [source_file: expected0]&#xa;            NAME f 1 [source_file: expected0]&#xa;            PARAM_LIST 1 [source_file: expected0]&#xa;            BLOCK 1 [source_file: expected0]&#xa;                RETURN 1 [source_file: expected0]&#xa;                    NUMBER 1.0 1 [source_file: expected0]&#xa;&#xa;&#xa;Tree2:&#xa;BLOCK [synthetic: 1]&#xa;    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;        VAR 1 [source_file: testcode]&#xa;            NAME x 1 [source_file: testcode]&#xa;                NUMBER 1.0 1 [source_file: testcode]&#xa;        FUNCTION f 1 [source_file: testcode]&#xa;            NAME f 1 [source_file: testcode]&#xa;            PARAM_LIST 1 [source_file: testcode]&#xa;            BLOCK 1 [source_file: testcode]&#xa;                RETURN 1 [source_file: testcode]&#xa;                    NAME x 1 [source_file: testcode]&#xa;&#xa;&#xa;Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]&#xa;    FUNCTION f 1 [source_file: expected0]&#xa;        NAME f 1 [source_file: expected0]&#xa;        PARAM_LIST 1 [source_file: expected0]&#xa;        BLOCK 1 [source_file: expected0]&#xa;            RETURN 1 [source_file: expected0]&#xa;                NUMBER 1.0 1 [source_file: expected0]&#xa;&#xa;&#xa;Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]&#xa;    VAR 1 [source_file: testcode]&#xa;        NAME x 1 [source_file: testcode]&#xa;            NUMBER 1.0 1 [source_file: testcode]&#xa;    FUNCTION f 1 [source_file: testcode]&#xa;        NAME f 1 [source_file: testcode]&#xa;        PARAM_LIST 1 [source_file: testcode]&#xa;        BLOCK 1 [source_file: testcode]&#xa;            RETURN 1 [source_file: testcode]&#xa;                NAME x 1 [source_file: testcode]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: function f(){return 1}
Result:   var x=1;function f(){return x}
Node tree inequality:
Tree1:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        FUNCTION f 1 [source_file: expected0]
            NAME f 1 [source_file: expected0]
            PARAM_LIST 1 [source_file: expected0]
            BLOCK 1 [source_file: expected0]
                RETURN 1 [source_file: expected0]
                    NUMBER 1.0 1 [source_file: expected0]


Tree2:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
        VAR 1 [source_file: testcode]
            NAME x 1 [source_file: testcode]
                NUMBER 1.0 1 [source_file: testcode]
        FUNCTION f 1 [source_file: testcode]
            NAME f 1 [source_file: testcode]
            PARAM_LIST 1 [source_file: testcode]
            BLOCK 1 [source_file: testcode]
                RETURN 1 [source_file: testcode]
                    NAME x 1 [source_file: testcode]


Subtree1: SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
    FUNCTION f 1 [source_file: expected0]
        NAME f 1 [source_file: expected0]
        PARAM_LIST 1 [source_file: expected0]
        BLOCK 1 [source_file: expected0]
            RETURN 1 [source_file: expected0]
                NUMBER 1.0 1 [source_file: expected0]


Subtree2: SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
    VAR 1 [source_file: testcode]
        NAME x 1 [source_file: testcode]
            NUMBER 1.0 1 [source_file: testcode]
    FUNCTION f 1 [source_file: testcode]
        NAME f 1 [source_file: testcode]
        PARAM_LIST 1 [source_file: testcode]
        BLOCK 1 [source_file: testcode]
            RETURN 1 [source_file: testcode]
                NAME x 1 [source_file: testcode]

	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:1161)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:935)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:543)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:509)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:450)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:408)
	at com.google.javascript.jscomp.InlineVariablesTest.testHoistedFunction1(InlineVariablesTest.java:1076)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testHoistedFunction2" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testForIn" time="0.005" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testDoNotInlineIncrement" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testDoNotInlineIntoLhsOfAssign" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testDoNotExitLoop" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.InlineVariablesTest" name="testRenamePropertyFunction" time="0.001" />
  <system-out><![CDATA[]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
