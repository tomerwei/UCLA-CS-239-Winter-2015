<?xml version="1.0" encoding="UTF-8" ?>
<testsuite errors="9" failures="4" hostname="cs-210-206.cs.ucla.edu" name="com.google.javascript.jscomp.FunctionInjectorTest" skipped="0" tests="133" time="0.178" timestamp="2015-03-09T03:17:23">
  <properties>
    <property name="java.vendor" value="Oracle Corporation" />
    <property name="lib.dir" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/lib" />
    <property name="refasterjs-jarfile" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/build/refasterjs.jar" />
    <property name="sun.java.launcher" value="SUN_STANDARD" />
    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers" />
    <property name="os.name" value="Mac OS X" />
    <property name="sun.boot.class.path" value="/Library/Java/JavaVirtualMachines/jdk1.7.0_75.jdk/Contents/Home/jre/lib/resources.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_75.jdk/Contents/Home/jre/lib/rt.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_75.jdk/Contents/Home/jre/lib/sunrsasign.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_75.jdk/Contents/Home/jre/lib/jsse.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_75.jdk/Contents/Home/jre/lib/jce.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_75.jdk/Contents/Home/jre/lib/charsets.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_75.jdk/Contents/Home/jre/lib/jfr.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_75.jdk/Contents/Home/jre/classes" />
    <property name="maven-repository-id" value="sonatype-nexus-staging" />
    <property name="java.vm.specification.vendor" value="Oracle Corporation" />
    <property name="ant.home" value="//Users/linmanna/ant" />
    <property name="java.runtime.version" value="1.7.0_75-b13" />
    <property name="gen.dir" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/gen" />
    <property name="user.name" value="linmanna" />
    <property name="ant.file.compiler" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/build.xml" />
    <property name="build.dir" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/build" />
    <property name="ant.build.javac.target" value="1.7" />
    <property name="user.language" value="zh" />
    <property name="test.method" value="" />
    <property name="sun.boot.library.path" value="/Library/Java/JavaVirtualMachines/jdk1.7.0_75.jdk/Contents/Home/jre/lib" />
    <property name="ant.project.default-target" value="jar" />
    <property name="ant.project.name" value="compiler" />
    <property name="java.version" value="1.7.0_75" />
    <property name="user.timezone" value="" />
    <property name="sun.arch.data.model" value="64" />
    <property name="http.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16" />
    <property name="java.endorsed.dirs" value="/Library/Java/JavaVirtualMachines/jdk1.7.0_75.jdk/Contents/Home/jre/lib/endorsed" />
    <property name="sun.cpu.isalist" value="" />
    <property name="sun.jnu.encoding" value="UTF-8" />
    <property name="file.encoding.pkg" value="sun.io" />
    <property name="file.separator" value="/" />
    <property name="java.specification.name" value="Java Platform API Specification" />
    <property name="protoc.executable" value="protoc" />
    <property name="classes.dir" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/build/classes" />
    <property name="java.class.version" value="51.0" />
    <property name="testClasses.dir" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/build/test" />
    <property name="user.country" value="CN" />
    <property name="java.home" value="/Library/Java/JavaVirtualMachines/jdk1.7.0_75.jdk/Contents/Home/jre" />
    <property name="java.vm.info" value="mixed mode" />
    <property name="externs.dir" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/externs" />
    <property name="ant.file" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/build.xml" />
    <property name="os.version" value="10.9.5" />
    <property name="javac.debug" value="on" />
    <property name="path.separator" value=":" />
    <property name="java.vm.version" value="24.75-b04" />
    <property name="ant.library.dir" value="//Users/linmanna/ant/lib" />
    <property name="java.awt.printerjob" value="sun.lwawt.macosx.CPrinterJob" />
    <property name="webservice-jarfile" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/build/webservice.jar" />
    <property name="sun.io.unicode.encoding" value="UnicodeBig" />
    <property name="test.fork" value="true" />
    <property name="webservice.dir" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/src/com/google/javascript/jscomp/webservice" />
    <property name="awt.toolkit" value="sun.lwawt.macosx.LWCToolkit" />
    <property name="buildlib.dir" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/build/lib" />
    <property name="socksNonProxyHosts" value="local|*.local|169.254/16|*.169.254/16" />
    <property name="ftp.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16" />
    <property name="ant.build.javac.source" value="1.7" />
    <property name="refasterjs.dir" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/src/com/google/javascript/refactoring" />
    <property name="user.home" value="/Users/linmanna" />
    <property name="java.specification.vendor" value="Oracle Corporation" />
    <property name="test.dir" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/test" />
    <property name="java.library.path" value="/Users/linmanna/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:." />
    <property name="java.vendor.url" value="http://java.oracle.com/" />
    <property name="java.vm.vendor" value="Oracle Corporation" />
    <property name="gopherProxySet" value="false" />
    <property name="build.relVersion" value="00e3533" />
    <property name="java.runtime.name" value="Java(TM) SE Runtime Environment" />
    <property name="sun.java.command" value="org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner testsfile=/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/junittestcases4622356093930181862.properties skipNonTests=false filtertrace=true haltOnError=false haltOnFailure=false formatter=org.apache.tools.ant.taskdefs.optional.junit.SummaryJUnitResultFormatter showoutput=true outputtoformatters=true logfailedtests=true threadid=0 logtestlistenerevents=false formatter=org.apache.tools.ant.taskdefs.optional.junit.BriefJUnitResultFormatter formatter=org.apache.tools.ant.taskdefs.optional.junit.XMLJUnitResultFormatter,/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/build/testoutput/IGNORETHIS.xml crashfile=/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/junitvmwatcher882389895192408063.properties propsfile=/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/junit6374663990081372210.properties" />
    <property name="java.class.path" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/build/classes:/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/lib/ant-launcher.jar:/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/lib/ant.jar:/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/lib/args4j.jar:/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/lib/gson.jar:/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/lib/guava.jar:/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/lib/jsr305.jar:/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/lib/junit.jar:/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/lib/protobuf-java.jar:/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/lib/truth.jar:/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/build/test:/Users/linmanna/ant/lib/ant-launcher.jar:/Users/linmanna/ant/lib/ant.jar:/Users/linmanna/ant/lib/ant-junit.jar:/Users/linmanna/ant/lib/ant-junit4.jar" />
    <property name="ant.version" value="Apache Ant(TM) version 1.9.4 compiled on April 29 2014" />
    <property name="test.class" value="*Test" />
    <property name="java.vm.specification.name" value="Java Virtual Machine Specification" />
    <property name="ant.file.type" value="file" />
    <property name="java.vm.specification.version" value="1.7" />
    <property name="sun.cpu.endian" value="little" />
    <property name="sun.os.patch.level" value="unknown" />
    <property name="java.io.tmpdir" value="/var/folders/_p/3swdt4h96dn79vyt21dtny9h0000gn/T/" />
    <property name="java.vendor.url.bug" value="http://bugreport.sun.com/bugreport/" />
    <property name="java.awt.graphicsenv" value="sun.awt.CGraphicsEnvironment" />
    <property name="maven-repository-url" value="https://oss.sonatype.org/service/local/staging/deploy/maven2/" />
    <property name="os.arch" value="x86_64" />
    <property name="webservice-classes.dir" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/build/webservice-classes" />
    <property name="java.ext.dirs" value="/Users/linmanna/Library/Java/Extensions:/Library/Java/JavaVirtualMachines/jdk1.7.0_75.jdk/Contents/Home/jre/lib/ext:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java" />
    <property name="user.dir" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler" />
    <property name="ant.file.type.compiler" value="file" />
    <property name="line.separator" value="&#xa;" />
    <property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM" />
    <property name="refasterjs-classes.dir" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/build/refasterjs-classes" />
    <property name="basedir" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler" />
    <property name="ant.java.version" value="1.7" />
    <property name="ant.core.lib" value="/Users/linmanna/ant/lib/ant.jar" />
    <property name="file.encoding" value="UTF-8" />
    <property name="closure.build.dir" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/build" />
    <property name="compiler-jarfile" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/build/compiler.jar" />
    <property name="java.specification.version" value="1.7" />
    <property name="src.dir" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/src" />
    <property name="ant.project.invoked-targets" value="clean,compile,compile-tests,test" />
    <property name="javadoc.dir" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/build/javadoc" />
    <property name="tools.dir" value="/Users/linmanna/Documents/proj/UCLA-CS-239-Winter-2015/Part_B/Benchmark/closure-compiler/tools" />
  </properties>
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testIsSimpleFunction1" time="0.0" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testIsSimpleFunction2" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testIsSimpleFunction3" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testIsSimpleFunction4" time="0.0" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testIsSimpleFunction5" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testIsSimpleFunction6" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testIsSimpleFunction7" time="0.0" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testCanInlineReferenceToFunction1" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testCanInlineReferenceToFunction2" time="0.0" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testCanInlineReferenceToFunction3" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testCanInlineReferenceToFunction4" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testCanInlineReferenceToFunction5" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testCanInlineReferenceToFunction6" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testCanInlineReferenceToFunction7" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testCanInlineReferenceToFunction8" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testCanInlineReferenceToFunction9" time="0.0" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testCanInlineReferenceToFunction10" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testCanInlineReferenceToFunction11" time="0.0" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testCanInlineReferenceToFunction12" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testCanInlineReferenceToFunction12b" time="0.0" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testCanInlineReferenceToFunction14" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testCanInlineReferenceToFunction15" time="0.0" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testCanInlineReferenceToFunction16" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testCanInlineReferenceToFunction17" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testCanInlineReferenceToFunction18" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testCanInlineReferenceToFunction19" time="0.0" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testCanInlineReferenceToFunction20" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testCanInlineReferenceToFunction21" time="0.0" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testCanInlineReferenceToFunction22" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testCanInlineReferenceToFunction23" time="0.0" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testCanInlineReferenceToFunction24" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testCanInlineReferenceToFunction25" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testCanInlineReferenceToFunction26" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testCanInlineReferenceToFunction27" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testCanInlineReferenceToFunction28" time="0.0" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testCanInlineReferenceToFunction29" time="0.0" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testCanInlineReferenceToFunction30" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testCanInlineReferenceToFunction31" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testCanInlineReferenceToFunction32" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testCanInlineReferenceToFunction33" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testCanInlineReferenceToFunction34" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testCanInlineReferenceToFunction35" time="0.0" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testCanInlineReferenceToFunction36" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testCanInlineReferenceToFunction37" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testCanInlineReferenceToFunction38" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testCanInlineReferenceToFunction39" time="0.0" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testCanInlineReferenceToFunction40" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testCanInlineReferenceToFunction41" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testCanInlineReferenceToFunction42" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testCanInlineReferenceToFunction43" time="0.0" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testCanInlineReferenceToFunction44" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testCanInlineReferenceToFunction45" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testCanInlineReferenceToFunction46" time="0.0" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testCanInlineReferenceToFunction47" time="0.0" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testCanInlineReferenceToFunction48" time="0.0" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testCanInlineReferenceToFunction49" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testCanInlineReferenceToFunction50" time="0.0" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testCanInlineReferenceToFunction51" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testCanInlineReferenceToFunctionInExpression1" time="0.0" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testCanInlineReferenceToFunctionInExpression2" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testCanInlineReferenceToFunctionInExpression3" time="0.0" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testCanInlineReferenceToFunctionInExpression4" time="0.0" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testCanInlineReferenceToFunctionInExpression5" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testCanInlineReferenceToFunctionInExpression5a" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testCanInlineReferenceToFunctionInExpression6" time="0.0" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testCanInlineReferenceToFunctionInExpression7" time="0.0" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testCanInlineReferenceToFunctionInExpression7a" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testCanInlineReferenceToFunctionInExpression8" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testCanInlineReferenceToFunctionInExpression9" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testCanInlineReferenceToFunctionInExpression10" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testCanInlineReferenceToFunctionInExpression10a" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testCanInlineReferenceToFunctionInExpression12" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testCanInlineReferenceToFunctionInExpression13" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testCanInlineReferenceToFunctionInExpression14" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testCanInlineReferenceToFunctionInExpression14a" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testCanInlineReferenceToFunctionInExpression18" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testCanInlineReferenceToFunctionInExpression19" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testCanInlineReferenceToFunctionInExpression19a" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testCanInlineReferenceToFunctionInExpression21" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testCanInlineReferenceToFunctionInExpression21a" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testCanInlineReferenceToFunctionInExpression22" time="0.0" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testCanInlineReferenceToFunctionInExpression22a" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testCanInlineReferenceToFunctionInExpression23" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testCanInlineReferenceToFunctionInExpression23a" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testCanInlineReferenceToFunctionInLoop1" time="0.0" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testCanInlineReferenceToFunctionInLoop2" time="0.0" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testInline1" time="0.003" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testInline2" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testInline3" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testInline4" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testInline5" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testInline6" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testInline7" time="0.001">
    <failure message="canInlineReferenceToFunction should not be CAN_NOT_INLINE" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: canInlineReferenceToFunction should not be CAN_NOT_INLINE
	at com.google.javascript.jscomp.FunctionInjectorTest$2.call(FunctionInjectorTest.java:1481)
	at com.google.javascript.jscomp.FunctionInjectorTest$TestCallback.visit(FunctionInjectorTest.java:1544)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:576)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:289)
	at com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:528)
	at com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1508)
	at com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1417)
	at com.google.javascript.jscomp.FunctionInjectorTest.testInline7(FunctionInjectorTest.java:820)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testInline8" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testInline9" time="0.001">
    <failure message="canInlineReferenceToFunction should not be CAN_NOT_INLINE" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: canInlineReferenceToFunction should not be CAN_NOT_INLINE
	at com.google.javascript.jscomp.FunctionInjectorTest$2.call(FunctionInjectorTest.java:1481)
	at com.google.javascript.jscomp.FunctionInjectorTest$TestCallback.visit(FunctionInjectorTest.java:1544)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:576)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:289)
	at com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:528)
	at com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1508)
	at com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1417)
	at com.google.javascript.jscomp.FunctionInjectorTest.testInline9(FunctionInjectorTest.java:836)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testInline10" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testInline11" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testInline12" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testInline13" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testInline14" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testInline15" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testInline16" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testInline17" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testInline18" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testInline19" time="0.004">
    <failure message="&#xa;Expected: var x=1;var y=2;function foo(a,b){x=b;y=a}function bar(){var a$$inline_0=x;x=y;y=a$$inline_0}&#xa;Result: var x=1;var y=2;function foo(a,b){x=b;y=a}function bar(){x=y;y=x}&#xa;Node tree inequality:&#xa;Tree1:&#xa;SCRIPT 1 [synthetic: 1] [source_file: [testcode]] [input_id: InputId: [testcode]]&#xa;    VAR 1 [source_file: [testcode]]&#xa;        NAME x 1 [source_file: [testcode]]&#xa;            NUMBER 1.0 1 [source_file: [testcode]]&#xa;    VAR 1 [source_file: [testcode]]&#xa;        NAME y 1 [source_file: [testcode]]&#xa;            NUMBER 2.0 1 [source_file: [testcode]]&#xa;    FUNCTION foo 1 [source_file: [testcode]]&#xa;        NAME foo 1 [source_file: [testcode]]&#xa;        PARAM_LIST 1 [source_file: [testcode]]&#xa;            NAME a 1 [source_file: [testcode]]&#xa;            NAME b 1 [source_file: [testcode]]&#xa;        BLOCK 1 [source_file: [testcode]]&#xa;            EXPR_RESULT 1 [source_file: [testcode]]&#xa;                ASSIGN 1 [source_file: [testcode]]&#xa;                    NAME x 1 [source_file: [testcode]]&#xa;                    NAME b 1 [source_file: [testcode]]&#xa;            EXPR_RESULT 1 [source_file: [testcode]]&#xa;                ASSIGN 1 [source_file: [testcode]]&#xa;                    NAME y 1 [source_file: [testcode]]&#xa;                    NAME a 1 [source_file: [testcode]]&#xa;    EMPTY 1 [source_file: [testcode]]&#xa;    FUNCTION bar 1 [source_file: [testcode]]&#xa;        NAME bar 1 [source_file: [testcode]]&#xa;        PARAM_LIST 1 [source_file: [testcode]]&#xa;        BLOCK 1 [source_file: [testcode]]&#xa;            BLOCK 1 [source_file: [testcode]]&#xa;                VAR 1 [source_file: [testcode]]&#xa;                    NAME a$$inline_0 1 [source_file: [testcode]]&#xa;                        NAME x 1 [source_file: [testcode]]&#xa;                EXPR_RESULT 1 [source_file: [testcode]]&#xa;                    ASSIGN 1 [source_file: [testcode]]&#xa;                        NAME x 1 [source_file: [testcode]]&#xa;                        NAME y 1 [source_file: [testcode]]&#xa;                EXPR_RESULT 1 [source_file: [testcode]]&#xa;                    ASSIGN 1 [source_file: [testcode]]&#xa;                        NAME y 1 [source_file: [testcode]]&#xa;                        NAME a$$inline_0 1 [source_file: [testcode]]&#xa;&#xa;&#xa;Tree2:&#xa;SCRIPT 1 [synthetic: 1] [source_file: code] [input_id: InputId: code]&#xa;    VAR 1 [source_file: code]&#xa;        NAME x 1 [is_constant_name: 1] [source_file: code]&#xa;            NUMBER 1.0 1 [source_file: code]&#xa;    VAR 1 [source_file: code]&#xa;        NAME y 1 [is_constant_name: 1] [source_file: code]&#xa;            NUMBER 2.0 1 [source_file: code]&#xa;    FUNCTION foo 1 [source_file: code]&#xa;        NAME foo 1 [source_file: code]&#xa;        PARAM_LIST 1 [source_file: code]&#xa;            NAME a 1 [is_constant_name: 1] [source_file: code]&#xa;            NAME b 1 [is_constant_name: 1] [source_file: code]&#xa;        BLOCK 1 [source_file: code]&#xa;            EXPR_RESULT 1 [source_file: code]&#xa;                ASSIGN 1 [source_file: code]&#xa;                    NAME x 1 [is_constant_name: 1] [source_file: code]&#xa;                    NAME b 1 [is_constant_name: 1] [source_file: code]&#xa;            EXPR_RESULT 1 [source_file: code]&#xa;                ASSIGN 1 [source_file: code]&#xa;                    NAME y 1 [is_constant_name: 1] [source_file: code]&#xa;                    NAME a 1 [is_constant_name: 1] [source_file: code]&#xa;    EMPTY 1 [source_file: code]&#xa;    FUNCTION bar 1 [source_file: code]&#xa;        NAME bar 1 [source_file: code]&#xa;        PARAM_LIST 1 [source_file: code]&#xa;        BLOCK 1 [source_file: code]&#xa;            BLOCK 1 [source_file: code]&#xa;                EXPR_RESULT 1 [source_file: code]&#xa;                    ASSIGN 1 [source_file: code]&#xa;                        NAME x 1 [is_constant_name: 1] [source_file: code]&#xa;                        NAME y 1 [is_constant_name: 1] [source_file: code]&#xa;                EXPR_RESULT 1 [source_file: code]&#xa;                    ASSIGN 1 [source_file: code]&#xa;                        NAME y 1 [is_constant_name: 1] [source_file: code]&#xa;                        NAME x 1 [is_constant_name: 1] [source_file: code]&#xa;&#xa;&#xa;Subtree1: BLOCK 1 [source_file: [testcode]]&#xa;    VAR 1 [source_file: [testcode]]&#xa;        NAME a$$inline_0 1 [source_file: [testcode]]&#xa;            NAME x 1 [source_file: [testcode]]&#xa;    EXPR_RESULT 1 [source_file: [testcode]]&#xa;        ASSIGN 1 [source_file: [testcode]]&#xa;            NAME x 1 [source_file: [testcode]]&#xa;            NAME y 1 [source_file: [testcode]]&#xa;    EXPR_RESULT 1 [source_file: [testcode]]&#xa;        ASSIGN 1 [source_file: [testcode]]&#xa;            NAME y 1 [source_file: [testcode]]&#xa;            NAME a$$inline_0 1 [source_file: [testcode]]&#xa;&#xa;&#xa;Subtree2: BLOCK 1 [source_file: code]&#xa;    EXPR_RESULT 1 [source_file: code]&#xa;        ASSIGN 1 [source_file: code]&#xa;            NAME x 1 [is_constant_name: 1] [source_file: code]&#xa;            NAME y 1 [is_constant_name: 1] [source_file: code]&#xa;    EXPR_RESULT 1 [source_file: code]&#xa;        ASSIGN 1 [source_file: code]&#xa;            NAME y 1 [is_constant_name: 1] [source_file: code]&#xa;            NAME x 1 [is_constant_name: 1] [source_file: code]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: var x=1;var y=2;function foo(a,b){x=b;y=a}function bar(){var a$$inline_0=x;x=y;y=a$$inline_0}
Result: var x=1;var y=2;function foo(a,b){x=b;y=a}function bar(){x=y;y=x}
Node tree inequality:
Tree1:
SCRIPT 1 [synthetic: 1] [source_file: [testcode]] [input_id: InputId: [testcode]]
    VAR 1 [source_file: [testcode]]
        NAME x 1 [source_file: [testcode]]
            NUMBER 1.0 1 [source_file: [testcode]]
    VAR 1 [source_file: [testcode]]
        NAME y 1 [source_file: [testcode]]
            NUMBER 2.0 1 [source_file: [testcode]]
    FUNCTION foo 1 [source_file: [testcode]]
        NAME foo 1 [source_file: [testcode]]
        PARAM_LIST 1 [source_file: [testcode]]
            NAME a 1 [source_file: [testcode]]
            NAME b 1 [source_file: [testcode]]
        BLOCK 1 [source_file: [testcode]]
            EXPR_RESULT 1 [source_file: [testcode]]
                ASSIGN 1 [source_file: [testcode]]
                    NAME x 1 [source_file: [testcode]]
                    NAME b 1 [source_file: [testcode]]
            EXPR_RESULT 1 [source_file: [testcode]]
                ASSIGN 1 [source_file: [testcode]]
                    NAME y 1 [source_file: [testcode]]
                    NAME a 1 [source_file: [testcode]]
    EMPTY 1 [source_file: [testcode]]
    FUNCTION bar 1 [source_file: [testcode]]
        NAME bar 1 [source_file: [testcode]]
        PARAM_LIST 1 [source_file: [testcode]]
        BLOCK 1 [source_file: [testcode]]
            BLOCK 1 [source_file: [testcode]]
                VAR 1 [source_file: [testcode]]
                    NAME a$$inline_0 1 [source_file: [testcode]]
                        NAME x 1 [source_file: [testcode]]
                EXPR_RESULT 1 [source_file: [testcode]]
                    ASSIGN 1 [source_file: [testcode]]
                        NAME x 1 [source_file: [testcode]]
                        NAME y 1 [source_file: [testcode]]
                EXPR_RESULT 1 [source_file: [testcode]]
                    ASSIGN 1 [source_file: [testcode]]
                        NAME y 1 [source_file: [testcode]]
                        NAME a$$inline_0 1 [source_file: [testcode]]


Tree2:
SCRIPT 1 [synthetic: 1] [source_file: code] [input_id: InputId: code]
    VAR 1 [source_file: code]
        NAME x 1 [is_constant_name: 1] [source_file: code]
            NUMBER 1.0 1 [source_file: code]
    VAR 1 [source_file: code]
        NAME y 1 [is_constant_name: 1] [source_file: code]
            NUMBER 2.0 1 [source_file: code]
    FUNCTION foo 1 [source_file: code]
        NAME foo 1 [source_file: code]
        PARAM_LIST 1 [source_file: code]
            NAME a 1 [is_constant_name: 1] [source_file: code]
            NAME b 1 [is_constant_name: 1] [source_file: code]
        BLOCK 1 [source_file: code]
            EXPR_RESULT 1 [source_file: code]
                ASSIGN 1 [source_file: code]
                    NAME x 1 [is_constant_name: 1] [source_file: code]
                    NAME b 1 [is_constant_name: 1] [source_file: code]
            EXPR_RESULT 1 [source_file: code]
                ASSIGN 1 [source_file: code]
                    NAME y 1 [is_constant_name: 1] [source_file: code]
                    NAME a 1 [is_constant_name: 1] [source_file: code]
    EMPTY 1 [source_file: code]
    FUNCTION bar 1 [source_file: code]
        NAME bar 1 [source_file: code]
        PARAM_LIST 1 [source_file: code]
        BLOCK 1 [source_file: code]
            BLOCK 1 [source_file: code]
                EXPR_RESULT 1 [source_file: code]
                    ASSIGN 1 [source_file: code]
                        NAME x 1 [is_constant_name: 1] [source_file: code]
                        NAME y 1 [is_constant_name: 1] [source_file: code]
                EXPR_RESULT 1 [source_file: code]
                    ASSIGN 1 [source_file: code]
                        NAME y 1 [is_constant_name: 1] [source_file: code]
                        NAME x 1 [is_constant_name: 1] [source_file: code]


Subtree1: BLOCK 1 [source_file: [testcode]]
    VAR 1 [source_file: [testcode]]
        NAME a$$inline_0 1 [source_file: [testcode]]
            NAME x 1 [source_file: [testcode]]
    EXPR_RESULT 1 [source_file: [testcode]]
        ASSIGN 1 [source_file: [testcode]]
            NAME x 1 [source_file: [testcode]]
            NAME y 1 [source_file: [testcode]]
    EXPR_RESULT 1 [source_file: [testcode]]
        ASSIGN 1 [source_file: [testcode]]
            NAME y 1 [source_file: [testcode]]
            NAME a$$inline_0 1 [source_file: [testcode]]


Subtree2: BLOCK 1 [source_file: code]
    EXPR_RESULT 1 [source_file: code]
        ASSIGN 1 [source_file: code]
            NAME x 1 [is_constant_name: 1] [source_file: code]
            NAME y 1 [is_constant_name: 1] [source_file: code]
    EXPR_RESULT 1 [source_file: code]
        ASSIGN 1 [source_file: code]
            NAME y 1 [is_constant_name: 1] [source_file: code]
            NAME x 1 [is_constant_name: 1] [source_file: code]

	at com.google.javascript.jscomp.FunctionInjectorTest$2.call(FunctionInjectorTest.java:1499)
	at com.google.javascript.jscomp.FunctionInjectorTest$TestCallback.visit(FunctionInjectorTest.java:1544)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:576)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseFunction(NodeTraversal.java:610)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:562)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:289)
	at com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:528)
	at com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1508)
	at com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1417)
	at com.google.javascript.jscomp.FunctionInjectorTest.testInline19(FunctionInjectorTest.java:931)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testInline19b" time="0.003">
    <failure message="&#xa;Expected: var x=1;var y=2;function foo(a,b){y=a;x=b}function bar(){var b$$inline_1=y;y=x;x=b$$inline_1}&#xa;Result: var x=1;var y=2;function foo(a,b){y=a;x=b}function bar(){y=x;x=y}&#xa;Node tree inequality:&#xa;Tree1:&#xa;SCRIPT 1 [synthetic: 1] [source_file: [testcode]] [input_id: InputId: [testcode]]&#xa;    VAR 1 [source_file: [testcode]]&#xa;        NAME x 1 [source_file: [testcode]]&#xa;            NUMBER 1.0 1 [source_file: [testcode]]&#xa;    VAR 1 [source_file: [testcode]]&#xa;        NAME y 1 [source_file: [testcode]]&#xa;            NUMBER 2.0 1 [source_file: [testcode]]&#xa;    FUNCTION foo 1 [source_file: [testcode]]&#xa;        NAME foo 1 [source_file: [testcode]]&#xa;        PARAM_LIST 1 [source_file: [testcode]]&#xa;            NAME a 1 [source_file: [testcode]]&#xa;            NAME b 1 [source_file: [testcode]]&#xa;        BLOCK 1 [source_file: [testcode]]&#xa;            EXPR_RESULT 1 [source_file: [testcode]]&#xa;                ASSIGN 1 [source_file: [testcode]]&#xa;                    NAME y 1 [source_file: [testcode]]&#xa;                    NAME a 1 [source_file: [testcode]]&#xa;            EXPR_RESULT 1 [source_file: [testcode]]&#xa;                ASSIGN 1 [source_file: [testcode]]&#xa;                    NAME x 1 [source_file: [testcode]]&#xa;                    NAME b 1 [source_file: [testcode]]&#xa;    EMPTY 1 [source_file: [testcode]]&#xa;    FUNCTION bar 1 [source_file: [testcode]]&#xa;        NAME bar 1 [source_file: [testcode]]&#xa;        PARAM_LIST 1 [source_file: [testcode]]&#xa;        BLOCK 1 [source_file: [testcode]]&#xa;            BLOCK 1 [source_file: [testcode]]&#xa;                VAR 1 [source_file: [testcode]]&#xa;                    NAME b$$inline_1 1 [source_file: [testcode]]&#xa;                        NAME y 1 [source_file: [testcode]]&#xa;                EXPR_RESULT 1 [source_file: [testcode]]&#xa;                    ASSIGN 1 [source_file: [testcode]]&#xa;                        NAME y 1 [source_file: [testcode]]&#xa;                        NAME x 1 [source_file: [testcode]]&#xa;                EXPR_RESULT 1 [source_file: [testcode]]&#xa;                    ASSIGN 1 [source_file: [testcode]]&#xa;                        NAME x 1 [source_file: [testcode]]&#xa;                        NAME b$$inline_1 1 [source_file: [testcode]]&#xa;&#xa;&#xa;Tree2:&#xa;SCRIPT 1 [synthetic: 1] [source_file: code] [input_id: InputId: code]&#xa;    VAR 1 [source_file: code]&#xa;        NAME x 1 [is_constant_name: 1] [source_file: code]&#xa;            NUMBER 1.0 1 [source_file: code]&#xa;    VAR 1 [source_file: code]&#xa;        NAME y 1 [is_constant_name: 1] [source_file: code]&#xa;            NUMBER 2.0 1 [source_file: code]&#xa;    FUNCTION foo 1 [source_file: code]&#xa;        NAME foo 1 [source_file: code]&#xa;        PARAM_LIST 1 [source_file: code]&#xa;            NAME a 1 [is_constant_name: 1] [source_file: code]&#xa;            NAME b 1 [is_constant_name: 1] [source_file: code]&#xa;        BLOCK 1 [source_file: code]&#xa;            EXPR_RESULT 1 [source_file: code]&#xa;                ASSIGN 1 [source_file: code]&#xa;                    NAME y 1 [is_constant_name: 1] [source_file: code]&#xa;                    NAME a 1 [is_constant_name: 1] [source_file: code]&#xa;            EXPR_RESULT 1 [source_file: code]&#xa;                ASSIGN 1 [source_file: code]&#xa;                    NAME x 1 [is_constant_name: 1] [source_file: code]&#xa;                    NAME b 1 [is_constant_name: 1] [source_file: code]&#xa;    EMPTY 1 [source_file: code]&#xa;    FUNCTION bar 1 [source_file: code]&#xa;        NAME bar 1 [source_file: code]&#xa;        PARAM_LIST 1 [source_file: code]&#xa;        BLOCK 1 [source_file: code]&#xa;            BLOCK 1 [source_file: code]&#xa;                EXPR_RESULT 1 [source_file: code]&#xa;                    ASSIGN 1 [source_file: code]&#xa;                        NAME y 1 [is_constant_name: 1] [source_file: code]&#xa;                        NAME x 1 [is_constant_name: 1] [source_file: code]&#xa;                EXPR_RESULT 1 [source_file: code]&#xa;                    ASSIGN 1 [source_file: code]&#xa;                        NAME x 1 [is_constant_name: 1] [source_file: code]&#xa;                        NAME y 1 [is_constant_name: 1] [source_file: code]&#xa;&#xa;&#xa;Subtree1: BLOCK 1 [source_file: [testcode]]&#xa;    VAR 1 [source_file: [testcode]]&#xa;        NAME b$$inline_1 1 [source_file: [testcode]]&#xa;            NAME y 1 [source_file: [testcode]]&#xa;    EXPR_RESULT 1 [source_file: [testcode]]&#xa;        ASSIGN 1 [source_file: [testcode]]&#xa;            NAME y 1 [source_file: [testcode]]&#xa;            NAME x 1 [source_file: [testcode]]&#xa;    EXPR_RESULT 1 [source_file: [testcode]]&#xa;        ASSIGN 1 [source_file: [testcode]]&#xa;            NAME x 1 [source_file: [testcode]]&#xa;            NAME b$$inline_1 1 [source_file: [testcode]]&#xa;&#xa;&#xa;Subtree2: BLOCK 1 [source_file: code]&#xa;    EXPR_RESULT 1 [source_file: code]&#xa;        ASSIGN 1 [source_file: code]&#xa;            NAME y 1 [is_constant_name: 1] [source_file: code]&#xa;            NAME x 1 [is_constant_name: 1] [source_file: code]&#xa;    EXPR_RESULT 1 [source_file: code]&#xa;        ASSIGN 1 [source_file: code]&#xa;            NAME x 1 [is_constant_name: 1] [source_file: code]&#xa;            NAME y 1 [is_constant_name: 1] [source_file: code]&#xa;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: 
Expected: var x=1;var y=2;function foo(a,b){y=a;x=b}function bar(){var b$$inline_1=y;y=x;x=b$$inline_1}
Result: var x=1;var y=2;function foo(a,b){y=a;x=b}function bar(){y=x;x=y}
Node tree inequality:
Tree1:
SCRIPT 1 [synthetic: 1] [source_file: [testcode]] [input_id: InputId: [testcode]]
    VAR 1 [source_file: [testcode]]
        NAME x 1 [source_file: [testcode]]
            NUMBER 1.0 1 [source_file: [testcode]]
    VAR 1 [source_file: [testcode]]
        NAME y 1 [source_file: [testcode]]
            NUMBER 2.0 1 [source_file: [testcode]]
    FUNCTION foo 1 [source_file: [testcode]]
        NAME foo 1 [source_file: [testcode]]
        PARAM_LIST 1 [source_file: [testcode]]
            NAME a 1 [source_file: [testcode]]
            NAME b 1 [source_file: [testcode]]
        BLOCK 1 [source_file: [testcode]]
            EXPR_RESULT 1 [source_file: [testcode]]
                ASSIGN 1 [source_file: [testcode]]
                    NAME y 1 [source_file: [testcode]]
                    NAME a 1 [source_file: [testcode]]
            EXPR_RESULT 1 [source_file: [testcode]]
                ASSIGN 1 [source_file: [testcode]]
                    NAME x 1 [source_file: [testcode]]
                    NAME b 1 [source_file: [testcode]]
    EMPTY 1 [source_file: [testcode]]
    FUNCTION bar 1 [source_file: [testcode]]
        NAME bar 1 [source_file: [testcode]]
        PARAM_LIST 1 [source_file: [testcode]]
        BLOCK 1 [source_file: [testcode]]
            BLOCK 1 [source_file: [testcode]]
                VAR 1 [source_file: [testcode]]
                    NAME b$$inline_1 1 [source_file: [testcode]]
                        NAME y 1 [source_file: [testcode]]
                EXPR_RESULT 1 [source_file: [testcode]]
                    ASSIGN 1 [source_file: [testcode]]
                        NAME y 1 [source_file: [testcode]]
                        NAME x 1 [source_file: [testcode]]
                EXPR_RESULT 1 [source_file: [testcode]]
                    ASSIGN 1 [source_file: [testcode]]
                        NAME x 1 [source_file: [testcode]]
                        NAME b$$inline_1 1 [source_file: [testcode]]


Tree2:
SCRIPT 1 [synthetic: 1] [source_file: code] [input_id: InputId: code]
    VAR 1 [source_file: code]
        NAME x 1 [is_constant_name: 1] [source_file: code]
            NUMBER 1.0 1 [source_file: code]
    VAR 1 [source_file: code]
        NAME y 1 [is_constant_name: 1] [source_file: code]
            NUMBER 2.0 1 [source_file: code]
    FUNCTION foo 1 [source_file: code]
        NAME foo 1 [source_file: code]
        PARAM_LIST 1 [source_file: code]
            NAME a 1 [is_constant_name: 1] [source_file: code]
            NAME b 1 [is_constant_name: 1] [source_file: code]
        BLOCK 1 [source_file: code]
            EXPR_RESULT 1 [source_file: code]
                ASSIGN 1 [source_file: code]
                    NAME y 1 [is_constant_name: 1] [source_file: code]
                    NAME a 1 [is_constant_name: 1] [source_file: code]
            EXPR_RESULT 1 [source_file: code]
                ASSIGN 1 [source_file: code]
                    NAME x 1 [is_constant_name: 1] [source_file: code]
                    NAME b 1 [is_constant_name: 1] [source_file: code]
    EMPTY 1 [source_file: code]
    FUNCTION bar 1 [source_file: code]
        NAME bar 1 [source_file: code]
        PARAM_LIST 1 [source_file: code]
        BLOCK 1 [source_file: code]
            BLOCK 1 [source_file: code]
                EXPR_RESULT 1 [source_file: code]
                    ASSIGN 1 [source_file: code]
                        NAME y 1 [is_constant_name: 1] [source_file: code]
                        NAME x 1 [is_constant_name: 1] [source_file: code]
                EXPR_RESULT 1 [source_file: code]
                    ASSIGN 1 [source_file: code]
                        NAME x 1 [is_constant_name: 1] [source_file: code]
                        NAME y 1 [is_constant_name: 1] [source_file: code]


Subtree1: BLOCK 1 [source_file: [testcode]]
    VAR 1 [source_file: [testcode]]
        NAME b$$inline_1 1 [source_file: [testcode]]
            NAME y 1 [source_file: [testcode]]
    EXPR_RESULT 1 [source_file: [testcode]]
        ASSIGN 1 [source_file: [testcode]]
            NAME y 1 [source_file: [testcode]]
            NAME x 1 [source_file: [testcode]]
    EXPR_RESULT 1 [source_file: [testcode]]
        ASSIGN 1 [source_file: [testcode]]
            NAME x 1 [source_file: [testcode]]
            NAME b$$inline_1 1 [source_file: [testcode]]


Subtree2: BLOCK 1 [source_file: code]
    EXPR_RESULT 1 [source_file: code]
        ASSIGN 1 [source_file: code]
            NAME y 1 [is_constant_name: 1] [source_file: code]
            NAME x 1 [is_constant_name: 1] [source_file: code]
    EXPR_RESULT 1 [source_file: code]
        ASSIGN 1 [source_file: code]
            NAME x 1 [is_constant_name: 1] [source_file: code]
            NAME y 1 [is_constant_name: 1] [source_file: code]

	at com.google.javascript.jscomp.FunctionInjectorTest$2.call(FunctionInjectorTest.java:1499)
	at com.google.javascript.jscomp.FunctionInjectorTest$TestCallback.visit(FunctionInjectorTest.java:1544)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:576)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseFunction(NodeTraversal.java:610)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:562)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:289)
	at com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:528)
	at com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1508)
	at com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1417)
	at com.google.javascript.jscomp.FunctionInjectorTest.testInline19b(FunctionInjectorTest.java:946)
</failure>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testInlineIntoLoop" time="0.005" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testInlineFunctionWithInnerFunction1" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testInlineFunctionWithInnerFunction2" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testInlineFunctionWithInnerFunction3" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testInlineFunctionWithInnerFunction4" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testInlineFunctionWithInnerFunction5" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testInlineReferenceInExpression1" time="0.003" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testInlineReferenceInExpression2" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testInlineReferenceInExpression3" time="0.003" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testInlineReferenceInExpression4" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testInlineReferenceInExpression5" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testInlineReferenceInExpression6" time="0.003">
    <error message="INTERNAL COMPILER ERROR.&#xa;Please report this problem.&#xa;&#xa;Unexpected.&#xa;  Node(CALL): code:1:49&#xa;function foo(a){return true;}; function x() {1 + foo(1) }&#xa;  Parent: NULL" type="java.lang.RuntimeException">java.lang.RuntimeException: INTERNAL COMPILER ERROR.
Please report this problem.

Unexpected.
  Node(CALL): code:1:49
function foo(a){return true;}; function x() {1 + foo(1) }
  Parent: NULL
	at com.google.javascript.jscomp.ExpressionDecomposer.extractConditional(ExpressionDecomposer.java:379)
	at com.google.javascript.jscomp.ExpressionDecomposer.exposeExpression(ExpressionDecomposer.java:236)
	at com.google.javascript.jscomp.ExpressionDecomposer.exposeExpression(ExpressionDecomposer.java:103)
	at com.google.javascript.jscomp.ExpressionDecomposer.maybeExposeExpression(ExpressionDecomposer.java:85)
	at com.google.javascript.jscomp.FunctionInjector$CallSiteType$6.prepare(FunctionInjector.java:389)
	at com.google.javascript.jscomp.FunctionInjector.maybePrepareCall(FunctionInjector.java:467)
	at com.google.javascript.jscomp.FunctionInjectorTest$2.call(FunctionInjectorTest.java:1489)
	at com.google.javascript.jscomp.FunctionInjectorTest$TestCallback.visit(FunctionInjectorTest.java:1544)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:576)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseFunction(NodeTraversal.java:610)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:562)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:289)
	at com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:528)
	at com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1508)
	at com.google.javascript.jscomp.FunctionInjectorTest.testInlineReferenceInExpression6(FunctionInjectorTest.java:1096)
Caused by: java.lang.IllegalStateException: Unexpected.
</error>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testInlineReferenceInExpression7" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testInlineReferenceInExpression8" time="0.002">
    <error message="INTERNAL COMPILER ERROR.&#xa;Please report this problem.&#xa;&#xa;Unexpected.&#xa;  Node(CALL): code:1:49&#xa;function foo(a){return true;}; function x() {1 + foo(1) }&#xa;  Parent: NULL" type="java.lang.RuntimeException">java.lang.RuntimeException: INTERNAL COMPILER ERROR.
Please report this problem.

Unexpected.
  Node(CALL): code:1:49
function foo(a){return true;}; function x() {1 + foo(1) }
  Parent: NULL
	at com.google.javascript.jscomp.ExpressionDecomposer.extractConditional(ExpressionDecomposer.java:379)
	at com.google.javascript.jscomp.ExpressionDecomposer.exposeExpression(ExpressionDecomposer.java:236)
	at com.google.javascript.jscomp.ExpressionDecomposer.exposeExpression(ExpressionDecomposer.java:103)
	at com.google.javascript.jscomp.ExpressionDecomposer.maybeExposeExpression(ExpressionDecomposer.java:85)
	at com.google.javascript.jscomp.FunctionInjector$CallSiteType$6.prepare(FunctionInjector.java:389)
	at com.google.javascript.jscomp.FunctionInjector.maybePrepareCall(FunctionInjector.java:467)
	at com.google.javascript.jscomp.FunctionInjectorTest$2.call(FunctionInjectorTest.java:1489)
	at com.google.javascript.jscomp.FunctionInjectorTest$TestCallback.visit(FunctionInjectorTest.java:1544)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:576)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseFunction(NodeTraversal.java:610)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:562)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:289)
	at com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:528)
	at com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1508)
	at com.google.javascript.jscomp.FunctionInjectorTest.testInlineReferenceInExpression8(FunctionInjectorTest.java:1120)
Caused by: java.lang.IllegalStateException: Unexpected.
</error>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testInlineReferenceInExpression9" time="0.003">
    <error message="INTERNAL COMPILER ERROR.&#xa;Please report this problem.&#xa;&#xa;Unexpected.&#xa;  Node(CALL): code:1:57&#xa;function foo(a){return true;}; function x() {var b = 1 + foo(1)}&#xa;  Parent: NULL" type="java.lang.RuntimeException">java.lang.RuntimeException: INTERNAL COMPILER ERROR.
Please report this problem.

Unexpected.
  Node(CALL): code:1:57
function foo(a){return true;}; function x() {var b = 1 + foo(1)}
  Parent: NULL
	at com.google.javascript.jscomp.ExpressionDecomposer.extractConditional(ExpressionDecomposer.java:379)
	at com.google.javascript.jscomp.ExpressionDecomposer.exposeExpression(ExpressionDecomposer.java:236)
	at com.google.javascript.jscomp.ExpressionDecomposer.exposeExpression(ExpressionDecomposer.java:103)
	at com.google.javascript.jscomp.ExpressionDecomposer.maybeExposeExpression(ExpressionDecomposer.java:85)
	at com.google.javascript.jscomp.FunctionInjector$CallSiteType$6.prepare(FunctionInjector.java:389)
	at com.google.javascript.jscomp.FunctionInjector.maybePrepareCall(FunctionInjector.java:467)
	at com.google.javascript.jscomp.FunctionInjectorTest$2.call(FunctionInjectorTest.java:1489)
	at com.google.javascript.jscomp.FunctionInjectorTest$TestCallback.visit(FunctionInjectorTest.java:1544)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:576)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseFunction(NodeTraversal.java:610)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:562)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:289)
	at com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:528)
	at com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1508)
	at com.google.javascript.jscomp.FunctionInjectorTest.testInlineReferenceInExpression9(FunctionInjectorTest.java:1132)
Caused by: java.lang.IllegalStateException: Unexpected.
</error>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testInlineReferenceInExpression11" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testInlineReferenceInExpression12" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testInlineReferenceInExpression13" time="0.001">
    <error message="INTERNAL COMPILER ERROR.&#xa;Please report this problem.&#xa;&#xa;Unexpected.&#xa;  Node(CALL): code:1:57&#xa;function foo(a){return true;}; function x() { goo() + (1?foo(1):1) }&#xa;  Parent(HOOK): code:1:55&#xa;function foo(a){return true;}; function x() { goo() + (1?foo(1):1) }&#xa;" type="java.lang.RuntimeException">java.lang.RuntimeException: INTERNAL COMPILER ERROR.
Please report this problem.

Unexpected.
  Node(CALL): code:1:57
function foo(a){return true;}; function x() { goo() + (1?foo(1):1) }
  Parent(HOOK): code:1:55
function foo(a){return true;}; function x() { goo() + (1?foo(1):1) }

	at com.google.javascript.jscomp.ExpressionDecomposer.extractConditional(ExpressionDecomposer.java:379)
	at com.google.javascript.jscomp.ExpressionDecomposer.exposeExpression(ExpressionDecomposer.java:236)
	at com.google.javascript.jscomp.ExpressionDecomposer.exposeExpression(ExpressionDecomposer.java:103)
	at com.google.javascript.jscomp.ExpressionDecomposer.maybeExposeExpression(ExpressionDecomposer.java:85)
	at com.google.javascript.jscomp.FunctionInjector$CallSiteType$6.prepare(FunctionInjector.java:389)
	at com.google.javascript.jscomp.FunctionInjector.maybePrepareCall(FunctionInjector.java:467)
	at com.google.javascript.jscomp.FunctionInjectorTest$2.call(FunctionInjectorTest.java:1489)
	at com.google.javascript.jscomp.FunctionInjectorTest$TestCallback.visit(FunctionInjectorTest.java:1544)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:576)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseFunction(NodeTraversal.java:610)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:562)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:289)
	at com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:528)
	at com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1508)
	at com.google.javascript.jscomp.FunctionInjectorTest.testInlineReferenceInExpression13(FunctionInjectorTest.java:1190)
Caused by: java.lang.IllegalStateException: Unexpected.
</error>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testInlineReferenceInExpression14" time="0.002">
    <error message="INTERNAL COMPILER ERROR.&#xa;Please report this problem.&#xa;&#xa;Unexpected.&#xa;  Node(CALL): code:1:73&#xa;var z = {};function foo(a){z = {};return true;}; function x() { z.gack = foo(1) }&#xa;  Parent: NULL" type="java.lang.RuntimeException">java.lang.RuntimeException: INTERNAL COMPILER ERROR.
Please report this problem.

Unexpected.
  Node(CALL): code:1:73
var z = {};function foo(a){z = {};return true;}; function x() { z.gack = foo(1) }
  Parent: NULL
	at com.google.javascript.jscomp.ExpressionDecomposer.extractConditional(ExpressionDecomposer.java:379)
	at com.google.javascript.jscomp.ExpressionDecomposer.exposeExpression(ExpressionDecomposer.java:236)
	at com.google.javascript.jscomp.ExpressionDecomposer.exposeExpression(ExpressionDecomposer.java:103)
	at com.google.javascript.jscomp.ExpressionDecomposer.maybeExposeExpression(ExpressionDecomposer.java:85)
	at com.google.javascript.jscomp.FunctionInjector$CallSiteType$6.prepare(FunctionInjector.java:389)
	at com.google.javascript.jscomp.FunctionInjector.maybePrepareCall(FunctionInjector.java:467)
	at com.google.javascript.jscomp.FunctionInjectorTest$2.call(FunctionInjectorTest.java:1489)
	at com.google.javascript.jscomp.FunctionInjectorTest$TestCallback.visit(FunctionInjectorTest.java:1544)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:576)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseFunction(NodeTraversal.java:610)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:562)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:289)
	at com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:528)
	at com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1508)
	at com.google.javascript.jscomp.FunctionInjectorTest.testInlineReferenceInExpression14(FunctionInjectorTest.java:1207)
Caused by: java.lang.IllegalStateException: Unexpected.
</error>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testInlineReferenceInExpression15" time="0.002">
    <error message="INTERNAL COMPILER ERROR.&#xa;Please report this problem.&#xa;&#xa;Unexpected.&#xa;  Node(CALL): code:1:73&#xa;var z = {};function foo(a){z = {};return true;}; function x() { z.gack = foo.call(this,1) }&#xa;  Parent: NULL" type="java.lang.RuntimeException">java.lang.RuntimeException: INTERNAL COMPILER ERROR.
Please report this problem.

Unexpected.
  Node(CALL): code:1:73
var z = {};function foo(a){z = {};return true;}; function x() { z.gack = foo.call(this,1) }
  Parent: NULL
	at com.google.javascript.jscomp.ExpressionDecomposer.extractConditional(ExpressionDecomposer.java:379)
	at com.google.javascript.jscomp.ExpressionDecomposer.exposeExpression(ExpressionDecomposer.java:236)
	at com.google.javascript.jscomp.ExpressionDecomposer.exposeExpression(ExpressionDecomposer.java:103)
	at com.google.javascript.jscomp.ExpressionDecomposer.maybeExposeExpression(ExpressionDecomposer.java:85)
	at com.google.javascript.jscomp.FunctionInjector$CallSiteType$6.prepare(FunctionInjector.java:389)
	at com.google.javascript.jscomp.FunctionInjector.maybePrepareCall(FunctionInjector.java:467)
	at com.google.javascript.jscomp.FunctionInjectorTest$2.call(FunctionInjectorTest.java:1489)
	at com.google.javascript.jscomp.FunctionInjectorTest$TestCallback.visit(FunctionInjectorTest.java:1544)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:576)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseFunction(NodeTraversal.java:610)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:562)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:289)
	at com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:528)
	at com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1508)
	at com.google.javascript.jscomp.FunctionInjectorTest.testInlineReferenceInExpression15(FunctionInjectorTest.java:1227)
Caused by: java.lang.IllegalStateException: Unexpected.
</error>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testInlineReferenceInExpression16" time="0.002">
    <error message="INTERNAL COMPILER ERROR.&#xa;Please report this problem.&#xa;&#xa;Unexpected.&#xa;  Node(CALL): code:1:75&#xa;var z = {};function foo(a){z = {};return true;}; function x() { z[bar()] = foo(1) }&#xa;  Parent: NULL" type="java.lang.RuntimeException">java.lang.RuntimeException: INTERNAL COMPILER ERROR.
Please report this problem.

Unexpected.
  Node(CALL): code:1:75
var z = {};function foo(a){z = {};return true;}; function x() { z[bar()] = foo(1) }
  Parent: NULL
	at com.google.javascript.jscomp.ExpressionDecomposer.extractConditional(ExpressionDecomposer.java:379)
	at com.google.javascript.jscomp.ExpressionDecomposer.exposeExpression(ExpressionDecomposer.java:236)
	at com.google.javascript.jscomp.ExpressionDecomposer.exposeExpression(ExpressionDecomposer.java:103)
	at com.google.javascript.jscomp.ExpressionDecomposer.maybeExposeExpression(ExpressionDecomposer.java:85)
	at com.google.javascript.jscomp.FunctionInjector$CallSiteType$6.prepare(FunctionInjector.java:389)
	at com.google.javascript.jscomp.FunctionInjector.maybePrepareCall(FunctionInjector.java:467)
	at com.google.javascript.jscomp.FunctionInjectorTest$2.call(FunctionInjectorTest.java:1489)
	at com.google.javascript.jscomp.FunctionInjectorTest$TestCallback.visit(FunctionInjectorTest.java:1544)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:576)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseFunction(NodeTraversal.java:610)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:562)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:289)
	at com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:528)
	at com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1508)
	at com.google.javascript.jscomp.FunctionInjectorTest.testInlineReferenceInExpression16(FunctionInjectorTest.java:1247)
Caused by: java.lang.IllegalStateException: Unexpected.
</error>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testInlineReferenceInExpression17" time="0.002">
    <error message="INTERNAL COMPILER ERROR.&#xa;Please report this problem.&#xa;&#xa;Unexpected.&#xa;  Node(CALL): code:1:77&#xa;var z = {};function foo(a){z = {};return true;}; function x() { z.y.x.gack = foo(1) }&#xa;  Parent: NULL" type="java.lang.RuntimeException">java.lang.RuntimeException: INTERNAL COMPILER ERROR.
Please report this problem.

Unexpected.
  Node(CALL): code:1:77
var z = {};function foo(a){z = {};return true;}; function x() { z.y.x.gack = foo(1) }
  Parent: NULL
	at com.google.javascript.jscomp.ExpressionDecomposer.extractConditional(ExpressionDecomposer.java:379)
	at com.google.javascript.jscomp.ExpressionDecomposer.exposeExpression(ExpressionDecomposer.java:236)
	at com.google.javascript.jscomp.ExpressionDecomposer.exposeExpression(ExpressionDecomposer.java:103)
	at com.google.javascript.jscomp.ExpressionDecomposer.maybeExposeExpression(ExpressionDecomposer.java:85)
	at com.google.javascript.jscomp.FunctionInjector$CallSiteType$6.prepare(FunctionInjector.java:389)
	at com.google.javascript.jscomp.FunctionInjector.maybePrepareCall(FunctionInjector.java:467)
	at com.google.javascript.jscomp.FunctionInjectorTest$2.call(FunctionInjectorTest.java:1489)
	at com.google.javascript.jscomp.FunctionInjectorTest$TestCallback.visit(FunctionInjectorTest.java:1544)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:576)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseFunction(NodeTraversal.java:610)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:562)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:289)
	at com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:528)
	at com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1508)
	at com.google.javascript.jscomp.FunctionInjectorTest.testInlineReferenceInExpression17(FunctionInjectorTest.java:1269)
Caused by: java.lang.IllegalStateException: Unexpected.
</error>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testInlineWithinCalls1" time="0.002">
    <error message="INTERNAL COMPILER ERROR.&#xa;Please report this problem.&#xa;&#xa;Unexpected.&#xa;  Node(CALL): code:1:46&#xa;function foo(){return _g;}; function x() {1 + foo()() }&#xa;  Parent(CALL): code:1:46&#xa;function foo(){return _g;}; function x() {1 + foo()() }&#xa;" type="java.lang.RuntimeException">java.lang.RuntimeException: INTERNAL COMPILER ERROR.
Please report this problem.

Unexpected.
  Node(CALL): code:1:46
function foo(){return _g;}; function x() {1 + foo()() }
  Parent(CALL): code:1:46
function foo(){return _g;}; function x() {1 + foo()() }

	at com.google.javascript.jscomp.ExpressionDecomposer.extractConditional(ExpressionDecomposer.java:379)
	at com.google.javascript.jscomp.ExpressionDecomposer.exposeExpression(ExpressionDecomposer.java:236)
	at com.google.javascript.jscomp.ExpressionDecomposer.exposeExpression(ExpressionDecomposer.java:103)
	at com.google.javascript.jscomp.ExpressionDecomposer.maybeExposeExpression(ExpressionDecomposer.java:85)
	at com.google.javascript.jscomp.FunctionInjector$CallSiteType$6.prepare(FunctionInjector.java:389)
	at com.google.javascript.jscomp.FunctionInjector.maybePrepareCall(FunctionInjector.java:467)
	at com.google.javascript.jscomp.FunctionInjectorTest$2.call(FunctionInjectorTest.java:1489)
	at com.google.javascript.jscomp.FunctionInjectorTest$TestCallback.visit(FunctionInjectorTest.java:1544)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:576)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseFunction(NodeTraversal.java:610)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:562)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:570)
	at com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:289)
	at com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:528)
	at com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1508)
	at com.google.javascript.jscomp.FunctionInjectorTest.testInlineWithinCalls1(FunctionInjectorTest.java:1291)
Caused by: java.lang.IllegalStateException: Unexpected.
</error>
  </testcase>
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testInlineAssignmentToConstant" time="0.002" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testBug1897706" time="0.006" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testIssue1101a" time="0.001" />
  <testcase classname="com.google.javascript.jscomp.FunctionInjectorTest" name="testIssue1101b" time="0.001" />
  <system-out><![CDATA[]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
